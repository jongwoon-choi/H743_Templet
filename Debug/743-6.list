
743-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d2c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b3e8  08012fcc  08012fcc  00022fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e3b4  0801e3b4  0002e3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e3bc  0801e3bc  0002e3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e3c0  0801e3c0  0002e3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000025c  24000000  0801e3c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002354  2400025c  0801e620  0003025c  2**2
                  ALLOC
  8 ._user_heap_stack 00004000  240025b0  0801e620  000325b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00048e12  00000000  00000000  0003028a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007a41  00000000  00000000  0007909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002208  00000000  00000000  00080ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001f50  00000000  00000000  00082ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042465  00000000  00000000  00084c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000307ec  00000000  00000000  000c709d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001894f2  00000000  00000000  000f7889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00280d7b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000923c  00000000  00000000  00280dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400025c 	.word	0x2400025c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012fb4 	.word	0x08012fb4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000260 	.word	0x24000260
 80002dc:	08012fb4 	.word	0x08012fb4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800069c:	4b30      	ldr	r3, [pc, #192]	; (8000760 <MX_ADC1_Init+0xe8>)
 800069e:	4a31      	ldr	r2, [pc, #196]	; (8000764 <MX_ADC1_Init+0xec>)
 80006a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006a2:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006fc:	f003 fde2 	bl	80042c4 <HAL_ADC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000706:	f000 fd2b 	bl	8001160 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <MX_ADC1_Init+0xe8>)
 8000716:	f004 fbf5 	bl	8004f04 <HAL_ADCEx_MultiModeConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000720:	f000 fd1e 	bl	8001160 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_ADC1_Init+0xf0>)
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2306      	movs	r3, #6
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000730:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000734:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000736:	2304      	movs	r3, #4
 8000738:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_ADC1_Init+0xe8>)
 8000748:	f003 ff5c 	bl	8004604 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000752:	f000 fd05 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2400186c 	.word	0x2400186c
 8000764:	40022000 	.word	0x40022000
 8000768:	1d500080 	.word	0x1d500080

0800076c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]
 8000782:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_ADC2_Init+0xc0>)
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <MX_ADC2_Init+0xc4>)
 8000788:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_ADC2_Init+0xc0>)
 800078c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000790:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_ADC2_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_ADC2_Init+0xc0>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_ADC2_Init+0xc0>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC2_Init+0xc0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_ADC2_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC2_Init+0xc0>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_ADC2_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_ADC2_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ADC2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_ADC2_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_ADC2_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_ADC2_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ADC2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <MX_ADC2_Init+0xc0>)
 80007e4:	f003 fd6e 	bl	80042c4 <HAL_ADC_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80007ee:	f000 fcb7 	bl	8001160 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_ADC2_Init+0xc8>)
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f6:	2306      	movs	r3, #6
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000802:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000804:	2304      	movs	r3, #4
 8000806:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC2_Init+0xc0>)
 8000816:	f003 fef5 	bl	8004604 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000820:	f000 fc9e 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	24001808 	.word	0x24001808
 8000830:	40022100 	.word	0x40022100
 8000834:	0c900008 	.word	0x0c900008

08000838 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000852:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <MX_ADC3_Init+0xc4>)
 8000854:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000858:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800085c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800086c:	2204      	movs	r2, #4
 800086e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000872:	2200      	movs	r2, #0
 8000874:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800087e:	2201      	movs	r2, #1
 8000880:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008b0:	f003 fd08 	bl	80042c4 <HAL_ADC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80008ba:	f000 fc51 	bl	8001160 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_ADC3_Init+0xc8>)
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d0:	2304      	movs	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008e2:	f003 fe8f 	bl	8004604 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80008ec:	f000 fc38 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	240018d0 	.word	0x240018d0
 80008fc:	58026000 	.word	0x58026000
 8000900:	2e300800 	.word	0x2e300800

08000904 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	; 0x40
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a6f      	ldr	r2, [pc, #444]	; (8000ae0 <HAL_ADC_MspInit+0x1dc>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d133      	bne.n	800098e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000926:	4b6f      	ldr	r3, [pc, #444]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	4a6d      	ldr	r2, [pc, #436]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 800092e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000930:	4b6c      	ldr	r3, [pc, #432]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10e      	bne.n	8000956 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000938:	4b6b      	ldr	r3, [pc, #428]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800093a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800093e:	4a6a      	ldr	r2, [pc, #424]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000948:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800094a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
 8000954:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4a62      	ldr	r2, [pc, #392]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000978:	2303      	movs	r3, #3
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	4859      	ldr	r0, [pc, #356]	; (8000aec <HAL_ADC_MspInit+0x1e8>)
 8000988:	f004 fdfc 	bl	8005584 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800098c:	e0a3      	b.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a57      	ldr	r2, [pc, #348]	; (8000af0 <HAL_ADC_MspInit+0x1ec>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d169      	bne.n	8000a6c <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000998:	4b52      	ldr	r3, [pc, #328]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a51      	ldr	r2, [pc, #324]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 80009a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10e      	bne.n	80009c8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009aa:	4b4f      	ldr	r3, [pc, #316]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009b0:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009ba:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	4a46      	ldr	r2, [pc, #280]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a32:	4619      	mov	r1, r3
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <HAL_ADC_MspInit+0x1e8>)
 8000a36:	f004 fda5 	bl	8005584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4829      	ldr	r0, [pc, #164]	; (8000af4 <HAL_ADC_MspInit+0x1f0>)
 8000a4e:	f004 fd99 	bl	8005584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a56:	2303      	movs	r3, #3
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a62:	4619      	mov	r1, r3
 8000a64:	4824      	ldr	r0, [pc, #144]	; (8000af8 <HAL_ADC_MspInit+0x1f4>)
 8000a66:	f004 fd8d 	bl	8005584 <HAL_GPIO_Init>
}
 8000a6a:	e034      	b.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_ADC_MspInit+0x1f8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12f      	bne.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <HAL_ADC_MspInit+0x1f0>)
 8000ac6:	f004 fd5d 	bl	8005584 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000aca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000ace:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ad2:	f003 fa55 	bl	8003f80 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	; 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	24000278 	.word	0x24000278
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58020000 	.word	0x58020000
 8000af0:	40022100 	.word	0x40022100
 8000af4:	58020800 	.word	0x58020800
 8000af8:	58020400 	.word	0x58020400
 8000afc:	58026000 	.word	0x58026000

08000b00 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2224      	movs	r2, #36	; 0x24
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f011 fe1b 	bl	8012748 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <MX_DAC1_Init+0x74>)
 8000b16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b18:	4815      	ldr	r0, [pc, #84]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b1a:	f004 fbe0 	bl	80052de <HAL_DAC_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b24:	f000 fb1c 	bl	8001160 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b34:	2302      	movs	r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b44:	f004 fbee 	bl	8005324 <HAL_DAC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 fb07 	bl	8001160 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2210      	movs	r2, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b5a:	f004 fbe3 	bl	8005324 <HAL_DAC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000b64:	f000 fafc 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24001934 	.word	0x24001934
 8000b74:	40007400 	.word	0x40007400

08000b78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <HAL_DAC_MspInit+0x80>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d129      	bne.n	8000bee <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba0:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bd6:	2330      	movs	r3, #48	; 0x30
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_DAC_MspInit+0x88>)
 8000bea:	f004 fccb 	bl	8005584 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40007400 	.word	0x40007400
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	58020000 	.word	0x58020000

08000c04 <MX_GPIO_Init>:
     PC11   ------> SDMMC1_D3
     PC12   ------> SDMMC1_CK
     PD2   ------> SDMMC1_CMD
*/
void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1a:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a89      	ldr	r2, [pc, #548]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b87      	ldr	r3, [pc, #540]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0310 	and.w	r3, r3, #16
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	4b83      	ldr	r3, [pc, #524]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a82      	ldr	r2, [pc, #520]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b7f      	ldr	r3, [pc, #508]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	4b7c      	ldr	r3, [pc, #496]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a7a      	ldr	r2, [pc, #488]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b78      	ldr	r3, [pc, #480]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b74      	ldr	r3, [pc, #464]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a73      	ldr	r2, [pc, #460]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b70      	ldr	r3, [pc, #448]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a6b      	ldr	r2, [pc, #428]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b69      	ldr	r3, [pc, #420]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a64      	ldr	r2, [pc, #400]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b61      	ldr	r3, [pc, #388]	; (8000e48 <MX_GPIO_Init+0x244>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	485e      	ldr	r0, [pc, #376]	; (8000e4c <MX_GPIO_Init+0x248>)
 8000cd4:	f004 fe1e 	bl	8005914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000cde:	485b      	ldr	r0, [pc, #364]	; (8000e4c <MX_GPIO_Init+0x248>)
 8000ce0:	f004 fe18 	bl	8005914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 8000cea:	4859      	ldr	r0, [pc, #356]	; (8000e50 <MX_GPIO_Init+0x24c>)
 8000cec:	f004 fe12 	bl	8005914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	4857      	ldr	r0, [pc, #348]	; (8000e54 <MX_GPIO_Init+0x250>)
 8000cf6:	f004 fe0d 	bl	8005914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	4854      	ldr	r0, [pc, #336]	; (8000e50 <MX_GPIO_Init+0x24c>)
 8000d00:	f004 fe08 	bl	8005914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000d04:	2308      	movs	r3, #8
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	484c      	ldr	r0, [pc, #304]	; (8000e4c <MX_GPIO_Init+0x248>)
 8000d1c:	f004 fc32 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8000d20:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4847      	ldr	r0, [pc, #284]	; (8000e54 <MX_GPIO_Init+0x250>)
 8000d36:	f004 fc25 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8000d3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	483e      	ldr	r0, [pc, #248]	; (8000e4c <MX_GPIO_Init+0x248>)
 8000d54:	f004 fc16 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d58:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	483a      	ldr	r0, [pc, #232]	; (8000e58 <MX_GPIO_Init+0x254>)
 8000d6e:	f004 fc09 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 8000d72:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4831      	ldr	r0, [pc, #196]	; (8000e50 <MX_GPIO_Init+0x24c>)
 8000d8c:	f004 fbfa 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	482a      	ldr	r0, [pc, #168]	; (8000e50 <MX_GPIO_Init+0x24c>)
 8000da6:	f004 fbed 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4824      	ldr	r0, [pc, #144]	; (8000e54 <MX_GPIO_Init+0x250>)
 8000dc2:	f004 fbdf 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000dc6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000dca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000dd8:	230c      	movs	r3, #12
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <MX_GPIO_Init+0x250>)
 8000de4:	f004 fbce 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_GPIO_Init+0x258>)
 8000dfe:	f004 fbc1 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e12:	230c      	movs	r3, #12
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_GPIO_Init+0x24c>)
 8000e1e:	f004 fbb1 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_CS_Pin;
 8000e22:	2340      	movs	r3, #64	; 0x40
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(F_CS_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_GPIO_Init+0x24c>)
 8000e3a:	f004 fba3 	bl	8005584 <HAL_GPIO_Init>

}
 8000e3e:	bf00      	nop
 8000e40:	3730      	adds	r7, #48	; 0x30
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58021000 	.word	0x58021000
 8000e50:	58020c00 	.word	0x58020c00
 8000e54:	58020800 	.word	0x58020800
 8000e58:	58020400 	.word	0x58020400
 8000e5c:	58020000 	.word	0x58020000

08000e60 <LED_Blink>:
  /* Enable D-Cache */
  SCB_EnableDCache();
}

static void LED_Blink(uint32_t Hdelay,uint32_t Ldelay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(KEY_GPIO_Port,KEY_Pin,GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <LED_Blink+0x3c>)
 8000e70:	f004 fd50 	bl	8005914 <HAL_GPIO_WritePin>
	HAL_Delay(Hdelay - 1);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 f843 	bl	8003f04 <HAL_Delay>
	HAL_GPIO_WritePin(KEY_GPIO_Port,KEY_Pin,GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2108      	movs	r1, #8
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <LED_Blink+0x3c>)
 8000e84:	f004 fd46 	bl	8005914 <HAL_GPIO_WritePin>
	HAL_Delay(Ldelay-1);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 f839 	bl	8003f04 <HAL_Delay>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	58021000 	.word	0x58021000

08000ea0 <RTC_CalendarShow>:
  * @brief  Get the current time and date.
  * @param
  * @retval None
  */
static void RTC_CalendarShow(RTC_DateTypeDef *sdatestructureget,RTC_TimeTypeDef *stimestructureget)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  /* ?��?��?��?��?��?��谿珂?��?��?��?��?��?��?��?��?��?��?��?��?��?��?��??? ?��?��?��?��?��?��?��?��?��?��?��?��?��?��RTC?��?��?��?��?��?��?��?�� */
  /* Both time and date must be obtained or RTC cannot be read next time */
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, stimestructureget, RTC_FORMAT_BIN);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	6839      	ldr	r1, [r7, #0]
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <RTC_CalendarShow+0x28>)
 8000eb0:	f009 f9d4 	bl	800a25c <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, sdatestructureget, RTC_FORMAT_BIN);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <RTC_CalendarShow+0x28>)
 8000eba:	f009 fab3 	bl	800a424 <HAL_RTC_GetDate>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24001948 	.word	0x24001948

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	; 0x38
 8000ed0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f002 ff85 	bl	8003de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f877 	bl	8000fc8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eda:	f000 f8fd 	bl	80010d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f7ff fe91 	bl	8000c04 <MX_GPIO_Init>
  MX_RTC_Init();
 8000ee2:	f000 f943 	bl	800116c <MX_RTC_Init>
  MX_SPI1_Init();
 8000ee6:	f000 f9dd 	bl	80012a4 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000eea:	f000 fa31 	bl	8001350 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000eee:	f000 fc5f 	bl	80017b0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000ef2:	f010 ff21 	bl	8011d38 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000ef6:	f000 fd47 	bl	8001988 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000efa:	f000 fd91 	bl	8001a20 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000efe:	f000 fddb 	bl	8001ab8 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000f02:	f7ff fc99 	bl	8000838 <MX_ADC3_Init>
  MX_ADC2_Init();
 8000f06:	f7ff fc31 	bl	800076c <MX_ADC2_Init>
  MX_DAC1_Init();
 8000f0a:	f7ff fdf9 	bl	8000b00 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000f0e:	f7ff fbb3 	bl	8000678 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	uint8_t text[20];
	RTC_DateTypeDef sdatestructureget ;
	RTC_TimeTypeDef stimestructureget ;

	LCD_Test();
 8000f12:	f000 ff69 	bl	8001de8 <LCD_Test>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
			RTC_CalendarShow(&sdatestructureget,&stimestructureget);
 8000f16:	1d3a      	adds	r2, r7, #4
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ffbe 	bl	8000ea0 <RTC_CalendarShow>

	//		if (stimestructureget.Seconds % 2 == 1)
	//			sprintf((char *)&text,"Time %02d:%02d:%02d",stimestructureget.Hours, stimestructureget.Minutes,stimestructureget.Seconds);
	//		else
				sprintf((char *)&text,"Time %02d:%02d:%02d",stimestructureget.Hours, stimestructureget.Minutes,stimestructureget.Seconds);
 8000f24:	793b      	ldrb	r3, [r7, #4]
 8000f26:	461a      	mov	r2, r3
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	f107 001c 	add.w	r0, r7, #28
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	460b      	mov	r3, r1
 8000f36:	4920      	ldr	r1, [pc, #128]	; (8000fb8 <main+0xec>)
 8000f38:	f011 fc0e 	bl	8012758 <siprintf>
			LCD_ShowString(4, 58, 160, 16, 16, text);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	2310      	movs	r3, #16
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2310      	movs	r3, #16
 8000f48:	22a0      	movs	r2, #160	; 0xa0
 8000f4a:	213a      	movs	r1, #58	; 0x3a
 8000f4c:	2004      	movs	r0, #4
 8000f4e:	f001 fac1 	bl	80024d4 <LCD_ShowString>

				sprintf((char *)&text, "Date 20%02d-%02d-%02d ",sdatestructureget.Year,sdatestructureget.Month, sdatestructureget.Date);
 8000f52:	7efb      	ldrb	r3, [r7, #27]
 8000f54:	461a      	mov	r2, r3
 8000f56:	7e7b      	ldrb	r3, [r7, #25]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	7ebb      	ldrb	r3, [r7, #26]
 8000f5c:	f107 001c 	add.w	r0, r7, #28
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	460b      	mov	r3, r1
 8000f64:	4915      	ldr	r1, [pc, #84]	; (8000fbc <main+0xf0>)
 8000f66:	f011 fbf7 	bl	8012758 <siprintf>
			LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <main+0xf4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	2310      	movs	r3, #16
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	2128      	movs	r1, #40	; 0x28
 8000f7e:	2004      	movs	r0, #4
 8000f80:	f001 faa8 	bl	80024d4 <LCD_ShowString>

			sprintf((char *)&text,"Tick: %d ms",HAL_GetTick());
 8000f84:	f002 ffb2 	bl	8003eec <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <main+0xf8>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f011 fbe1 	bl	8012758 <siprintf>
			LCD_ShowString(4, 74, 160, 16, 16,text);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	22a0      	movs	r2, #160	; 0xa0
 8000fa4:	214a      	movs	r1, #74	; 0x4a
 8000fa6:	2004      	movs	r0, #4
 8000fa8:	f001 fa94 	bl	80024d4 <LCD_ShowString>

			LED_Blink(3,500);
 8000fac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f7ff ff55 	bl	8000e60 <LED_Blink>
			RTC_CalendarShow(&sdatestructureget,&stimestructureget);
 8000fb6:	e7ae      	b.n	8000f16 <main+0x4a>
 8000fb8:	08012fcc 	.word	0x08012fcc
 8000fbc:	08012fe0 	.word	0x08012fe0
 8000fc0:	24001cb4 	.word	0x24001cb4
 8000fc4:	08012ff8 	.word	0x08012ff8

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09c      	sub	sp, #112	; 0x70
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	224c      	movs	r2, #76	; 0x4c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f011 fbb6 	bl	8012748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2220      	movs	r2, #32
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f011 fbb0 	bl	8012748 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f005 feb5 	bl	8006d58 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b36      	ldr	r3, [pc, #216]	; (80010cc <SystemClock_Config+0x104>)
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	4a35      	ldr	r2, [pc, #212]	; (80010cc <SystemClock_Config+0x104>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <SystemClock_Config+0x104>)
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <SystemClock_Config+0x108>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001010:	4a2f      	ldr	r2, [pc, #188]	; (80010d0 <SystemClock_Config+0x108>)
 8001012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <SystemClock_Config+0x108>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001024:	bf00      	nop
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <SystemClock_Config+0x108>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001032:	d1f8      	bne.n	8001026 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <SystemClock_Config+0x10c>)
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	f023 0303 	bic.w	r3, r3, #3
 800103c:	4a25      	ldr	r2, [pc, #148]	; (80010d4 <SystemClock_Config+0x10c>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001044:	2309      	movs	r3, #9
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800104e:	2301      	movs	r3, #1
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001056:	2302      	movs	r3, #2
 8001058:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800105a:	2305      	movs	r3, #5
 800105c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800105e:	2360      	movs	r3, #96	; 0x60
 8001060:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001062:	2302      	movs	r3, #2
 8001064:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001066:	2304      	movs	r3, #4
 8001068:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800106e:	2308      	movs	r3, #8
 8001070:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001072:	2300      	movs	r3, #0
 8001074:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4618      	mov	r0, r3
 8001080:	f005 feb4 	bl	8006dec <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800108a:	f000 f869 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	233f      	movs	r3, #63	; 0x3f
 8001090:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2303      	movs	r3, #3
 8001094:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800109a:	2308      	movs	r3, #8
 800109c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2102      	movs	r1, #2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f006 faaa 	bl	800760c <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80010be:	f000 f84f 	bl	8001160 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3770      	adds	r7, #112	; 0x70
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	58000400 	.word	0x58000400
 80010d0:	58024800 	.word	0x58024800
 80010d4:	58024400 	.word	0x58024400

080010d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0b0      	sub	sp, #192	; 0xc0
 80010dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	22bc      	movs	r2, #188	; 0xbc
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f011 fb2f 	bl	8012748 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 80010ea:	f44f 2342 	mov.w	r3, #794624	; 0xc2000
 80010ee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 80010f0:	2320      	movs	r3, #32
 80010f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 80010f4:	2381      	movs	r3, #129	; 0x81
 80010f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001104:	23c0      	movs	r3, #192	; 0xc0
 8001106:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 10;
 8001110:	230a      	movs	r3, #10
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
 8001114:	2360      	movs	r3, #96	; 0x60
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 5;
 8001118:	2305      	movs	r3, #5
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 5;
 800111c:	2305      	movs	r3, #5
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001120:	2302      	movs	r3, #2
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800112a:	2300      	movs	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8001132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001136:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001138:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800113c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fdeb 	bl	8007d24 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <PeriphCommonClock_Config+0x80>
  {
    Error_Handler();
 8001154:	f000 f804 	bl	8001160 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	37c0      	adds	r7, #192	; 0xc0
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b090      	sub	sp, #64	; 0x40
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */
	 RTC_TimeTypeDef sTime = {0};
 8001172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
	  RTC_AlarmTypeDef sAlarm = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2228      	movs	r2, #40	; 0x28
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f011 fadb 	bl	8012748 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_RTC_Init+0xd0>)
 8001194:	4a2a      	ldr	r2, [pc, #168]	; (8001240 <MX_RTC_Init+0xd4>)
 8001196:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <MX_RTC_Init+0xd0>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800119e:	4b27      	ldr	r3, [pc, #156]	; (800123c <MX_RTC_Init+0xd0>)
 80011a0:	227f      	movs	r2, #127	; 0x7f
 80011a2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <MX_RTC_Init+0xd0>)
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <MX_RTC_Init+0xd0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_RTC_Init+0xd0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_RTC_Init+0xd0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_RTC_Init+0xd0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011c2:	481e      	ldr	r0, [pc, #120]	; (800123c <MX_RTC_Init+0xd0>)
 80011c4:	f008 ff34 	bl	800a030 <HAL_RTC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80011ce:	f7ff ffc7 	bl	8001160 <Error_Handler>
  }

  /* USER CODE BEGIN RTC_Init 2 */
  /** Initialize RTC and set the Time and Date
    */
    sTime.Hours = 0x14;
 80011d2:	2314      	movs	r3, #20
 80011d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    sTime.Minutes = 0x10;
 80011d8:	2310      	movs	r3, #16
 80011da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    sTime.Seconds = 0x0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_RTC_Init+0xd0>)
 80011f6:	f008 ff93 	bl	800a120 <HAL_RTC_SetTime>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_RTC_Init+0x98>
    {
      Error_Handler();
 8001200:	f7ff ffae 	bl	8001160 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001204:	2305      	movs	r3, #5
 8001206:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    sDate.Month = RTC_MONTH_NOVEMBER;
 800120a:	2311      	movs	r3, #17
 800120c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    sDate.Date = 0x19;
 8001210:	2319      	movs	r3, #25
 8001212:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    sDate.Year = 0x21;
 8001216:	2321      	movs	r3, #33	; 0x21
 8001218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800121c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001220:	2201      	movs	r2, #1
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_RTC_Init+0xd0>)
 8001226:	f009 f875 	bl	800a314 <HAL_RTC_SetDate>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_RTC_Init+0xc8>
    {
      Error_Handler();
 8001230:	f7ff ff96 	bl	8001160 <Error_Handler>
    }
  /* USER CODE END RTC_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3740      	adds	r7, #64	; 0x40
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24001948 	.word	0x24001948
 8001240:	58004000 	.word	0x58004000

08001244 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b2      	sub	sp, #200	; 0xc8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	22bc      	movs	r2, #188	; 0xbc
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f011 fa77 	bl	8012748 <memset>
  if(rtcHandle->Instance==RTC)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <HAL_RTC_MspInit+0x58>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d116      	bne.n	8001292 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001264:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001268:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800126a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4618      	mov	r0, r3
 8001278:	f006 fd54 	bl	8007d24 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001282:	f7ff ff6d 	bl	8001160 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_RTC_MspInit+0x5c>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <HAL_RTC_MspInit+0x5c>)
 800128c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001290:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001292:	bf00      	nop
 8001294:	37c8      	adds	r7, #200	; 0xc8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	58004000 	.word	0x58004000
 80012a0:	58024400 	.word	0x58024400

080012a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012aa:	4a28      	ldr	r2, [pc, #160]	; (800134c <MX_SPI1_Init+0xa8>)
 80012ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012be:	2207      	movs	r2, #7
 80012c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_SPI1_Init+0xa4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_SPI1_Init+0xa4>)
 8001304:	2200      	movs	r2, #0
 8001306:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_SPI1_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_SPI1_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_SPI1_Init+0xa4>)
 8001316:	2200      	movs	r2, #0
 8001318:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_SPI1_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_SPI1_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_SPI1_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_SPI1_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_SPI1_Init+0xa4>)
 8001334:	f009 f992 	bl	800a65c <HAL_SPI_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800133e:	f7ff ff0f 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	240019f4 	.word	0x240019f4
 800134c:	40013000 	.word	0x40013000

08001350 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <MX_SPI4_Init+0xa8>)
 8001356:	4a29      	ldr	r2, [pc, #164]	; (80013fc <MX_SPI4_Init+0xac>)
 8001358:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_SPI4_Init+0xa8>)
 800135c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001360:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <MX_SPI4_Init+0xa8>)
 8001364:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001368:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <MX_SPI4_Init+0xa8>)
 800136c:	2207      	movs	r2, #7
 800136e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001370:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <MX_SPI4_Init+0xa8>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_SPI4_Init+0xa8>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_SPI4_Init+0xa8>)
 800137e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001382:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_SPI4_Init+0xa8>)
 8001386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800138a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_SPI4_Init+0xa8>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_SPI4_Init+0xa8>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_SPI4_Init+0xa8>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_SPI4_Init+0xa8>)
 80013e4:	f009 f93a 	bl	800a65c <HAL_SPI_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80013ee:	f7ff feb7 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2400196c 	.word	0x2400196c
 80013fc:	40013400 	.word	0x40013400

08001400 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0bc      	sub	sp, #240	; 0xf0
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001418:	f107 0320 	add.w	r3, r7, #32
 800141c:	22bc      	movs	r2, #188	; 0xbc
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f011 f991 	bl	8012748 <memset>
  if(spiHandle->Instance==SPI1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a53      	ldr	r2, [pc, #332]	; (8001578 <HAL_SPI_MspInit+0x178>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d166      	bne.n	80014fe <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001434:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001436:	2300      	movs	r3, #0
 8001438:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f006 fc70 	bl	8007d24 <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800144a:	f7ff fe89 	bl	8001160 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800144e:	4b4b      	ldr	r3, [pc, #300]	; (800157c <HAL_SPI_MspInit+0x17c>)
 8001450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001454:	4a49      	ldr	r2, [pc, #292]	; (800157c <HAL_SPI_MspInit+0x17c>)
 8001456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800145a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_SPI_MspInit+0x17c>)
 8001460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146c:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_SPI_MspInit+0x17c>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_SPI_MspInit+0x17c>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147c:	4b3f      	ldr	r3, [pc, #252]	; (800157c <HAL_SPI_MspInit+0x17c>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b3c      	ldr	r3, [pc, #240]	; (800157c <HAL_SPI_MspInit+0x17c>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a3a      	ldr	r2, [pc, #232]	; (800157c <HAL_SPI_MspInit+0x17c>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_SPI_MspInit+0x17c>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c0:	2305      	movs	r3, #5
 80014c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ca:	4619      	mov	r1, r3
 80014cc:	482c      	ldr	r0, [pc, #176]	; (8001580 <HAL_SPI_MspInit+0x180>)
 80014ce:	f004 f859 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80014d2:	2318      	movs	r3, #24
 80014d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ea:	2305      	movs	r3, #5
 80014ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f4:	4619      	mov	r1, r3
 80014f6:	4823      	ldr	r0, [pc, #140]	; (8001584 <HAL_SPI_MspInit+0x184>)
 80014f8:	f004 f844 	bl	8005584 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80014fc:	e038      	b.n	8001570 <HAL_SPI_MspInit+0x170>
  else if(spiHandle->Instance==SPI4)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_SPI_MspInit+0x188>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d133      	bne.n	8001570 <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_SPI_MspInit+0x17c>)
 800150a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800150e:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_SPI_MspInit+0x17c>)
 8001510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001514:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_SPI_MspInit+0x17c>)
 800151a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800151e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_SPI_MspInit+0x17c>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a13      	ldr	r2, [pc, #76]	; (800157c <HAL_SPI_MspInit+0x17c>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_SPI_MspInit+0x17c>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001544:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001558:	2301      	movs	r3, #1
 800155a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800155e:	2305      	movs	r3, #5
 8001560:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001564:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001568:	4619      	mov	r1, r3
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <HAL_SPI_MspInit+0x18c>)
 800156c:	f004 f80a 	bl	8005584 <HAL_GPIO_Init>
}
 8001570:	bf00      	nop
 8001572:	37f0      	adds	r7, #240	; 0xf0
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40013000 	.word	0x40013000
 800157c:	58024400 	.word	0x58024400
 8001580:	58020c00 	.word	0x58020c00
 8001584:	58020400 	.word	0x58020400
 8001588:	40013400 	.word	0x40013400
 800158c:	58021000 	.word	0x58021000

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_MspInit+0x30>)
 8001598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_MspInit+0x30>)
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_MspInit+0x30>)
 80015a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	58024400 	.word	0x58024400

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f002 fc58 	bl	8003ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <OTG_FS_IRQHandler+0x10>)
 800161e:	f004 fae9 	bl	8005bf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	24002198 	.word	0x24002198

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f011 f84a 	bl	80126f4 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	24080000 	.word	0x24080000
 800168c:	00002000 	.word	0x00002000
 8001690:	2400027c 	.word	0x2400027c
 8001694:	240025b0 	.word	0x240025b0

08001698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800169c:	4b39      	ldr	r3, [pc, #228]	; (8001784 <SystemInit+0xec>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a38      	ldr	r2, [pc, #224]	; (8001784 <SystemInit+0xec>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <SystemInit+0xf0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d807      	bhi.n	80016c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016b8:	4b33      	ldr	r3, [pc, #204]	; (8001788 <SystemInit+0xf0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 030f 	bic.w	r3, r3, #15
 80016c0:	4a31      	ldr	r2, [pc, #196]	; (8001788 <SystemInit+0xf0>)
 80016c2:	f043 0307 	orr.w	r3, r3, #7
 80016c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <SystemInit+0xf4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2f      	ldr	r2, [pc, #188]	; (800178c <SystemInit+0xf4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <SystemInit+0xf4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <SystemInit+0xf4>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	492b      	ldr	r1, [pc, #172]	; (800178c <SystemInit+0xf4>)
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <SystemInit+0xf8>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <SystemInit+0xf0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <SystemInit+0xf0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 030f 	bic.w	r3, r3, #15
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <SystemInit+0xf0>)
 80016fc:	f043 0307 	orr.w	r3, r3, #7
 8001700:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <SystemInit+0xf4>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <SystemInit+0xf4>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <SystemInit+0xf4>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <SystemInit+0xf4>)
 8001716:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <SystemInit+0xfc>)
 8001718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <SystemInit+0xf4>)
 800171c:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <SystemInit+0x100>)
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <SystemInit+0xf4>)
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <SystemInit+0x104>)
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <SystemInit+0xf4>)
 8001728:	2200      	movs	r2, #0
 800172a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <SystemInit+0xf4>)
 800172e:	4a1b      	ldr	r2, [pc, #108]	; (800179c <SystemInit+0x104>)
 8001730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <SystemInit+0xf4>)
 8001734:	2200      	movs	r2, #0
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <SystemInit+0xf4>)
 800173a:	4a18      	ldr	r2, [pc, #96]	; (800179c <SystemInit+0x104>)
 800173c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <SystemInit+0xf4>)
 8001740:	2200      	movs	r2, #0
 8001742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <SystemInit+0xf4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a10      	ldr	r2, [pc, #64]	; (800178c <SystemInit+0xf4>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <SystemInit+0xf4>)
 8001752:	2200      	movs	r2, #0
 8001754:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <SystemInit+0x108>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <SystemInit+0x10c>)
 800175c:	4013      	ands	r3, r2
 800175e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001762:	d202      	bcs.n	800176a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <SystemInit+0x110>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <SystemInit+0x114>)
 800176c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SystemInit+0xec>)
 8001774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001778:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	52002000 	.word	0x52002000
 800178c:	58024400 	.word	0x58024400
 8001790:	eaf6ed7f 	.word	0xeaf6ed7f
 8001794:	02020200 	.word	0x02020200
 8001798:	01ff0000 	.word	0x01ff0000
 800179c:	01010280 	.word	0x01010280
 80017a0:	5c001000 	.word	0x5c001000
 80017a4:	ffff0000 	.word	0xffff0000
 80017a8:	51008108 	.word	0x51008108
 80017ac:	52004000 	.word	0x52004000

080017b0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b096      	sub	sp, #88	; 0x58
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	222c      	movs	r2, #44	; 0x2c
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f010 ffb3 	bl	8012748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <MX_TIM1_Init+0x114>)
 80017e4:	4a38      	ldr	r2, [pc, #224]	; (80018c8 <MX_TIM1_Init+0x118>)
 80017e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <MX_TIM1_Init+0x114>)
 80017ea:	2277      	movs	r2, #119	; 0x77
 80017ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <MX_TIM1_Init+0x114>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <MX_TIM1_Init+0x114>)
 80017f6:	2263      	movs	r2, #99	; 0x63
 80017f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <MX_TIM1_Init+0x114>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001800:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <MX_TIM1_Init+0x114>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <MX_TIM1_Init+0x114>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800180c:	482d      	ldr	r0, [pc, #180]	; (80018c4 <MX_TIM1_Init+0x114>)
 800180e:	f009 ffe0 	bl	800b7d2 <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001818:	f7ff fca2 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001828:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800182c:	4619      	mov	r1, r3
 800182e:	4825      	ldr	r0, [pc, #148]	; (80018c4 <MX_TIM1_Init+0x114>)
 8001830:	f00a fd58 	bl	800c2e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800183a:	f7ff fc91 	bl	8001160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183e:	2360      	movs	r3, #96	; 0x60
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001846:	2300      	movs	r3, #0
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800184a:	2308      	movs	r3, #8
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800185a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185e:	2204      	movs	r2, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4818      	ldr	r0, [pc, #96]	; (80018c4 <MX_TIM1_Init+0x114>)
 8001864:	f00a f80c 	bl	800b880 <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800186e:	f7ff fc77 	bl	8001160 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <MX_TIM1_Init+0x114>)
 80018a8:	f00a fda4 	bl	800c3f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80018b2:	f7ff fc55 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MX_TIM1_Init+0x114>)
 80018b8:	f000 f82a 	bl	8001910 <HAL_TIM_MspPostInit>

}
 80018bc:	bf00      	nop
 80018be:	3758      	adds	r7, #88	; 0x58
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	24001a7c 	.word	0x24001a7c
 80018c8:	40010000 	.word	0x40010000

080018cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <HAL_TIM_PWM_MspInit+0x3c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d10e      	bne.n	80018fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_TIM_PWM_MspInit+0x40>)
 80018e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018e4:	4a09      	ldr	r2, [pc, #36]	; (800190c <HAL_TIM_PWM_MspInit+0x40>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <HAL_TIM_PWM_MspInit+0x40>)
 80018f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40010000 	.word	0x40010000
 800190c:	58024400 	.word	0x58024400

08001910 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a13      	ldr	r2, [pc, #76]	; (800197c <HAL_TIM_MspPostInit+0x6c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11f      	bne.n	8001972 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_TIM_MspPostInit+0x70>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_TIM_MspPostInit+0x70>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_TIM_MspPostInit+0x70>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001954:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001962:	2301      	movs	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_TIM_MspPostInit+0x74>)
 800196e:	f003 fe09 	bl	8005584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40010000 	.word	0x40010000
 8001980:	58024400 	.word	0x58024400
 8001984:	58021000 	.word	0x58021000

08001988 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <MX_UART4_Init+0x90>)
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <MX_UART4_Init+0x94>)
 8001990:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <MX_UART4_Init+0x90>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <MX_UART4_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <MX_UART4_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <MX_UART4_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MX_UART4_Init+0x90>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <MX_UART4_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_UART4_Init+0x90>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <MX_UART4_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_UART4_Init+0x90>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <MX_UART4_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019d0:	4811      	ldr	r0, [pc, #68]	; (8001a18 <MX_UART4_Init+0x90>)
 80019d2:	f00a fdb2 	bl	800c53a <HAL_UART_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019dc:	f7ff fbc0 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_UART4_Init+0x90>)
 80019e4:	f00b fd00 	bl	800d3e8 <HAL_UARTEx_SetTxFifoThreshold>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80019ee:	f7ff fbb7 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <MX_UART4_Init+0x90>)
 80019f6:	f00b fd35 	bl	800d464 <HAL_UARTEx_SetRxFifoThreshold>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a00:	f7ff fbae 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_UART4_Init+0x90>)
 8001a06:	f00b fcb6 	bl	800d376 <HAL_UARTEx_DisableFifoMode>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a10:	f7ff fba6 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	24001be8 	.word	0x24001be8
 8001a1c:	40004c00 	.word	0x40004c00

08001a20 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a26:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <MX_USART1_UART_Init+0x94>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a68:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a6a:	f00a fd66 	bl	800c53a <HAL_UART_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a74:	f7ff fb74 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a7c:	f00b fcb4 	bl	800d3e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a86:	f7ff fb6b 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a8e:	f00b fce9 	bl	800d464 <HAL_UARTEx_SetRxFifoThreshold>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a98:	f7ff fb62 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <MX_USART1_UART_Init+0x90>)
 8001a9e:	f00b fc6a 	bl	800d376 <HAL_UARTEx_DisableFifoMode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001aa8:	f7ff fb5a 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	24001b58 	.word	0x24001b58
 8001ab4:	40011000 	.word	0x40011000

08001ab8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001abe:	4a23      	ldr	r2, [pc, #140]	; (8001b4c <MX_USART3_UART_Init+0x94>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b00:	4811      	ldr	r0, [pc, #68]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001b02:	f00a fd1a 	bl	800c53a <HAL_UART_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b0c:	f7ff fb28 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001b14:	f00b fc68 	bl	800d3e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b1e:	f7ff fb1f 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4808      	ldr	r0, [pc, #32]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001b26:	f00b fc9d 	bl	800d464 <HAL_UARTEx_SetRxFifoThreshold>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b30:	f7ff fb16 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <MX_USART3_UART_Init+0x90>)
 8001b36:	f00b fc1e 	bl	800d376 <HAL_UARTEx_DisableFifoMode>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b40:	f7ff fb0e 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	24001ac8 	.word	0x24001ac8
 8001b4c:	40004800 	.word	0x40004800

08001b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0be      	sub	sp, #248	; 0xf8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6c:	22bc      	movs	r2, #188	; 0xbc
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f010 fde9 	bl	8012748 <memset>
  if(uartHandle->Instance==UART4)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a80      	ldr	r2, [pc, #512]	; (8001d7c <HAL_UART_MspInit+0x22c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d142      	bne.n	8001c06 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b80:	2302      	movs	r3, #2
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f006 f8c8 	bl	8007d24 <HAL_RCCEx_PeriphCLKConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b9a:	f7ff fae1 	bl	8001160 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b9e:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba4:	4a76      	ldr	r2, [pc, #472]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001baa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bae:	4b74      	ldr	r3, [pc, #464]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc2:	4a6f      	ldr	r2, [pc, #444]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4861      	ldr	r0, [pc, #388]	; (8001d84 <HAL_UART_MspInit+0x234>)
 8001c00:	f003 fcc0 	bl	8005584 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c04:	e0b5      	b.n	8001d72 <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a5f      	ldr	r2, [pc, #380]	; (8001d88 <HAL_UART_MspInit+0x238>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d168      	bne.n	8001ce2 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f006 f880 	bl	8007d24 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001c2a:	f7ff fa99 	bl	8001160 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c2e:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c36:	f043 0310 	orr.w	r3, r3, #16
 8001c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c52:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5c:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	4a43      	ldr	r2, [pc, #268]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4837      	ldr	r0, [pc, #220]	; (8001d8c <HAL_UART_MspInit+0x23c>)
 8001cb0:	f003 fc68 	bl	8005584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	482a      	ldr	r0, [pc, #168]	; (8001d84 <HAL_UART_MspInit+0x234>)
 8001cdc:	f003 fc52 	bl	8005584 <HAL_GPIO_Init>
}
 8001ce0:	e047      	b.n	8001d72 <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART3)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a2a      	ldr	r2, [pc, #168]	; (8001d90 <HAL_UART_MspInit+0x240>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d142      	bne.n	8001d72 <HAL_UART_MspInit+0x222>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 f812 	bl	8007d24 <HAL_RCCEx_PeriphCLKConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8001d06:	f7ff fa2b 	bl	8001160 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d10:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2e:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_UART_MspInit+0x230>)
 8001d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d60:	2307      	movs	r3, #7
 8001d62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4807      	ldr	r0, [pc, #28]	; (8001d8c <HAL_UART_MspInit+0x23c>)
 8001d6e:	f003 fc09 	bl	8005584 <HAL_GPIO_Init>
}
 8001d72:	bf00      	nop
 8001d74:	37f8      	adds	r7, #248	; 0xf8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004c00 	.word	0x40004c00
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58020000 	.word	0x58020000
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	58020400 	.word	0x58020400
 8001d90:	40004800 	.word	0x40004800

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d98:	f7ff fc7e 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	; (8001dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	; (8001de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f010 fc9d 	bl	8012700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7ff f881 	bl	8000ecc <main>
  bx  lr
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dd4:	2400025c 	.word	0x2400025c
  ldr r2, =_sidata
 8001dd8:	0801e3c4 	.word	0x0801e3c4
  ldr r2, =_sbss
 8001ddc:	2400025c 	.word	0x2400025c
  ldr r4, =_ebss
 8001de0:	240025b0 	.word	0x240025b0

08001de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC3_IRQHandler>
	...

08001de8 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af02      	add	r7, sp, #8
/*	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
	ST7735Ctx.Panel = HannStar_Panel;
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
	#elif TFT18
*/	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8001dee:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <LCD_Test+0x1f8>)
 8001df0:	2203      	movs	r2, #3
 8001df2:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = BOE_Panel;
 8001df4:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <LCD_Test+0x1f8>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_1_8a_inch_screen;
 8001dfa:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <LCD_Test+0x1f8>)
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	735a      	strb	r2, [r3, #13]
//	#else
//	error "Unknown Screen"
	
//	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8001e00:	4978      	ldr	r1, [pc, #480]	; (8001fe4 <LCD_Test+0x1fc>)
 8001e02:	4879      	ldr	r0, [pc, #484]	; (8001fe8 <LCD_Test+0x200>)
 8001e04:	f000 fcb4 	bl	8002770 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8001e08:	4b78      	ldr	r3, [pc, #480]	; (8001fec <LCD_Test+0x204>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a74      	ldr	r2, [pc, #464]	; (8001fe0 <LCD_Test+0x1f8>)
 8001e0e:	2105      	movs	r1, #5
 8001e10:	4875      	ldr	r0, [pc, #468]	; (8001fe8 <LCD_Test+0x200>)
 8001e12:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8001e14:	4b75      	ldr	r3, [pc, #468]	; (8001fec <LCD_Test+0x204>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4975      	ldr	r1, [pc, #468]	; (8001ff0 <LCD_Test+0x208>)
 8001e1a:	4873      	ldr	r0, [pc, #460]	; (8001fe8 <LCD_Test+0x200>)
 8001e1c:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f8f8 	bl	8002014 <LCD_SetBrightness>
/*	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
	#elif TFT18
*/	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
 8001e24:	4b71      	ldr	r3, [pc, #452]	; (8001fec <LCD_Test+0x204>)
 8001e26:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001e28:	4b72      	ldr	r3, [pc, #456]	; (8001ff4 <LCD_Test+0x20c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	486e      	ldr	r0, [pc, #440]	; (8001fe8 <LCD_Test+0x200>)
 8001e30:	47a0      	blx	r4
//	#endif
	
  uint32_t tick = get_tick();
 8001e32:	f002 f85b 	bl	8003eec <HAL_GetTick>
 8001e36:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001e38:	e06a      	b.n	8001f10 <LCD_Test+0x128>
	{
		delay_ms(10);
 8001e3a:	200a      	movs	r0, #10
 8001e3c:	f002 f862 	bl	8003f04 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8001e40:	f002 f854 	bl	8003eec <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e4e:	d80f      	bhi.n	8001e70 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8001e50:	f002 f84c 	bl	8003eec <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2264      	movs	r2, #100	; 0x64
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	4a65      	ldr	r2, [pc, #404]	; (8001ff8 <LCD_Test+0x210>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 f8d3 	bl	8002014 <LCD_SetBrightness>
 8001e6e:	e04f      	b.n	8001f10 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8001e70:	f002 f83c 	bl	8003eec <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d83d      	bhi.n	8001efe <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8001e82:	f002 f833 	bl	8003eec <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001e90:	4a5a      	ldr	r2, [pc, #360]	; (8001ffc <LCD_Test+0x214>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4959      	ldr	r1, [pc, #356]	; (8002000 <LCD_Test+0x218>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f010 fc5b 	bl	8012758 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8001ea2:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <LCD_Test+0x1f8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b1e      	subs	r3, #30
 8001eaa:	b298      	uxth	r0, r3
 8001eac:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <LCD_Test+0x1f8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2310      	movs	r3, #16
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	f000 fb09 	bl	80024d4 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8001ec2:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <LCD_Test+0x204>)
 8001ec4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <LCD_Test+0x1f8>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	1edd      	subs	r5, r3, #3
 8001ecc:	f002 f80e 	bl	8003eec <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001eda:	4a41      	ldr	r2, [pc, #260]	; (8001fe0 <LCD_Test+0x1f8>)
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	4a45      	ldr	r2, [pc, #276]	; (8001ff8 <LCD_Test+0x210>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	09db      	lsrs	r3, r3, #7
 8001eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eee:	9201      	str	r2, [sp, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	9200      	str	r2, [sp, #0]
 8001ef4:	462a      	mov	r2, r5
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	483b      	ldr	r0, [pc, #236]	; (8001fe8 <LCD_Test+0x200>)
 8001efa:	47a0      	blx	r4
 8001efc:	e008      	b.n	8001f10 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 8001efe:	f001 fff5 	bl	8003eec <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d807      	bhi.n	8001f20 <LCD_Test+0x138>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001f10:	2108      	movs	r1, #8
 8001f12:	483c      	ldr	r0, [pc, #240]	; (8002004 <LCD_Test+0x21c>)
 8001f14:	f003 fce6 	bl	80058e4 <HAL_GPIO_ReadPin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d18d      	bne.n	8001e3a <LCD_Test+0x52>
 8001f1e:	e004      	b.n	8001f2a <LCD_Test+0x142>
			break;
 8001f20:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001f22:	e002      	b.n	8001f2a <LCD_Test+0x142>
	{
		delay_ms(10);
 8001f24:	200a      	movs	r0, #10
 8001f26:	f001 ffed 	bl	8003f04 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	4835      	ldr	r0, [pc, #212]	; (8002004 <LCD_Test+0x21c>)
 8001f2e:	f003 fcd9 	bl	80058e4 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d0f5      	beq.n	8001f24 <LCD_Test+0x13c>
	}
	LCD_Light(0, 300);
 8001f38:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f885 	bl	800204c <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <LCD_Test+0x204>)
 8001f44:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <LCD_Test+0x1f8>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <LCD_Test+0x1f8>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	9101      	str	r1, [sp, #4]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4823      	ldr	r0, [pc, #140]	; (8001fe8 <LCD_Test+0x200>)
 8001f5c:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8001f5e:	463b      	mov	r3, r7
 8001f60:	4929      	ldr	r1, [pc, #164]	; (8002008 <LCD_Test+0x220>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f010 fbf8 	bl	8012758 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <LCD_Test+0x1f8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	463b      	mov	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	2310      	movs	r3, #16
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2310      	movs	r3, #16
 8001f78:	2104      	movs	r1, #4
 8001f7a:	2004      	movs	r0, #4
 8001f7c:	f000 faaa 	bl	80024d4 <LCD_ShowString>
	sprintf((char *)&text, "STM32H743 %X", HAL_GetDEVID());
 8001f80:	f001 fff0 	bl	8003f64 <HAL_GetDEVID>
 8001f84:	4602      	mov	r2, r0
 8001f86:	463b      	mov	r3, r7
 8001f88:	4920      	ldr	r1, [pc, #128]	; (800200c <LCD_Test+0x224>)
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f010 fbe4 	bl	8012758 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <LCD_Test+0x1f8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	463b      	mov	r3, r7
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	2116      	movs	r1, #22
 8001fa2:	2004      	movs	r0, #4
 8001fa4:	f000 fa96 	bl	80024d4 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <LCD_Test+0x208>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	463b      	mov	r3, r7
 8001fae:	4918      	ldr	r1, [pc, #96]	; (8002010 <LCD_Test+0x228>)
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f010 fbd1 	bl	8012758 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <LCD_Test+0x1f8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	2128      	movs	r1, #40	; 0x28
 8001fc8:	2004      	movs	r0, #4
 8001fca:	f000 fa83 	bl	80024d4 <LCD_ShowString>

	LCD_Light(100, 200);
 8001fce:	21c8      	movs	r1, #200	; 0xc8
 8001fd0:	2064      	movs	r0, #100	; 0x64
 8001fd2:	f000 f83b 	bl	800204c <LCD_Light>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	24001cb4 	.word	0x24001cb4
 8001fe4:	24000008 	.word	0x24000008
 8001fe8:	24001c7c 	.word	0x24001c7c
 8001fec:	2400002c 	.word	0x2400002c
 8001ff0:	24001c78 	.word	0x24001c78
 8001ff4:	08013af0 	.word	0x08013af0
 8001ff8:	10624dd3 	.word	0x10624dd3
 8001ffc:	cccccccd 	.word	0xcccccccd
 8002000:	08013004 	.word	0x08013004
 8002004:	58021000 	.word	0x58021000
 8002008:	0801300c 	.word	0x0801300c
 800200c:	0801301c 	.word	0x0801301c
 8002010:	0801302c 	.word	0x0801302c

08002014 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <LCD_SetBrightness+0x1c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	24001a7c 	.word	0x24001a7c

08002034 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <LCD_GetBrightness+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	24001a7c 	.word	0x24001a7c

0800204c <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8002056:	f7ff ffed 	bl	8002034 <LCD_GetBrightness>
 800205a:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8002060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d05e      	beq.n	8002126 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	429a      	cmp	r2, r3
 800206e:	d05c      	beq.n	800212a <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207a:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002088:	ed97 7a07 	vldr	s14, [r7, #28]
 800208c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002090:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209e:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80020b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b4:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 80020b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80020bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c4:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 80020c8:	f001 ff10 	bl	8003eec <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f001 ff18 	bl	8003f04 <HAL_Delay>
		
		time_now = get_tick()-tick;
 80020d4:	f001 ff0a 	bl	8003eec <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ea:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 80020ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80020f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002108:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 800210c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002114:	ee17 0a90 	vmov	r0, s15
 8002118:	f7ff ff7c 	bl	8002014 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 800211c:	6a3a      	ldr	r2, [r7, #32]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d204      	bcs.n	800212e <LCD_Light+0xe2>
		delay_ms(1);
 8002124:	e7d3      	b.n	80020ce <LCD_Light+0x82>
		return;
 8002126:	bf00      	nop
 8002128:	e002      	b.n	8002130 <LCD_Light+0xe4>
		return;
 800212a:	bf00      	nop
 800212c:	e000      	b.n	8002130 <LCD_Light+0xe4>
		if(time_now >= time) break;
 800212e:	bf00      	nop
		
	}
}
 8002130:	3728      	adds	r7, #40	; 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8002138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800213c:	b08c      	sub	sp, #48	; 0x30
 800213e:	af02      	add	r7, sp, #8
 8002140:	4604      	mov	r4, r0
 8002142:	4608      	mov	r0, r1
 8002144:	4611      	mov	r1, r2
 8002146:	461a      	mov	r2, r3
 8002148:	4623      	mov	r3, r4
 800214a:	80fb      	strh	r3, [r7, #6]
 800214c:	4603      	mov	r3, r0
 800214e:	80bb      	strh	r3, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
 8002154:	4613      	mov	r3, r2
 8002156:	70bb      	strb	r3, [r7, #2]
 8002158:	466b      	mov	r3, sp
 800215a:	4698      	mov	r8, r3
  uint8_t temp,t1,t;
	uint16_t y0=y;
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	843b      	strh	r3, [r7, #32]
	uint16_t x0=x;
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	83fb      	strh	r3, [r7, #30]
	uint16_t colortemp=POINT_COLOR; 
 8002164:	4bb2      	ldr	r3, [pc, #712]	; (8002430 <LCD_ShowChar+0x2f8>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	83bb      	strh	r3, [r7, #28]
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 800216a:	78bb      	ldrb	r3, [r7, #2]
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d101      	bne.n	8002174 <LCD_ShowChar+0x3c>
 8002170:	2406      	movs	r4, #6
 8002172:	e000      	b.n	8002176 <LCD_ShowChar+0x3e>
 8002174:	2408      	movs	r4, #8
 8002176:	78bd      	ldrb	r5, [r7, #2]
 8002178:	1e63      	subs	r3, r4, #1
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	4623      	mov	r3, r4
 800217e:	4618      	mov	r0, r3
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	010b      	lsls	r3, r1, #4
 800218e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002192:	0102      	lsls	r2, r0, #4
 8002194:	4623      	mov	r3, r4
 8002196:	005e      	lsls	r6, r3, #1
 8002198:	462b      	mov	r3, r5
 800219a:	3b01      	subs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	4623      	mov	r3, r4
 80021a0:	4618      	mov	r0, r3
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	b2ea      	uxtb	r2, r5
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	fb02 fe01 	mul.w	lr, r2, r1
 80021b0:	fb00 fc03 	mul.w	ip, r0, r3
 80021b4:	44f4      	add	ip, lr
 80021b6:	fba0 2302 	umull	r2, r3, r0, r2
 80021ba:	eb0c 0103 	add.w	r1, ip, r3
 80021be:	460b      	mov	r3, r1
 80021c0:	f04f 0000 	mov.w	r0, #0
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	0119      	lsls	r1, r3, #4
 80021ca:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80021ce:	0110      	lsls	r0, r2, #4
 80021d0:	4623      	mov	r3, r4
 80021d2:	4618      	mov	r0, r3
 80021d4:	f04f 0100 	mov.w	r1, #0
 80021d8:	b2ea      	uxtb	r2, r5
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	fb02 fe01 	mul.w	lr, r2, r1
 80021e2:	fb00 fc03 	mul.w	ip, r0, r3
 80021e6:	44f4      	add	ip, lr
 80021e8:	fba0 2302 	umull	r2, r3, r0, r2
 80021ec:	eb0c 0103 	add.w	r1, ip, r3
 80021f0:	460b      	mov	r3, r1
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	0119      	lsls	r1, r3, #4
 80021fc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002200:	0110      	lsls	r0, r2, #4
 8002202:	4623      	mov	r3, r4
 8002204:	462a      	mov	r2, r5
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	3307      	adds	r3, #7
 800220e:	08db      	lsrs	r3, r3, #3
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	ebad 0d03 	sub.w	sp, sp, r3
 8002216:	ab02      	add	r3, sp, #8
 8002218:	3301      	adds	r3, #1
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	613b      	str	r3, [r7, #16]
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	4619      	mov	r1, r3
 8002226:	4883      	ldr	r0, [pc, #524]	; (8002434 <LCD_ShowChar+0x2fc>)
 8002228:	f001 fbfe 	bl	8003a28 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4619      	mov	r1, r3
 8002232:	4880      	ldr	r0, [pc, #512]	; (8002434 <LCD_ShowChar+0x2fc>)
 8002234:	f001 fc0a 	bl	8003a4c <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	3b20      	subs	r3, #32
 800223c:	70fb      	strb	r3, [r7, #3]
	count = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if(!mode) //�ǵ��ӷ�ʽ
 8002242:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8096 	bne.w	8002378 <LCD_ShowChar+0x240>
	{
		for(t=0;t<size;t++)
 800224c:	2300      	movs	r3, #0
 800224e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002252:	e08a      	b.n	800236a <LCD_ShowChar+0x232>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8002254:	78bb      	ldrb	r3, [r7, #2]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d10d      	bne.n	8002276 <LCD_ShowChar+0x13e>
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002260:	4875      	ldr	r0, [pc, #468]	; (8002438 <LCD_ShowChar+0x300>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4403      	add	r3, r0
 800226c:	440b      	add	r3, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002274:	e009      	b.n	800228a <LCD_ShowChar+0x152>
			else temp=asc2_1608[num][t];		 //����1608����
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800227c:	496f      	ldr	r1, [pc, #444]	; (800243c <LCD_ShowChar+0x304>)
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	440a      	add	r2, r1
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			
			for(t1=0;t1<8;t1++)
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002290:	e060      	b.n	8002354 <LCD_ShowChar+0x21c>
			{			    
				if(temp&0x80)
 8002292:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002296:	2b00      	cmp	r3, #0
 8002298:	da0c      	bge.n	80022b4 <LCD_ShowChar+0x17c>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 800229a:	8bbb      	ldrh	r3, [r7, #28]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21a      	sxth	r2, r3
 80022a0:	8bbb      	ldrh	r3, [r7, #28]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	4b60      	ldr	r3, [pc, #384]	; (8002430 <LCD_ShowChar+0x2f8>)
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	e00d      	b.n	80022d0 <LCD_ShowChar+0x198>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80022b4:	4b62      	ldr	r3, [pc, #392]	; (8002440 <LCD_ShowChar+0x308>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	b21a      	sxth	r2, r3
 80022bc:	4b60      	ldr	r3, [pc, #384]	; (8002440 <LCD_ShowChar+0x308>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	4b58      	ldr	r3, [pc, #352]	; (8002430 <LCD_ShowChar+0x2f8>)
 80022ce:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80022d0:	0872      	lsrs	r2, r6, #1
 80022d2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80022d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461c      	mov	r4, r3
 80022de:	4b54      	ldr	r3, [pc, #336]	; (8002430 <LCD_ShowChar+0x2f8>)
 80022e0:	8818      	ldrh	r0, [r3, #0]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	fb01 f202 	mul.w	r2, r1, r2
 80022e8:	4422      	add	r2, r4
 80022ea:	4601      	mov	r1, r0
 80022ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80022f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022f2:	3301      	adds	r3, #1
 80022f4:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 80022f6:	78bb      	ldrb	r3, [r7, #2]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d301      	bcc.n	8002304 <LCD_ShowChar+0x1cc>
 8002300:	2300      	movs	r3, #0
 8002302:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 8002304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 800230e:	88bb      	ldrh	r3, [r7, #4]
 8002310:	3301      	adds	r3, #1
 8002312:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8002314:	88ba      	ldrh	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d303      	bcc.n	8002324 <LCD_ShowChar+0x1ec>
 800231c:	4a44      	ldr	r2, [pc, #272]	; (8002430 <LCD_ShowChar+0x2f8>)
 800231e:	8bbb      	ldrh	r3, [r7, #28]
 8002320:	8013      	strh	r3, [r2, #0]
 8002322:	e0ce      	b.n	80024c2 <LCD_ShowChar+0x38a>
				if((y-y0)==size)
 8002324:	88ba      	ldrh	r2, [r7, #4]
 8002326:	8c3b      	ldrh	r3, [r7, #32]
 8002328:	1ad2      	subs	r2, r2, r3
 800232a:	78bb      	ldrb	r3, [r7, #2]
 800232c:	429a      	cmp	r2, r3
 800232e:	d10c      	bne.n	800234a <LCD_ShowChar+0x212>
				{
					y=y0;
 8002330:	8c3b      	ldrh	r3, [r7, #32]
 8002332:	80bb      	strh	r3, [r7, #4]
					x++;
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	3301      	adds	r3, #1
 8002338:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	429a      	cmp	r2, r3
 8002340:	d30d      	bcc.n	800235e <LCD_ShowChar+0x226>
 8002342:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <LCD_ShowChar+0x2f8>)
 8002344:	8bbb      	ldrh	r3, [r7, #28]
 8002346:	8013      	strh	r3, [r2, #0]
 8002348:	e0bb      	b.n	80024c2 <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 800234a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800234e:	3301      	adds	r3, #1
 8002350:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002358:	2b07      	cmp	r3, #7
 800235a:	d99a      	bls.n	8002292 <LCD_ShowChar+0x15a>
 800235c:	e000      	b.n	8002360 <LCD_ShowChar+0x228>
					break;
 800235e:	bf00      	nop
		for(t=0;t<size;t++)
 8002360:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002364:	3301      	adds	r3, #1
 8002366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800236a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800236e:	78bb      	ldrb	r3, [r7, #2]
 8002370:	429a      	cmp	r2, r3
 8002372:	f4ff af6f 	bcc.w	8002254 <LCD_ShowChar+0x11c>
 8002376:	e08e      	b.n	8002496 <LCD_ShowChar+0x35e>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800237e:	e084      	b.n	800248a <LCD_ShowChar+0x352>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8002380:	78bb      	ldrb	r3, [r7, #2]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d10d      	bne.n	80023a2 <LCD_ShowChar+0x26a>
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800238c:	482a      	ldr	r0, [pc, #168]	; (8002438 <LCD_ShowChar+0x300>)
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4403      	add	r3, r0
 8002398:	440b      	add	r3, r1
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80023a0:	e009      	b.n	80023b6 <LCD_ShowChar+0x27e>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80023a8:	4924      	ldr	r1, [pc, #144]	; (800243c <LCD_ShowChar+0x304>)
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	440a      	add	r2, r1
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(t1=0;t1<8;t1++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80023bc:	e05a      	b.n	8002474 <LCD_ShowChar+0x33c>
			{			    
				if(temp&0x80)
 80023be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da19      	bge.n	80023fa <LCD_ShowChar+0x2c2>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <LCD_ShowChar+0x2f8>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <LCD_ShowChar+0x2f8>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b218      	sxth	r0, r3
 80023dc:	0872      	lsrs	r2, r6, #1
 80023de:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80023e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461c      	mov	r4, r3
 80023ea:	b280      	uxth	r0, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	fb01 f202 	mul.w	r2, r1, r2
 80023f2:	4422      	add	r2, r4
 80023f4:	4601      	mov	r1, r0
 80023f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80023fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023fc:	3301      	adds	r3, #1
 80023fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 8002400:	78bb      	ldrb	r3, [r7, #2]
 8002402:	b29b      	uxth	r3, r3
 8002404:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002406:	429a      	cmp	r2, r3
 8002408:	d301      	bcc.n	800240e <LCD_ShowChar+0x2d6>
 800240a:	2300      	movs	r3, #0
 800240c:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 800240e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 8002418:	88bb      	ldrh	r3, [r7, #4]
 800241a:	3301      	adds	r3, #1
 800241c:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800241e:	88ba      	ldrh	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	429a      	cmp	r2, r3
 8002424:	d30e      	bcc.n	8002444 <LCD_ShowChar+0x30c>
 8002426:	4a02      	ldr	r2, [pc, #8]	; (8002430 <LCD_ShowChar+0x2f8>)
 8002428:	8bbb      	ldrh	r3, [r7, #28]
 800242a:	8013      	strh	r3, [r2, #0]
 800242c:	e049      	b.n	80024c2 <LCD_ShowChar+0x38a>
 800242e:	bf00      	nop
 8002430:	24000028 	.word	0x24000028
 8002434:	24001c7c 	.word	0x24001c7c
 8002438:	0801308c 	.word	0x0801308c
 800243c:	08013500 	.word	0x08013500
 8002440:	24000280 	.word	0x24000280
				if((y-y0)==size)
 8002444:	88ba      	ldrh	r2, [r7, #4]
 8002446:	8c3b      	ldrh	r3, [r7, #32]
 8002448:	1ad2      	subs	r2, r2, r3
 800244a:	78bb      	ldrb	r3, [r7, #2]
 800244c:	429a      	cmp	r2, r3
 800244e:	d10c      	bne.n	800246a <LCD_ShowChar+0x332>
				{
					y=y0;
 8002450:	8c3b      	ldrh	r3, [r7, #32]
 8002452:	80bb      	strh	r3, [r7, #4]
					x++;
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	3301      	adds	r3, #1
 8002458:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d30d      	bcc.n	800247e <LCD_ShowChar+0x346>
 8002462:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <LCD_ShowChar+0x394>)
 8002464:	8bbb      	ldrh	r3, [r7, #28]
 8002466:	8013      	strh	r3, [r2, #0]
 8002468:	e02b      	b.n	80024c2 <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 800246a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800246e:	3301      	adds	r3, #1
 8002470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002478:	2b07      	cmp	r3, #7
 800247a:	d9a0      	bls.n	80023be <LCD_ShowChar+0x286>
 800247c:	e000      	b.n	8002480 <LCD_ShowChar+0x348>
					break;
 800247e:	bf00      	nop
		for(t=0;t<size;t++)
 8002480:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002484:	3301      	adds	r3, #1
 8002486:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800248a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800248e:	78bb      	ldrb	r3, [r7, #2]
 8002490:	429a      	cmp	r2, r3
 8002492:	f4ff af75 	bcc.w	8002380 <LCD_ShowChar+0x248>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8002496:	8bf9      	ldrh	r1, [r7, #30]
 8002498:	8c38      	ldrh	r0, [r7, #32]
 800249a:	693c      	ldr	r4, [r7, #16]
 800249c:	78bb      	ldrb	r3, [r7, #2]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d101      	bne.n	80024a6 <LCD_ShowChar+0x36e>
 80024a2:	2306      	movs	r3, #6
 80024a4:	e000      	b.n	80024a8 <LCD_ShowChar+0x370>
 80024a6:	2308      	movs	r3, #8
 80024a8:	78ba      	ldrb	r2, [r7, #2]
 80024aa:	9201      	str	r2, [sp, #4]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4623      	mov	r3, r4
 80024b0:	4602      	mov	r2, r0
 80024b2:	4807      	ldr	r0, [pc, #28]	; (80024d0 <LCD_ShowChar+0x398>)
 80024b4:	f001 f90a 	bl	80036cc <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <LCD_ShowChar+0x394>)
 80024ba:	8bbb      	ldrh	r3, [r7, #28]
 80024bc:	8013      	strh	r3, [r2, #0]
 80024be:	46c5      	mov	sp, r8
 80024c0:	e000      	b.n	80024c4 <LCD_ShowChar+0x38c>
 80024c2:	46c5      	mov	sp, r8
}   
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024cc:	24000028 	.word	0x24000028
 80024d0:	24001c7c 	.word	0x24001c7c

080024d4 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af02      	add	r7, sp, #8
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	80fb      	strh	r3, [r7, #6]
 80024e6:	4603      	mov	r3, r0
 80024e8:	80bb      	strh	r3, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	807b      	strh	r3, [r7, #2]
 80024ee:	4613      	mov	r3, r2
 80024f0:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	4413      	add	r3, r2
 80024fc:	807b      	strh	r3, [r7, #2]
	height+=y;
 80024fe:	883a      	ldrh	r2, [r7, #0]
 8002500:	88bb      	ldrh	r3, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8002506:	e024      	b.n	8002552 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8002508:	88fa      	ldrh	r2, [r7, #6]
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	429a      	cmp	r2, r3
 800250e:	d307      	bcc.n	8002520 <LCD_ShowString+0x4c>
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	80fb      	strh	r3, [r7, #6]
 8002514:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002518:	b29a      	uxth	r2, r3
 800251a:	88bb      	ldrh	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8002520:	88ba      	ldrh	r2, [r7, #4]
 8002522:	883b      	ldrh	r3, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d21d      	bcs.n	8002564 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002530:	88b9      	ldrh	r1, [r7, #4]
 8002532:	88f8      	ldrh	r0, [r7, #6]
 8002534:	2400      	movs	r4, #0
 8002536:	9400      	str	r4, [sp, #0]
 8002538:	f7ff fdfe 	bl	8002138 <LCD_ShowChar>
        x+=size/2;
 800253c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	b29a      	uxth	r2, r3
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	4413      	add	r3, r2
 800254a:	80fb      	strh	r3, [r7, #6]
        p++;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	3301      	adds	r3, #1
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b7e      	cmp	r3, #126	; 0x7e
 8002558:	d805      	bhi.n	8002566 <LCD_ShowString+0x92>
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b1f      	cmp	r3, #31
 8002560:	d8d2      	bhi.n	8002508 <LCD_ShowString+0x34>
    }  
}
 8002562:	e000      	b.n	8002566 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8002564:	bf00      	nop
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
	...

08002570 <lcd_init>:

static int32_t lcd_init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 800257a:	2104      	movs	r1, #4
 800257c:	4803      	ldr	r0, [pc, #12]	; (800258c <lcd_init+0x1c>)
 800257e:	f009 fdf7 	bl	800c170 <HAL_TIMEx_PWMN_Start>
	return result;
 8002582:	687b      	ldr	r3, [r7, #4]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	24001a7c 	.word	0x24001a7c

08002590 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002594:	f001 fcaa 	bl	8003eec <HAL_GetTick>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 80025ae:	2200      	movs	r2, #0
 80025b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b4:	481d      	ldr	r0, [pc, #116]	; (800262c <lcd_writereg+0x8c>)
 80025b6:	f003 f9ad 	bl	8005914 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80025ba:	2200      	movs	r2, #0
 80025bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025c0:	481a      	ldr	r0, [pc, #104]	; (800262c <lcd_writereg+0x8c>)
 80025c2:	f003 f9a7 	bl	8005914 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80025c6:	f107 010f 	add.w	r1, r7, #15
 80025ca:	2364      	movs	r3, #100	; 0x64
 80025cc:	2201      	movs	r2, #1
 80025ce:	4818      	ldr	r0, [pc, #96]	; (8002630 <lcd_writereg+0x90>)
 80025d0:	f008 f946 	bl	800a860 <HAL_SPI_Transmit>
 80025d4:	4603      	mov	r3, r0
 80025d6:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 80025d8:	2201      	movs	r2, #1
 80025da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025de:	4813      	ldr	r0, [pc, #76]	; (800262c <lcd_writereg+0x8c>)
 80025e0:	f003 f998 	bl	8005914 <HAL_GPIO_WritePin>
	if(length > 0)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	480e      	ldr	r0, [pc, #56]	; (8002630 <lcd_writereg+0x90>)
 80025f6:	f008 f933 	bl	800a860 <HAL_SPI_Transmit>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4413      	add	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8002604:	2201      	movs	r2, #1
 8002606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800260a:	4808      	ldr	r0, [pc, #32]	; (800262c <lcd_writereg+0x8c>)
 800260c:	f003 f982 	bl	8005914 <HAL_GPIO_WritePin>
	if(result>0){
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	dd03      	ble.n	800261e <lcd_writereg+0x7e>
		result = -1;}
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e001      	b.n	8002622 <lcd_writereg+0x82>
	else{
		result = 0;}
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
	return result;
 8002622:	697b      	ldr	r3, [r7, #20]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	58021000 	.word	0x58021000
 8002630:	2400196c 	.word	0x2400196c

08002634 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002646:	481b      	ldr	r0, [pc, #108]	; (80026b4 <lcd_readreg+0x80>)
 8002648:	f003 f964 	bl	8005914 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800264c:	2200      	movs	r2, #0
 800264e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002652:	4818      	ldr	r0, [pc, #96]	; (80026b4 <lcd_readreg+0x80>)
 8002654:	f003 f95e 	bl	8005914 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8002658:	1df9      	adds	r1, r7, #7
 800265a:	2364      	movs	r3, #100	; 0x64
 800265c:	2201      	movs	r2, #1
 800265e:	4816      	ldr	r0, [pc, #88]	; (80026b8 <lcd_readreg+0x84>)
 8002660:	f008 f8fe 	bl	800a860 <HAL_SPI_Transmit>
 8002664:	4603      	mov	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8002668:	2201      	movs	r2, #1
 800266a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800266e:	4811      	ldr	r0, [pc, #68]	; (80026b4 <lcd_readreg+0x80>)
 8002670:	f003 f950 	bl	8005914 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8002674:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002678:	2201      	movs	r2, #1
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	480e      	ldr	r0, [pc, #56]	; (80026b8 <lcd_readreg+0x84>)
 800267e:	f008 fae1 	bl	800ac44 <HAL_SPI_Receive>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002692:	4808      	ldr	r0, [pc, #32]	; (80026b4 <lcd_readreg+0x80>)
 8002694:	f003 f93e 	bl	8005914 <HAL_GPIO_WritePin>
	if(result>0){
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	dd03      	ble.n	80026a6 <lcd_readreg+0x72>
		result = -1;}
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e001      	b.n	80026aa <lcd_readreg+0x76>
	else{
		result = 0;}
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
	return result;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58021000 	.word	0x58021000
 80026b8:	2400196c 	.word	0x2400196c

080026bc <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80026c6:	2200      	movs	r2, #0
 80026c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026cc:	480f      	ldr	r0, [pc, #60]	; (800270c <lcd_senddata+0x50>)
 80026ce:	f003 f921 	bl	8005914 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	2364      	movs	r3, #100	; 0x64
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <lcd_senddata+0x54>)
 80026dc:	f008 f8c0 	bl	800a860 <HAL_SPI_Transmit>
 80026e0:	4603      	mov	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80026e4:	2201      	movs	r2, #1
 80026e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ea:	4808      	ldr	r0, [pc, #32]	; (800270c <lcd_senddata+0x50>)
 80026ec:	f003 f912 	bl	8005914 <HAL_GPIO_WritePin>
	if(result>0){
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	dd03      	ble.n	80026fe <lcd_senddata+0x42>
		result = -1;}
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e001      	b.n	8002702 <lcd_senddata+0x46>
	else{
		result = 0;}
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
	return result;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	58021000 	.word	0x58021000
 8002710:	2400196c 	.word	0x2400196c

08002714 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002724:	4810      	ldr	r0, [pc, #64]	; (8002768 <lcd_recvdata+0x54>)
 8002726:	f003 f8f5 	bl	8005914 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b29a      	uxth	r2, r3
 800272e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <lcd_recvdata+0x58>)
 8002736:	f008 fa85 	bl	800ac44 <HAL_SPI_Receive>
 800273a:	4603      	mov	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800273e:	2201      	movs	r2, #1
 8002740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002744:	4808      	ldr	r0, [pc, #32]	; (8002768 <lcd_recvdata+0x54>)
 8002746:	f003 f8e5 	bl	8005914 <HAL_GPIO_WritePin>
	if(result>0){
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	dd03      	ble.n	8002758 <lcd_recvdata+0x44>
		result = -1;}
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e001      	b.n	800275c <lcd_recvdata+0x48>
	else{
		result = 0;}
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
	return result;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	58021000 	.word	0x58021000
 800276c:	2400196c 	.word	0x2400196c

08002770 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	e03a      	b.n	80027fe <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	891a      	ldrh	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	69da      	ldr	r2, [r3, #28]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <ST7735_RegisterBusIO+0x98>)
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a0e      	ldr	r2, [pc, #56]	; (800280c <ST7735_RegisterBusIO+0x9c>)
 80027d2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <ST7735_RegisterBusIO+0xa0>)
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <ST7735_RegisterBusIO+0xa4>)
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4798      	blx	r3
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	e002      	b.n	80027fe <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	08003c79 	.word	0x08003c79
 800280c:	08003ca1 	.word	0x08003ca1
 8002810:	08003ccb 	.word	0x08003ccb
 8002814:	08003cef 	.word	0x08003cef

08002818 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e3a6      	b.n	8002f80 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f103 0020 	add.w	r0, r3, #32
 800283c:	f107 0213 	add.w	r2, r7, #19
 8002840:	2300      	movs	r3, #0
 8002842:	2101      	movs	r1, #1
 8002844:	f001 fa92 	bl	8003d6c <st7735_write_reg>
 8002848:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800284a:	2178      	movs	r1, #120	; 0x78
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f001 fa60 	bl	8003d12 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f103 0020 	add.w	r0, r3, #32
 800285c:	f107 0213 	add.w	r2, r7, #19
 8002860:	2300      	movs	r3, #0
 8002862:	2101      	movs	r1, #1
 8002864:	f001 fa82 	bl	8003d6c <st7735_write_reg>
 8002868:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800286a:	2178      	movs	r1, #120	; 0x78
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f001 fa50 	bl	8003d12 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f103 0020 	add.w	r0, r3, #32
 800287c:	f107 0213 	add.w	r2, r7, #19
 8002880:	2301      	movs	r3, #1
 8002882:	2111      	movs	r1, #17
 8002884:	f001 fa72 	bl	8003d6c <st7735_write_reg>
 8002888:	4602      	mov	r2, r0
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	4413      	add	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f103 0020 	add.w	r0, r3, #32
 8002896:	f107 0213 	add.w	r2, r7, #19
 800289a:	2300      	movs	r3, #0
 800289c:	21b1      	movs	r1, #177	; 0xb1
 800289e:	f001 fa65 	bl	8003d6c <st7735_write_reg>
 80028a2:	4602      	mov	r2, r0
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	4413      	add	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80028aa:	2301      	movs	r3, #1
 80028ac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3320      	adds	r3, #32
 80028b2:	f107 0113 	add.w	r1, r7, #19
 80028b6:	2201      	movs	r2, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fa6c 	bl	8003d96 <st7735_send_data>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80028c6:	232c      	movs	r3, #44	; 0x2c
 80028c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3320      	adds	r3, #32
 80028ce:	f107 0113 	add.w	r1, r7, #19
 80028d2:	2201      	movs	r2, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 fa5e 	bl	8003d96 <st7735_send_data>
 80028da:	4602      	mov	r2, r0
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80028e2:	232d      	movs	r3, #45	; 0x2d
 80028e4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3320      	adds	r3, #32
 80028ea:	f107 0113 	add.w	r1, r7, #19
 80028ee:	2201      	movs	r2, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 fa50 	bl	8003d96 <st7735_send_data>
 80028f6:	4602      	mov	r2, r0
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	4413      	add	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 80028fe:	2301      	movs	r3, #1
 8002900:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f103 0020 	add.w	r0, r3, #32
 8002908:	f107 0213 	add.w	r2, r7, #19
 800290c:	2301      	movs	r3, #1
 800290e:	21b2      	movs	r1, #178	; 0xb2
 8002910:	f001 fa2c 	bl	8003d6c <st7735_write_reg>
 8002914:	4602      	mov	r2, r0
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800291c:	232c      	movs	r3, #44	; 0x2c
 800291e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3320      	adds	r3, #32
 8002924:	f107 0113 	add.w	r1, r7, #19
 8002928:	2201      	movs	r2, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fa33 	bl	8003d96 <st7735_send_data>
 8002930:	4602      	mov	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	4413      	add	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002938:	232d      	movs	r3, #45	; 0x2d
 800293a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3320      	adds	r3, #32
 8002940:	f107 0113 	add.w	r1, r7, #19
 8002944:	2201      	movs	r2, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f001 fa25 	bl	8003d96 <st7735_send_data>
 800294c:	4602      	mov	r2, r0
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8002954:	2301      	movs	r3, #1
 8002956:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f103 0020 	add.w	r0, r3, #32
 800295e:	f107 0213 	add.w	r2, r7, #19
 8002962:	2301      	movs	r3, #1
 8002964:	21b3      	movs	r1, #179	; 0xb3
 8002966:	f001 fa01 	bl	8003d6c <st7735_write_reg>
 800296a:	4602      	mov	r2, r0
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4413      	add	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002972:	232c      	movs	r3, #44	; 0x2c
 8002974:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3320      	adds	r3, #32
 800297a:	f107 0113 	add.w	r1, r7, #19
 800297e:	2201      	movs	r2, #1
 8002980:	4618      	mov	r0, r3
 8002982:	f001 fa08 	bl	8003d96 <st7735_send_data>
 8002986:	4602      	mov	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800298e:	232d      	movs	r3, #45	; 0x2d
 8002990:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3320      	adds	r3, #32
 8002996:	f107 0113 	add.w	r1, r7, #19
 800299a:	2201      	movs	r2, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f001 f9fa 	bl	8003d96 <st7735_send_data>
 80029a2:	4602      	mov	r2, r0
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	4413      	add	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 80029aa:	2301      	movs	r3, #1
 80029ac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3320      	adds	r3, #32
 80029b2:	f107 0113 	add.w	r1, r7, #19
 80029b6:	2201      	movs	r2, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f9ec 	bl	8003d96 <st7735_send_data>
 80029be:	4602      	mov	r2, r0
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	4413      	add	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80029c6:	232c      	movs	r3, #44	; 0x2c
 80029c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3320      	adds	r3, #32
 80029ce:	f107 0113 	add.w	r1, r7, #19
 80029d2:	2201      	movs	r2, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f9de 	bl	8003d96 <st7735_send_data>
 80029da:	4602      	mov	r2, r0
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4413      	add	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80029e2:	232d      	movs	r3, #45	; 0x2d
 80029e4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3320      	adds	r3, #32
 80029ea:	f107 0113 	add.w	r1, r7, #19
 80029ee:	2201      	movs	r2, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 f9d0 	bl	8003d96 <st7735_send_data>
 80029f6:	4602      	mov	r2, r0
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	4413      	add	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 80029fe:	2307      	movs	r3, #7
 8002a00:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f103 0020 	add.w	r0, r3, #32
 8002a08:	f107 0213 	add.w	r2, r7, #19
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	21b4      	movs	r1, #180	; 0xb4
 8002a10:	f001 f9ac 	bl	8003d6c <st7735_write_reg>
 8002a14:	4602      	mov	r2, r0
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4413      	add	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8002a1c:	23a2      	movs	r3, #162	; 0xa2
 8002a1e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f103 0020 	add.w	r0, r3, #32
 8002a26:	f107 0213 	add.w	r2, r7, #19
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	21c0      	movs	r1, #192	; 0xc0
 8002a2e:	f001 f99d 	bl	8003d6c <st7735_write_reg>
 8002a32:	4602      	mov	r2, r0
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	4413      	add	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3320      	adds	r3, #32
 8002a42:	f107 0113 	add.w	r1, r7, #19
 8002a46:	2201      	movs	r2, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f001 f9a4 	bl	8003d96 <st7735_send_data>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	4413      	add	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8002a56:	2384      	movs	r3, #132	; 0x84
 8002a58:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3320      	adds	r3, #32
 8002a5e:	f107 0113 	add.w	r1, r7, #19
 8002a62:	2201      	movs	r2, #1
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f996 	bl	8003d96 <st7735_send_data>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4413      	add	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8002a72:	23c5      	movs	r3, #197	; 0xc5
 8002a74:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f103 0020 	add.w	r0, r3, #32
 8002a7c:	f107 0213 	add.w	r2, r7, #19
 8002a80:	2301      	movs	r3, #1
 8002a82:	21c1      	movs	r1, #193	; 0xc1
 8002a84:	f001 f972 	bl	8003d6c <st7735_write_reg>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8002a90:	230a      	movs	r3, #10
 8002a92:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f103 0020 	add.w	r0, r3, #32
 8002a9a:	f107 0213 	add.w	r2, r7, #19
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	21c2      	movs	r1, #194	; 0xc2
 8002aa2:	f001 f963 	bl	8003d6c <st7735_write_reg>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	4413      	add	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3320      	adds	r3, #32
 8002ab6:	f107 0113 	add.w	r1, r7, #19
 8002aba:	2201      	movs	r2, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 f96a 	bl	8003d96 <st7735_send_data>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8002aca:	238a      	movs	r3, #138	; 0x8a
 8002acc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f103 0020 	add.w	r0, r3, #32
 8002ad4:	f107 0213 	add.w	r2, r7, #19
 8002ad8:	2301      	movs	r3, #1
 8002ada:	21c3      	movs	r1, #195	; 0xc3
 8002adc:	f001 f946 	bl	8003d6c <st7735_write_reg>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8002ae8:	232a      	movs	r3, #42	; 0x2a
 8002aea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3320      	adds	r3, #32
 8002af0:	f107 0113 	add.w	r1, r7, #19
 8002af4:	2201      	movs	r2, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 f94d 	bl	8003d96 <st7735_send_data>
 8002afc:	4602      	mov	r2, r0
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	4413      	add	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8002b04:	238a      	movs	r3, #138	; 0x8a
 8002b06:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f103 0020 	add.w	r0, r3, #32
 8002b0e:	f107 0213 	add.w	r2, r7, #19
 8002b12:	2301      	movs	r3, #1
 8002b14:	21c4      	movs	r1, #196	; 0xc4
 8002b16:	f001 f929 	bl	8003d6c <st7735_write_reg>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4413      	add	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8002b22:	23ee      	movs	r3, #238	; 0xee
 8002b24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3320      	adds	r3, #32
 8002b2a:	f107 0113 	add.w	r1, r7, #19
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 f930 	bl	8003d96 <st7735_send_data>
 8002b36:	4602      	mov	r2, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8002b3e:	230e      	movs	r3, #14
 8002b40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f103 0020 	add.w	r0, r3, #32
 8002b48:	f107 0213 	add.w	r2, r7, #19
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	21c5      	movs	r1, #197	; 0xc5
 8002b50:	f001 f90c 	bl	8003d6c <st7735_write_reg>
 8002b54:	4602      	mov	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	4413      	add	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7b1b      	ldrb	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10d      	bne.n	8002b80 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f103 0020 	add.w	r0, r3, #32
 8002b6a:	f107 0213 	add.w	r2, r7, #19
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2121      	movs	r1, #33	; 0x21
 8002b72:	f001 f8fb 	bl	8003d6c <st7735_write_reg>
 8002b76:	4602      	mov	r2, r0
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e00c      	b.n	8002b9a <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f103 0020 	add.w	r0, r3, #32
 8002b86:	f107 0213 	add.w	r2, r7, #19
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2120      	movs	r1, #32
 8002b8e:	f001 f8ed 	bl	8003d6c <st7735_write_reg>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	4413      	add	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f103 0020 	add.w	r0, r3, #32
 8002ba0:	f107 0208 	add.w	r2, r7, #8
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	213a      	movs	r1, #58	; 0x3a
 8002ba8:	f001 f8e0 	bl	8003d6c <st7735_write_reg>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f103 0020 	add.w	r0, r3, #32
 8002bbe:	f107 0213 	add.w	r2, r7, #19
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	21e0      	movs	r1, #224	; 0xe0
 8002bc6:	f001 f8d1 	bl	8003d6c <st7735_write_reg>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	4413      	add	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8002bd2:	231c      	movs	r3, #28
 8002bd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3320      	adds	r3, #32
 8002bda:	f107 0113 	add.w	r1, r7, #19
 8002bde:	2201      	movs	r2, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f8d8 	bl	8003d96 <st7735_send_data>
 8002be6:	4602      	mov	r2, r0
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	4413      	add	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002bee:	2307      	movs	r3, #7
 8002bf0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3320      	adds	r3, #32
 8002bf6:	f107 0113 	add.w	r1, r7, #19
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 f8ca 	bl	8003d96 <st7735_send_data>
 8002c02:	4602      	mov	r2, r0
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	4413      	add	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8002c0a:	2312      	movs	r3, #18
 8002c0c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3320      	adds	r3, #32
 8002c12:	f107 0113 	add.w	r1, r7, #19
 8002c16:	2201      	movs	r2, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f8bc 	bl	8003d96 <st7735_send_data>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	4413      	add	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8002c26:	2337      	movs	r3, #55	; 0x37
 8002c28:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3320      	adds	r3, #32
 8002c2e:	f107 0113 	add.w	r1, r7, #19
 8002c32:	2201      	movs	r2, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 f8ae 	bl	8003d96 <st7735_send_data>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	4413      	add	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8002c42:	2332      	movs	r3, #50	; 0x32
 8002c44:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3320      	adds	r3, #32
 8002c4a:	f107 0113 	add.w	r1, r7, #19
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 f8a0 	bl	8003d96 <st7735_send_data>
 8002c56:	4602      	mov	r2, r0
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002c5e:	2329      	movs	r3, #41	; 0x29
 8002c60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3320      	adds	r3, #32
 8002c66:	f107 0113 	add.w	r1, r7, #19
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 f892 	bl	8003d96 <st7735_send_data>
 8002c72:	4602      	mov	r2, r0
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	4413      	add	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002c7a:	232d      	movs	r3, #45	; 0x2d
 8002c7c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3320      	adds	r3, #32
 8002c82:	f107 0113 	add.w	r1, r7, #19
 8002c86:	2201      	movs	r2, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 f884 	bl	8003d96 <st7735_send_data>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	4413      	add	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002c96:	2329      	movs	r3, #41	; 0x29
 8002c98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3320      	adds	r3, #32
 8002c9e:	f107 0113 	add.w	r1, r7, #19
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 f876 	bl	8003d96 <st7735_send_data>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8002cb2:	2325      	movs	r3, #37	; 0x25
 8002cb4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3320      	adds	r3, #32
 8002cba:	f107 0113 	add.w	r1, r7, #19
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 f868 	bl	8003d96 <st7735_send_data>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	4413      	add	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8002cce:	232b      	movs	r3, #43	; 0x2b
 8002cd0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3320      	adds	r3, #32
 8002cd6:	f107 0113 	add.w	r1, r7, #19
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 f85a 	bl	8003d96 <st7735_send_data>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8002cea:	2339      	movs	r3, #57	; 0x39
 8002cec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3320      	adds	r3, #32
 8002cf2:	f107 0113 	add.w	r1, r7, #19
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 f84c 	bl	8003d96 <st7735_send_data>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	4413      	add	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	f107 0113 	add.w	r1, r7, #19
 8002d12:	2201      	movs	r2, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 f83e 	bl	8003d96 <st7735_send_data>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4413      	add	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002d22:	2301      	movs	r3, #1
 8002d24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3320      	adds	r3, #32
 8002d2a:	f107 0113 	add.w	r1, r7, #19
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f830 	bl	8003d96 <st7735_send_data>
 8002d36:	4602      	mov	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3320      	adds	r3, #32
 8002d46:	f107 0113 	add.w	r1, r7, #19
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 f822 	bl	8003d96 <st7735_send_data>
 8002d52:	4602      	mov	r2, r0
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4413      	add	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3320      	adds	r3, #32
 8002d62:	f107 0113 	add.w	r1, r7, #19
 8002d66:	2201      	movs	r2, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 f814 	bl	8003d96 <st7735_send_data>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4413      	add	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8002d76:	2303      	movs	r3, #3
 8002d78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f103 0020 	add.w	r0, r3, #32
 8002d80:	f107 0213 	add.w	r2, r7, #19
 8002d84:	2301      	movs	r3, #1
 8002d86:	21e1      	movs	r1, #225	; 0xe1
 8002d88:	f000 fff0 	bl	8003d6c <st7735_write_reg>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	4413      	add	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8002d94:	231d      	movs	r3, #29
 8002d96:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3320      	adds	r3, #32
 8002d9c:	f107 0113 	add.w	r1, r7, #19
 8002da0:	2201      	movs	r2, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fff7 	bl	8003d96 <st7735_send_data>
 8002da8:	4602      	mov	r2, r0
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	4413      	add	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002db0:	2307      	movs	r3, #7
 8002db2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3320      	adds	r3, #32
 8002db8:	f107 0113 	add.w	r1, r7, #19
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 ffe9 	bl	8003d96 <st7735_send_data>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	4413      	add	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8002dcc:	2306      	movs	r3, #6
 8002dce:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3320      	adds	r3, #32
 8002dd4:	f107 0113 	add.w	r1, r7, #19
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 ffdb 	bl	8003d96 <st7735_send_data>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	4413      	add	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002de8:	232e      	movs	r3, #46	; 0x2e
 8002dea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3320      	adds	r3, #32
 8002df0:	f107 0113 	add.w	r1, r7, #19
 8002df4:	2201      	movs	r2, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 ffcd 	bl	8003d96 <st7735_send_data>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	4413      	add	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002e04:	232c      	movs	r3, #44	; 0x2c
 8002e06:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	f107 0113 	add.w	r1, r7, #19
 8002e10:	2201      	movs	r2, #1
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 ffbf 	bl	8003d96 <st7735_send_data>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002e20:	2329      	movs	r3, #41	; 0x29
 8002e22:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3320      	adds	r3, #32
 8002e28:	f107 0113 	add.w	r1, r7, #19
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 ffb1 	bl	8003d96 <st7735_send_data>
 8002e34:	4602      	mov	r2, r0
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4413      	add	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002e3c:	232d      	movs	r3, #45	; 0x2d
 8002e3e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3320      	adds	r3, #32
 8002e44:	f107 0113 	add.w	r1, r7, #19
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 ffa3 	bl	8003d96 <st7735_send_data>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4413      	add	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002e58:	232e      	movs	r3, #46	; 0x2e
 8002e5a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3320      	adds	r3, #32
 8002e60:	f107 0113 	add.w	r1, r7, #19
 8002e64:	2201      	movs	r2, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 ff95 	bl	8003d96 <st7735_send_data>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4413      	add	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002e74:	232e      	movs	r3, #46	; 0x2e
 8002e76:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3320      	adds	r3, #32
 8002e7c:	f107 0113 	add.w	r1, r7, #19
 8002e80:	2201      	movs	r2, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 ff87 	bl	8003d96 <st7735_send_data>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8002e90:	2337      	movs	r3, #55	; 0x37
 8002e92:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3320      	adds	r3, #32
 8002e98:	f107 0113 	add.w	r1, r7, #19
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 ff79 	bl	8003d96 <st7735_send_data>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8002eac:	233f      	movs	r3, #63	; 0x3f
 8002eae:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3320      	adds	r3, #32
 8002eb4:	f107 0113 	add.w	r1, r7, #19
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 ff6b 	bl	8003d96 <st7735_send_data>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3320      	adds	r3, #32
 8002ed0:	f107 0113 	add.w	r1, r7, #19
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 ff5d 	bl	8003d96 <st7735_send_data>
 8002edc:	4602      	mov	r2, r0
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3320      	adds	r3, #32
 8002eec:	f107 0113 	add.w	r1, r7, #19
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 ff4f 	bl	8003d96 <st7735_send_data>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4413      	add	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002f00:	2302      	movs	r3, #2
 8002f02:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3320      	adds	r3, #32
 8002f08:	f107 0113 	add.w	r1, r7, #19
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 ff41 	bl	8003d96 <st7735_send_data>
 8002f14:	4602      	mov	r2, r0
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4413      	add	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002f1c:	2310      	movs	r3, #16
 8002f1e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3320      	adds	r3, #32
 8002f24:	f107 0113 	add.w	r1, r7, #19
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 ff33 	bl	8003d96 <st7735_send_data>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f103 0020 	add.w	r0, r3, #32
 8002f42:	f107 0213 	add.w	r2, r7, #19
 8002f46:	2301      	movs	r3, #1
 8002f48:	2113      	movs	r1, #19
 8002f4a:	f000 ff0f 	bl	8003d6c <st7735_write_reg>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	4413      	add	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f103 0020 	add.w	r0, r3, #32
 8002f5c:	f107 0213 	add.w	r2, r7, #19
 8002f60:	2301      	movs	r3, #1
 8002f62:	2129      	movs	r1, #41	; 0x29
 8002f64:	f000 ff02 	bl	8003d6c <st7735_write_reg>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f944 	bl	8003200 <ST7735_SetOrientation>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002f8c:	697b      	ldr	r3, [r7, #20]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3320      	adds	r3, #32
 8002fba:	f107 0208 	add.w	r2, r7, #8
 8002fbe:	21da      	movs	r1, #218	; 0xda
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fec0 	bl	8003d46 <st7735_read_reg>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	e02d      	b.n	8003030 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f103 0020 	add.w	r0, r3, #32
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	3301      	adds	r3, #1
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	21db      	movs	r1, #219	; 0xdb
 8002fe4:	f000 feaf 	bl	8003d46 <st7735_read_reg>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e01c      	b.n	8003030 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f103 0020 	add.w	r0, r3, #32
 8002ffc:	f107 0308 	add.w	r3, r7, #8
 8003000:	3302      	adds	r3, #2
 8003002:	461a      	mov	r2, r3
 8003004:	21dc      	movs	r1, #220	; 0xdc
 8003006:	f000 fe9e 	bl	8003d46 <st7735_read_reg>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8003010:	f04f 33ff 	mov.w	r3, #4294967295
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e00b      	b.n	8003030 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8003018:	7abb      	ldrb	r3, [r7, #10]
 800301a:	461a      	mov	r2, r3
 800301c:	7a7b      	ldrb	r3, [r7, #9]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	431a      	orrs	r2, r3
 8003022:	7a3b      	ldrb	r3, [r7, #8]
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	431a      	orrs	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003030:	68fb      	ldr	r3, [r7, #12]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f103 0020 	add.w	r0, r3, #32
 800304e:	f107 020b 	add.w	r2, r7, #11
 8003052:	2300      	movs	r3, #0
 8003054:	2113      	movs	r1, #19
 8003056:	f000 fe89 	bl	8003d6c <st7735_write_reg>
 800305a:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800305c:	210a      	movs	r1, #10
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fe57 	bl	8003d12 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f103 0020 	add.w	r0, r3, #32
 800306a:	f107 020b 	add.w	r2, r7, #11
 800306e:	2300      	movs	r3, #0
 8003070:	2129      	movs	r1, #41	; 0x29
 8003072:	f000 fe7b 	bl	8003d6c <st7735_write_reg>
 8003076:	4602      	mov	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800307e:	210a      	movs	r1, #10
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fe46 	bl	8003d12 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f103 0020 	add.w	r0, r3, #32
 800308c:	f107 020b 	add.w	r2, r7, #11
 8003090:	2300      	movs	r3, #0
 8003092:	2136      	movs	r1, #54	; 0x36
 8003094:	f000 fe6a 	bl	8003d6c <st7735_write_reg>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <ST7735_DisplayOn+0xc0>)
 80030a2:	7b1b      	ldrb	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80030a8:	4b14      	ldr	r3, [pc, #80]	; (80030fc <ST7735_DisplayOn+0xc0>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a14      	ldr	r2, [pc, #80]	; (8003100 <ST7735_DisplayOn+0xc4>)
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80030b6:	f043 0308 	orr.w	r3, r3, #8
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e006      	b.n	80030cc <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <ST7735_DisplayOn+0xc0>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4a0f      	ldr	r2, [pc, #60]	; (8003100 <ST7735_DisplayOn+0xc4>)
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3320      	adds	r3, #32
 80030d2:	f107 010b 	add.w	r1, r7, #11
 80030d6:	2201      	movs	r2, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fe5c 	bl	8003d96 <st7735_send_data>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	24001cb4 	.word	0x24001cb4
 8003100:	24000078 	.word	0x24000078

08003104 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f103 0020 	add.w	r0, r3, #32
 8003116:	f107 020b 	add.w	r2, r7, #11
 800311a:	2300      	movs	r3, #0
 800311c:	2113      	movs	r1, #19
 800311e:	f000 fe25 	bl	8003d6c <st7735_write_reg>
 8003122:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003124:	210a      	movs	r1, #10
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fdf3 	bl	8003d12 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f103 0020 	add.w	r0, r3, #32
 8003132:	f107 020b 	add.w	r2, r7, #11
 8003136:	2300      	movs	r3, #0
 8003138:	2128      	movs	r1, #40	; 0x28
 800313a:	f000 fe17 	bl	8003d6c <st7735_write_reg>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003146:	210a      	movs	r1, #10
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fde2 	bl	8003d12 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f103 0020 	add.w	r0, r3, #32
 8003154:	f107 020b 	add.w	r2, r7, #11
 8003158:	2300      	movs	r3, #0
 800315a:	2136      	movs	r1, #54	; 0x36
 800315c:	f000 fe06 	bl	8003d6c <st7735_write_reg>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <ST7735_DisplayOff+0xc0>)
 800316a:	7b1b      	ldrb	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <ST7735_DisplayOff+0xc0>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <ST7735_DisplayOff+0xc4>)
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800317e:	f043 0308 	orr.w	r3, r3, #8
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e006      	b.n	8003194 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <ST7735_DisplayOff+0xc0>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <ST7735_DisplayOff+0xc4>)
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003192:	b2db      	uxtb	r3, r3
 8003194:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3320      	adds	r3, #32
 800319a:	f107 010b 	add.w	r1, r7, #11
 800319e:	2201      	movs	r2, #1
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fdf8 	bl	8003d96 <st7735_send_data>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	24001cb4 	.word	0x24001cb4
 80031c8:	24000078 	.word	0x24000078

080031cc <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af02      	add	r7, sp, #8
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <ST7735_SetOrientation+0x1a>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d119      	bne.n	800324e <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	7b5b      	ldrb	r3, [r3, #13]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d106      	bne.n	8003230 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8003222:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <ST7735_SetOrientation+0x114>)
 8003224:	2250      	movs	r2, #80	; 0x50
 8003226:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8003228:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <ST7735_SetOrientation+0x114>)
 800322a:	22a0      	movs	r2, #160	; 0xa0
 800322c:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800322e:	e028      	b.n	8003282 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	7b5b      	ldrb	r3, [r3, #13]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <ST7735_SetOrientation+0x40>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	7b5b      	ldrb	r3, [r3, #13]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d120      	bne.n	8003282 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8003240:	4b34      	ldr	r3, [pc, #208]	; (8003314 <ST7735_SetOrientation+0x114>)
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8003246:	4b33      	ldr	r3, [pc, #204]	; (8003314 <ST7735_SetOrientation+0x114>)
 8003248:	22a0      	movs	r2, #160	; 0xa0
 800324a:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800324c:	e019      	b.n	8003282 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	7b5b      	ldrb	r3, [r3, #13]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d106      	bne.n	8003264 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 8003256:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <ST7735_SetOrientation+0x114>)
 8003258:	22a0      	movs	r2, #160	; 0xa0
 800325a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <ST7735_SetOrientation+0x114>)
 800325e:	2250      	movs	r2, #80	; 0x50
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	e00f      	b.n	8003284 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	7b5b      	ldrb	r3, [r3, #13]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <ST7735_SetOrientation+0x74>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	7b5b      	ldrb	r3, [r3, #13]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d107      	bne.n	8003284 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <ST7735_SetOrientation+0x114>)
 8003276:	22a0      	movs	r2, #160	; 0xa0
 8003278:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <ST7735_SetOrientation+0x114>)
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	e000      	b.n	8003284 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8003282:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <ST7735_SetOrientation+0x114>)
 800328a:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	7b1a      	ldrb	r2, [r3, #12]
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <ST7735_SetOrientation+0x114>)
 8003292:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	7b5a      	ldrb	r2, [r3, #13]
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <ST7735_SetOrientation+0x114>)
 800329a:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <ST7735_SetOrientation+0x114>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <ST7735_SetOrientation+0x114>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4613      	mov	r3, r2
 80032a8:	2200      	movs	r2, #0
 80032aa:	2100      	movs	r1, #0
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fbdf 	bl	8003a70 <ST7735_SetDisplayWindow>
 80032b2:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <ST7735_SetOrientation+0x114>)
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <ST7735_SetOrientation+0x114>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <ST7735_SetOrientation+0x118>)
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80032ca:	f043 0308 	orr.w	r3, r3, #8
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e006      	b.n	80032e0 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <ST7735_SetOrientation+0x114>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <ST7735_SetOrientation+0x118>)
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f103 0020 	add.w	r0, r3, #32
 80032e8:	f107 020b 	add.w	r2, r7, #11
 80032ec:	2301      	movs	r3, #1
 80032ee:	2136      	movs	r1, #54	; 0x36
 80032f0:	f000 fd3c 	bl	8003d6c <st7735_write_reg>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8003302:	f04f 33ff 	mov.w	r3, #4294967295
 8003306:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003308:	68fb      	ldr	r3, [r7, #12]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	24001cb4 	.word	0x24001cb4
 8003318:	24000078 	.word	0x24000078

0800331c <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <ST7735_GetOrientation+0x20>)
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	24001cb4 	.word	0x24001cb4

08003340 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 800334c:	4b59      	ldr	r3, [pc, #356]	; (80034b4 <ST7735_SetCursor+0x174>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d821      	bhi.n	8003398 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8003354:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <ST7735_SetCursor+0x174>)
 8003356:	7b5b      	ldrb	r3, [r3, #13]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d10e      	bne.n	800337a <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 800335c:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <ST7735_SetCursor+0x174>)
 800335e:	7b1b      	ldrb	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <ST7735_SetCursor+0x32>
				Xpos += 26;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	331a      	adds	r3, #26
 8003368:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3301      	adds	r3, #1
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e033      	b.n	80033da <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3318      	adds	r3, #24
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	e02f      	b.n	80033da <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800337a:	4b4e      	ldr	r3, [pc, #312]	; (80034b4 <ST7735_SetCursor+0x174>)
 800337c:	7b5b      	ldrb	r3, [r3, #13]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d12b      	bne.n	80033da <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003382:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <ST7735_SetCursor+0x174>)
 8003384:	7b1b      	ldrb	r3, [r3, #12]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d127      	bne.n	80033da <ST7735_SetCursor+0x9a>
				Xpos += 2;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3302      	adds	r3, #2
 800338e:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3301      	adds	r3, #1
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	e020      	b.n	80033da <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8003398:	4b46      	ldr	r3, [pc, #280]	; (80034b4 <ST7735_SetCursor+0x174>)
 800339a:	7b5b      	ldrb	r3, [r3, #13]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10e      	bne.n	80033be <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80033a0:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <ST7735_SetCursor+0x174>)
 80033a2:	7b1b      	ldrb	r3, [r3, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d106      	bne.n	80033b6 <ST7735_SetCursor+0x76>
				Xpos += 1;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	331a      	adds	r3, #26
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	e011      	b.n	80033da <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3318      	adds	r3, #24
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	e00d      	b.n	80033da <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <ST7735_SetCursor+0x174>)
 80033c0:	7b5b      	ldrb	r3, [r3, #13]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d109      	bne.n	80033da <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80033c6:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <ST7735_SetCursor+0x174>)
 80033c8:	7b1b      	ldrb	r3, [r3, #12]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <ST7735_SetCursor+0x9a>
				Xpos += 1;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3302      	adds	r3, #2
 80033d8:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f103 0020 	add.w	r0, r3, #32
 80033e0:	f107 0213 	add.w	r2, r7, #19
 80033e4:	2300      	movs	r3, #0
 80033e6:	212a      	movs	r1, #42	; 0x2a
 80033e8:	f000 fcc0 	bl	8003d6c <st7735_write_reg>
 80033ec:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3320      	adds	r3, #32
 80033fa:	f107 0113 	add.w	r1, r7, #19
 80033fe:	2201      	movs	r2, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fcc8 	bl	8003d96 <st7735_send_data>
 8003406:	4602      	mov	r2, r0
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4413      	add	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3320      	adds	r3, #32
 8003418:	f107 0113 	add.w	r1, r7, #19
 800341c:	2201      	movs	r2, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fcb9 	bl	8003d96 <st7735_send_data>
 8003424:	4602      	mov	r2, r0
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4413      	add	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f103 0020 	add.w	r0, r3, #32
 8003432:	f107 0213 	add.w	r2, r7, #19
 8003436:	2300      	movs	r3, #0
 8003438:	212b      	movs	r1, #43	; 0x2b
 800343a:	f000 fc97 	bl	8003d6c <st7735_write_reg>
 800343e:	4602      	mov	r2, r0
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	4413      	add	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	b2db      	uxtb	r3, r3
 800344c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3320      	adds	r3, #32
 8003452:	f107 0113 	add.w	r1, r7, #19
 8003456:	2201      	movs	r2, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fc9c 	bl	8003d96 <st7735_send_data>
 800345e:	4602      	mov	r2, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4413      	add	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3320      	adds	r3, #32
 8003470:	f107 0113 	add.w	r1, r7, #19
 8003474:	2201      	movs	r2, #1
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fc8d 	bl	8003d96 <st7735_send_data>
 800347c:	4602      	mov	r2, r0
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4413      	add	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f103 0020 	add.w	r0, r3, #32
 800348a:	f107 0213 	add.w	r2, r7, #19
 800348e:	2300      	movs	r3, #0
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	f000 fc6b 	bl	8003d6c <st7735_write_reg>
 8003496:	4602      	mov	r2, r0
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4413      	add	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80034a4:	f04f 33ff 	mov.w	r3, #4294967295
 80034a8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80034aa:	697b      	ldr	r3, [r7, #20]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	24001cb4 	.word	0x24001cb4

080034b8 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b090      	sub	sp, #64	; 0x40
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	330a      	adds	r3, #10
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	330b      	adds	r3, #11
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	441a      	add	r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	441a      	add	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	330d      	adds	r3, #13
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	4413      	add	r3, r2
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	3312      	adds	r3, #18
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	3313      	adds	r3, #19
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	441a      	add	r2, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	3314      	adds	r3, #20
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	441a      	add	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	3315      	adds	r3, #21
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	061b      	lsls	r3, r3, #24
 800351a:	4413      	add	r3, r2
 800351c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	3316      	adds	r3, #22
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	3317      	adds	r3, #23
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	441a      	add	r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	3318      	adds	r3, #24
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	041b      	lsls	r3, r3, #16
 8003538:	441a      	add	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	3319      	adds	r3, #25
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	4413      	add	r3, r2
 8003544:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	3302      	adds	r3, #2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	3303      	adds	r3, #3
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	441a      	add	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	3304      	adds	r3, #4
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	441a      	add	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	3305      	adds	r3, #5
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	4413      	add	r3, r2
 800356c:	61fb      	str	r3, [r7, #28]
  size = size - index;
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	4413      	add	r3, r2
 800357c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 800357e:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	1ad2      	subs	r2, r2, r3
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fa6a 	bl	8003a70 <ST7735_SetDisplayWindow>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	e087      	b.n	80036ba <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80035aa:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 80035ac:	7b1b      	ldrb	r3, [r3, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80035b2:	4b44      	ldr	r3, [pc, #272]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4a44      	ldr	r2, [pc, #272]	; (80036c8 <ST7735_DrawBitmap+0x210>)
 80035b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035bc:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e005      	b.n	80035d2 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4a3f      	ldr	r2, [pc, #252]	; (80036c8 <ST7735_DrawBitmap+0x210>)
 80035cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f103 0020 	add.w	r0, r3, #32
 80035da:	f107 0213 	add.w	r2, r7, #19
 80035de:	2301      	movs	r3, #1
 80035e0:	2136      	movs	r1, #54	; 0x36
 80035e2:	f000 fbc3 	bl	8003d6c <st7735_write_reg>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
 80035f2:	e062      	b.n	80036ba <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fea1 	bl	8003340 <ST7735_SetCursor>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
 800360a:	e056      	b.n	80036ba <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3320      	adds	r3, #32
 800361c:	f107 0114 	add.w	r1, r7, #20
 8003620:	2202      	movs	r2, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fbb7 	bl	8003d96 <st7735_send_data>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8003634:	e009      	b.n	800364a <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	3302      	adds	r3, #2
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	3302      	adds	r3, #2
 8003640:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8003642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	429a      	cmp	r2, r3
 8003648:	d3e0      	bcc.n	800360c <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 800364c:	7b1b      	ldrb	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <ST7735_DrawBitmap+0x210>)
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003660:	f043 0308 	orr.w	r3, r3, #8
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e006      	b.n	8003676 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8003668:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <ST7735_DrawBitmap+0x210>)
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003674:	b2db      	uxtb	r3, r3
 8003676:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f103 0020 	add.w	r0, r3, #32
 800367e:	f107 0213 	add.w	r2, r7, #19
 8003682:	2301      	movs	r3, #1
 8003684:	2136      	movs	r1, #54	; 0x36
 8003686:	f000 fb71 	bl	8003d6c <st7735_write_reg>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 8003690:	f04f 33ff 	mov.w	r3, #4294967295
 8003694:	637b      	str	r3, [r7, #52]	; 0x34
 8003696:	e010      	b.n	80036ba <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <ST7735_DrawBitmap+0x20c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	2200      	movs	r2, #0
 80036a6:	2100      	movs	r1, #0
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f9e1 	bl	8003a70 <ST7735_SetDisplayWindow>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3738      	adds	r7, #56	; 0x38
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	24001cb4 	.word	0x24001cb4
 80036c8:	24000078 	.word	0x24000078

080036cc <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	441a      	add	r2, r3
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <ST7735_FillRGBRect+0xcc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d806      	bhi.n	80036fe <ST7735_FillRGBRect+0x32>
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	441a      	add	r2, r3
 80036f6:	4b28      	ldr	r3, [pc, #160]	; (8003798 <ST7735_FillRGBRect+0xcc>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d903      	bls.n	8003706 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e042      	b.n	800378c <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	e03b      	b.n	8003784 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	461a      	mov	r2, r3
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff fe12 	bl	8003340 <ST7735_SetCursor>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e029      	b.n	800377e <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	e013      	b.n	8003758 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	7811      	ldrb	r1, [r2, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <ST7735_FillRGBRect+0xd0>)
 800373a:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	3301      	adds	r3, #1
 8003746:	7811      	ldrb	r1, [r2, #0]
 8003748:	4a14      	ldr	r2, [pc, #80]	; (800379c <ST7735_FillRGBRect+0xd0>)
 800374a:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	3302      	adds	r3, #2
 8003750:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	3301      	adds	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	429a      	cmp	r2, r3
 800375e:	d3e7      	bcc.n	8003730 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f103 0020 	add.w	r0, r3, #32
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	461a      	mov	r2, r3
 800376c:	490b      	ldr	r1, [pc, #44]	; (800379c <ST7735_FillRGBRect+0xd0>)
 800376e:	f000 fb12 	bl	8003d96 <st7735_send_data>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3301      	adds	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	429a      	cmp	r2, r3
 800378a:	d3bf      	bcc.n	800370c <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 800378c:	69fb      	ldr	r3, [r7, #28]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	24001cb4 	.word	0x24001cb4
 800379c:	24000284 	.word	0x24000284

080037a0 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	441a      	add	r2, r3
 80037b8:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <ST7735_DrawHLine+0x98>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d903      	bls.n	80037c8 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e032      	b.n	800382e <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff fdb7 	bl	8003340 <ST7735_SetCursor>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e026      	b.n	800382e <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	e010      	b.n	8003808 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	0a1a      	lsrs	r2, r3, #8
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	b2d1      	uxtb	r1, r2
 80037f0:	4a12      	ldr	r2, [pc, #72]	; (800383c <ST7735_DrawHLine+0x9c>)
 80037f2:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	3301      	adds	r3, #1
 80037fa:	6a3a      	ldr	r2, [r7, #32]
 80037fc:	b2d1      	uxtb	r1, r2
 80037fe:	4a0f      	ldr	r2, [pc, #60]	; (800383c <ST7735_DrawHLine+0x9c>)
 8003800:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	3301      	adds	r3, #1
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d3ea      	bcc.n	80037e6 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f103 0020 	add.w	r0, r3, #32
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	461a      	mov	r2, r3
 800381c:	4907      	ldr	r1, [pc, #28]	; (800383c <ST7735_DrawHLine+0x9c>)
 800381e:	f000 faba 	bl	8003d96 <st7735_send_data>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800382e:	697b      	ldr	r3, [r7, #20]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	24001cb4 	.word	0x24001cb4
 800383c:	24000504 	.word	0x24000504

08003840 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	441a      	add	r2, r3
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <ST7735_DrawVLine+0x64>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d903      	bls.n	8003868 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e018      	b.n	800389a <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	e011      	b.n	8003892 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	441a      	add	r2, r3
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f841 	bl	8003900 <ST7735_SetPixel>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8003884:	f04f 33ff 	mov.w	r3, #4294967295
 8003888:	617b      	str	r3, [r7, #20]
        break;
 800388a:	e006      	b.n	800389a <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	3301      	adds	r3, #1
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d3e9      	bcc.n	800386e <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 800389a:	697b      	ldr	r3, [r7, #20]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	24001cb4 	.word	0x24001cb4

080038a8 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e014      	b.n	80038ee <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff ff66 	bl	80037a0 <ST7735_DrawHLine>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	61fb      	str	r3, [r7, #28]
      break;
 80038e0:	e009      	b.n	80038f6 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3301      	adds	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	3301      	adds	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d3e6      	bcc.n	80038c4 <ST7735_FillRect+0x1c>
  }

  return ret;
 80038f6:	69fb      	ldr	r3, [r7, #28]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	b29b      	uxth	r3, r3
 800391a:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	b29a      	uxth	r2, r3
 8003922:	8a7b      	ldrh	r3, [r7, #18]
 8003924:	4313      	orrs	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <ST7735_SetPixel+0x84>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	429a      	cmp	r2, r3
 8003932:	d204      	bcs.n	800393e <ST7735_SetPixel+0x3e>
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <ST7735_SetPixel+0x84>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d303      	bcc.n	8003946 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e019      	b.n	800397a <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f7ff fcf8 	bl	8003340 <ST7735_SetCursor>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	e00d      	b.n	800397a <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3320      	adds	r3, #32
 8003962:	f107 0112 	add.w	r1, r7, #18
 8003966:	2202      	movs	r2, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fa14 	bl	8003d96 <st7735_send_data>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
 8003978:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800397a:	697b      	ldr	r3, [r7, #20]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	24001cb4 	.word	0x24001cb4

08003988 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff fcd0 	bl	8003340 <ST7735_SetCursor>
 80039a0:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3320      	adds	r3, #32
 80039a6:	f107 0211 	add.w	r2, r7, #17
 80039aa:	212e      	movs	r1, #46	; 0x2e
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f9ca 	bl	8003d46 <st7735_read_reg>
 80039b2:	4602      	mov	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	4413      	add	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3320      	adds	r3, #32
 80039be:	f107 0111 	add.w	r1, r7, #17
 80039c2:	2201      	movs	r2, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f9f8 	bl	8003dba <st7735_recv_data>
 80039ca:	4602      	mov	r2, r0
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4413      	add	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3320      	adds	r3, #32
 80039d6:	f107 0113 	add.w	r1, r7, #19
 80039da:	2201      	movs	r2, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f9ec 	bl	8003dba <st7735_recv_data>
 80039e2:	4602      	mov	r2, r0
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	4413      	add	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3320      	adds	r3, #32
 80039ee:	f107 0112 	add.w	r1, r7, #18
 80039f2:	2201      	movs	r2, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f9e0 	bl	8003dba <st7735_recv_data>
 80039fa:	4602      	mov	r2, r0
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4413      	add	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	461a      	mov	r2, r3
 8003a06:	7cbb      	ldrb	r3, [r7, #18]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	441a      	add	r2, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a1c:	697b      	ldr	r3, [r7, #20]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <ST7735_GetXSize+0x20>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	24001cb4 	.word	0x24001cb4

08003a4c <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <ST7735_GetYSize+0x20>)
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	24001cb4 	.word	0x24001cb4

08003a70 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8003a7e:	4b7d      	ldr	r3, [pc, #500]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d821      	bhi.n	8003aca <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8003a86:	4b7b      	ldr	r3, [pc, #492]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003a88:	7b5b      	ldrb	r3, [r3, #13]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d10e      	bne.n	8003aac <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8003a8e:	4b79      	ldr	r3, [pc, #484]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003a90:	7b1b      	ldrb	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	331a      	adds	r3, #26
 8003a9a:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	e036      	b.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	e032      	b.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003aac:	4b71      	ldr	r3, [pc, #452]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003aae:	7b5b      	ldrb	r3, [r3, #13]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d12e      	bne.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003ab6:	7b1b      	ldrb	r3, [r3, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d12a      	bne.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3302      	adds	r3, #2
 8003ac0:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e023      	b.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8003aca:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003acc:	7b5b      	ldrb	r3, [r3, #13]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d111      	bne.n	8003af6 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8003ad2:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003ad4:	7b1b      	ldrb	r3, [r3, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3301      	adds	r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	331a      	adds	r3, #26
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	e014      	b.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3301      	adds	r3, #1
 8003aec:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3318      	adds	r3, #24
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	e00d      	b.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003af6:	4b5f      	ldr	r3, [pc, #380]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003af8:	7b5b      	ldrb	r3, [r3, #13]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d109      	bne.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <ST7735_SetDisplayWindow+0x204>)
 8003b00:	7b1b      	ldrb	r3, [r3, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3302      	adds	r3, #2
 8003b10:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f103 0020 	add.w	r0, r3, #32
 8003b18:	f107 0213 	add.w	r2, r7, #19
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	212a      	movs	r1, #42	; 0x2a
 8003b20:	f000 f924 	bl	8003d6c <st7735_write_reg>
 8003b24:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3320      	adds	r3, #32
 8003b32:	f107 0113 	add.w	r1, r7, #19
 8003b36:	2201      	movs	r2, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f92c 	bl	8003d96 <st7735_send_data>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4413      	add	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3320      	adds	r3, #32
 8003b50:	f107 0113 	add.w	r1, r7, #19
 8003b54:	2201      	movs	r2, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f91d 	bl	8003d96 <st7735_send_data>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	4413      	add	r3, r2
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3320      	adds	r3, #32
 8003b76:	f107 0113 	add.w	r1, r7, #19
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f90a 	bl	8003d96 <st7735_send_data>
 8003b82:	4602      	mov	r2, r0
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4413      	add	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3320      	adds	r3, #32
 8003ba0:	f107 0113 	add.w	r1, r7, #19
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f8f5 	bl	8003d96 <st7735_send_data>
 8003bac:	4602      	mov	r2, r0
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f103 0020 	add.w	r0, r3, #32
 8003bba:	f107 0213 	add.w	r2, r7, #19
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	212b      	movs	r1, #43	; 0x2b
 8003bc2:	f000 f8d3 	bl	8003d6c <st7735_write_reg>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4413      	add	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3320      	adds	r3, #32
 8003bda:	f107 0113 	add.w	r1, r7, #19
 8003bde:	2201      	movs	r2, #1
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f8d8 	bl	8003d96 <st7735_send_data>
 8003be6:	4602      	mov	r2, r0
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3320      	adds	r3, #32
 8003bf8:	f107 0113 	add.w	r1, r7, #19
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f8c9 	bl	8003d96 <st7735_send_data>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4413      	add	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	4413      	add	r3, r2
 8003c12:	3b01      	subs	r3, #1
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	f107 0113 	add.w	r1, r7, #19
 8003c22:	2201      	movs	r2, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f8b6 	bl	8003d96 <st7735_send_data>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4413      	add	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3320      	adds	r3, #32
 8003c48:	f107 0113 	add.w	r1, r7, #19
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f8a1 	bl	8003d96 <st7735_send_data>
 8003c54:	4602      	mov	r2, r0
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4413      	add	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003c68:	697b      	ldr	r3, [r7, #20]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	24001cb4 	.word	0x24001cb4

08003c78 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	460b      	mov	r3, r1
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	7afa      	ldrb	r2, [r7, #11]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4610      	mov	r0, r2
 8003c94:	4798      	blx	r3
 8003c96:	4603      	mov	r3, r0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	460b      	mov	r3, r1
 8003cae:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	7af8      	ldrb	r0, [r7, #11]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4798      	blx	r3
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	68b8      	ldr	r0, [r7, #8]
 8003ce2:	4798      	blx	r3
 8003ce4:	4603      	mov	r3, r0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	68b8      	ldr	r0, [r7, #8]
 8003d06:	4798      	blx	r3
 8003d08:	4603      	mov	r3, r0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	4798      	blx	r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003d26:	bf00      	nop
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4798      	blx	r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	461a      	mov	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d8f5      	bhi.n	8003d28 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	6910      	ldr	r0, [r2, #16]
 8003d5c:	7af9      	ldrb	r1, [r7, #11]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4798      	blx	r3
 8003d62:	4603      	mov	r3, r0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681c      	ldr	r4, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6918      	ldr	r0, [r3, #16]
 8003d84:	7af9      	ldrb	r1, [r7, #11]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	47a0      	blx	r4
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd90      	pop	{r4, r7, pc}

08003d96 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	6910      	ldr	r0, [r2, #16]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	4798      	blx	r3
 8003db0:	4603      	mov	r3, r0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	6910      	ldr	r0, [r2, #16]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4798      	blx	r3
 8003dd4:	4603      	mov	r3, r0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de6:	2003      	movs	r0, #3
 8003de8:	f001 fa3a 	bl	8005260 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dec:	f003 fdc4 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_Init+0x68>)
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	4913      	ldr	r1, [pc, #76]	; (8003e4c <HAL_Init+0x6c>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_Init+0x68>)
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <HAL_Init+0x6c>)
 8003e14:	5cd3      	ldrb	r3, [r2, r3]
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e20:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <HAL_Init+0x70>)
 8003e22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e24:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <HAL_Init+0x74>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f000 f814 	bl	8003e58 <HAL_InitTick>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e002      	b.n	8003e40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e3a:	f7fd fba9 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	0801307c 	.word	0x0801307c
 8003e50:	24000004 	.word	0x24000004
 8003e54:	24000000 	.word	0x24000000

08003e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e60:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_InitTick+0x60>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e021      	b.n	8003eb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_InitTick+0x64>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_InitTick+0x60>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 fa1f 	bl	80052c6 <HAL_SYSTICK_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e00e      	b.n	8003eb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b0f      	cmp	r3, #15
 8003e96:	d80a      	bhi.n	8003eae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	f001 f9e9 	bl	8005276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ea4:	4a06      	ldr	r2, [pc, #24]	; (8003ec0 <HAL_InitTick+0x68>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	2400009c 	.word	0x2400009c
 8003ebc:	24000000 	.word	0x24000000
 8003ec0:	24000098 	.word	0x24000098

08003ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_IncTick+0x20>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_IncTick+0x24>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <HAL_IncTick+0x24>)
 8003ed6:	6013      	str	r3, [r2, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	2400009c 	.word	0x2400009c
 8003ee8:	24001cc4 	.word	0x24001cc4

08003eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return uwTick;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_GetTick+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	24001cc4 	.word	0x24001cc4

08003f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f0c:	f7ff ffee 	bl	8003eec <HAL_GetTick>
 8003f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d005      	beq.n	8003f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_Delay+0x44>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f2a:	bf00      	nop
 8003f2c:	f7ff ffde 	bl	8003eec <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d8f7      	bhi.n	8003f2c <HAL_Delay+0x28>
  {
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2400009c 	.word	0x2400009c

08003f4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_GetREVID+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0c1b      	lsrs	r3, r3, #16
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	5c001000 	.word	0x5c001000

08003f64 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_GetDEVID+0x18>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	5c001000 	.word	0x5c001000

08003f80 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	58000400 	.word	0x58000400

08003fac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3360      	adds	r3, #96	; 0x60
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	430b      	orrs	r3, r1
 8004042:	431a      	orrs	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	611a      	str	r2, [r3, #16]
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004086:	b480      	push	{r7}
 8004088:	b087      	sub	sp, #28
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3360      	adds	r3, #96	; 0x60
 8004096:	461a      	mov	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	601a      	str	r2, [r3, #0]
  }
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3330      	adds	r3, #48	; 0x30
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	4413      	add	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	211f      	movs	r1, #31
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	0e9b      	lsrs	r3, r3, #26
 80040f4:	f003 011f 	and.w	r1, r3, #31
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	431a      	orrs	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3314      	adds	r3, #20
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	0e5b      	lsrs	r3, r3, #25
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	4413      	add	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	0d1b      	lsrs	r3, r3, #20
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2107      	movs	r1, #7
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	401a      	ands	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	0d1b      	lsrs	r3, r3, #20
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0318 	and.w	r3, r3, #24
 800418e:	4908      	ldr	r1, [pc, #32]	; (80041b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004190:	40d9      	lsrs	r1, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	400b      	ands	r3, r1
 8004196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800419a:	431a      	orrs	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	000fffff 	.word	0x000fffff

080041b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6093      	str	r3, [r2, #8]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	5fffffc0 	.word	0x5fffffc0

080041d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ec:	d101      	bne.n	80041f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <LL_ADC_EnableInternalRegulator+0x24>)
 800420e:	4013      	ands	r3, r2
 8004210:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	6fffffc0 	.word	0x6fffffc0

08004228 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800423c:	d101      	bne.n	8004242 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <LL_ADC_IsEnabled+0x18>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <LL_ADC_IsEnabled+0x1a>
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b04      	cmp	r3, #4
 8004288:	d101      	bne.n	800428e <LL_ADC_REG_IsConversionOngoing+0x18>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d101      	bne.n	80042b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e18e      	b.n	80045fc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fc fb09 	bl	8000904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff ff67 	bl	80041d8 <LL_ADC_IsDeepPowerDownEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff4d 	bl	80041b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff82 	bl	8004228 <LL_ADC_IsInternalRegulatorEnabled>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d114      	bne.n	8004354 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff66 	bl	8004200 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004334:	4b9a      	ldr	r3, [pc, #616]	; (80045a0 <HAL_ADC_Init+0x2dc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	4a9a      	ldr	r2, [pc, #616]	; (80045a4 <HAL_ADC_Init+0x2e0>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	3301      	adds	r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004346:	e002      	b.n	800434e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3b01      	subs	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f9      	bne.n	8004348 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff65 	bl	8004228 <LL_ADC_IsInternalRegulatorEnabled>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10d      	bne.n	8004380 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f043 0210 	orr.w	r2, r3, #16
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff76 	bl	8004276 <LL_ADC_REG_IsConversionOngoing>
 800438a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	f040 8128 	bne.w	80045ea <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 8124 	bne.w	80045ea <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff4a 	bl	8004250 <LL_ADC_IsEnabled>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d136      	bne.n	8004430 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a78      	ldr	r2, [pc, #480]	; (80045a8 <HAL_ADC_Init+0x2e4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_ADC_Init+0x112>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a76      	ldr	r2, [pc, #472]	; (80045ac <HAL_ADC_Init+0x2e8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10e      	bne.n	80043f4 <HAL_ADC_Init+0x130>
 80043d6:	4874      	ldr	r0, [pc, #464]	; (80045a8 <HAL_ADC_Init+0x2e4>)
 80043d8:	f7ff ff3a 	bl	8004250 <LL_ADC_IsEnabled>
 80043dc:	4604      	mov	r4, r0
 80043de:	4873      	ldr	r0, [pc, #460]	; (80045ac <HAL_ADC_Init+0x2e8>)
 80043e0:	f7ff ff36 	bl	8004250 <LL_ADC_IsEnabled>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4323      	orrs	r3, r4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e008      	b.n	8004406 <HAL_ADC_Init+0x142>
 80043f4:	486e      	ldr	r0, [pc, #440]	; (80045b0 <HAL_ADC_Init+0x2ec>)
 80043f6:	f7ff ff2b 	bl	8004250 <LL_ADC_IsEnabled>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d012      	beq.n	8004430 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a66      	ldr	r2, [pc, #408]	; (80045a8 <HAL_ADC_Init+0x2e4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_ADC_Init+0x15a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a64      	ldr	r2, [pc, #400]	; (80045ac <HAL_ADC_Init+0x2e8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <HAL_ADC_Init+0x15e>
 800441e:	4a65      	ldr	r2, [pc, #404]	; (80045b4 <HAL_ADC_Init+0x2f0>)
 8004420:	e000      	b.n	8004424 <HAL_ADC_Init+0x160>
 8004422:	4a65      	ldr	r2, [pc, #404]	; (80045b8 <HAL_ADC_Init+0x2f4>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7ff fdbe 	bl	8003fac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004430:	f7ff fd8c 	bl	8003f4c <HAL_GetREVID>
 8004434:	4603      	mov	r3, r0
 8004436:	f241 0203 	movw	r2, #4099	; 0x1003
 800443a:	4293      	cmp	r3, r2
 800443c:	d914      	bls.n	8004468 <HAL_ADC_Init+0x1a4>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b10      	cmp	r3, #16
 8004444:	d110      	bne.n	8004468 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7d5b      	ldrb	r3, [r3, #21]
 800444a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004450:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004456:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7f1b      	ldrb	r3, [r3, #28]
 800445c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800445e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004460:	f043 030c 	orr.w	r3, r3, #12
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e00d      	b.n	8004484 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	7d5b      	ldrb	r3, [r3, #21]
 800446c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004472:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004478:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7f1b      	ldrb	r3, [r3, #28]
 800447e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	7f1b      	ldrb	r3, [r3, #28]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d106      	bne.n	800449a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	3b01      	subs	r3, #1
 8004492:	045b      	lsls	r3, r3, #17
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <HAL_ADC_Init+0x2f8>)
 80044be:	4013      	ands	r3, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	69b9      	ldr	r1, [r7, #24]
 80044c6:	430b      	orrs	r3, r1
 80044c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fed1 	bl	8004276 <LL_ADC_REG_IsConversionOngoing>
 80044d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fede 	bl	800429c <LL_ADC_INJ_IsConversionOngoing>
 80044e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d14a      	bne.n	800457e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d147      	bne.n	800457e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	7d1b      	ldrb	r3, [r3, #20]
 80044f2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	4b2f      	ldr	r3, [pc, #188]	; (80045c0 <HAL_ADC_Init+0x2fc>)
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	69b9      	ldr	r1, [r7, #24]
 800450c:	430b      	orrs	r3, r1
 800450e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004516:	2b01      	cmp	r3, #1
 8004518:	d11b      	bne.n	8004552 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <HAL_ADC_Init+0x300>)
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800452e:	3a01      	subs	r2, #1
 8004530:	0411      	lsls	r1, r2, #16
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004536:	4311      	orrs	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800453c:	4311      	orrs	r1, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004542:	430a      	orrs	r2, r1
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	611a      	str	r2, [r3, #16]
 8004550:	e007      	b.n	8004562 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fb93 	bl	8004ca4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d120      	bne.n	80045c8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	f023 010f 	bic.w	r1, r3, #15
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	1e5a      	subs	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
 800459e:	e01b      	b.n	80045d8 <HAL_ADC_Init+0x314>
 80045a0:	24000000 	.word	0x24000000
 80045a4:	053e2d63 	.word	0x053e2d63
 80045a8:	40022000 	.word	0x40022000
 80045ac:	40022100 	.word	0x40022100
 80045b0:	58026000 	.word	0x58026000
 80045b4:	40022300 	.word	0x40022300
 80045b8:	58026300 	.word	0x58026300
 80045bc:	fff0c003 	.word	0xfff0c003
 80045c0:	ffffbffc 	.word	0xffffbffc
 80045c4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 020f 	bic.w	r2, r2, #15
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f023 0303 	bic.w	r3, r3, #3
 80045e0:	f043 0201 	orr.w	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54
 80045e8:	e007      	b.n	80045fa <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	f043 0210 	orr.w	r2, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3724      	adds	r7, #36	; 0x24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd90      	pop	{r4, r7, pc}

08004604 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b0a1      	sub	sp, #132	; 0x84
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a9d      	ldr	r2, [pc, #628]	; (8004894 <HAL_ADC_ConfigChannel+0x290>)
 800461e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x2a>
 800462a:	2302      	movs	r3, #2
 800462c:	e321      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x66e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fe1b 	bl	8004276 <LL_ADC_REG_IsConversionOngoing>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8306 	bne.w	8004c54 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004650:	2b00      	cmp	r3, #0
 8004652:	d108      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x62>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0e9b      	lsrs	r3, r3, #26
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	2201      	movs	r2, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	e016      	b.n	8004694 <HAL_ADC_ConfigChannel+0x90>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004676:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800467e:	2320      	movs	r3, #32
 8004680:	e003      	b.n	800468a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	2201      	movs	r2, #1
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	69d1      	ldr	r1, [r2, #28]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	430b      	orrs	r3, r1
 80046a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f7ff fd04 	bl	80040bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fddc 	bl	8004276 <LL_ADC_REG_IsConversionOngoing>
 80046be:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fde9 	bl	800429c <LL_ADC_INJ_IsConversionOngoing>
 80046ca:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 80b3 	bne.w	800483a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 80af 	bne.w	800483a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	461a      	mov	r2, r3
 80046ea:	f7ff fd13 	bl	8004114 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046ee:	4b6a      	ldr	r3, [pc, #424]	; (8004898 <HAL_ADC_ConfigChannel+0x294>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80046f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fa:	d10b      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x110>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	e01d      	b.n	8004750 <HAL_ADC_ConfigChannel+0x14c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <HAL_ADC_ConfigChannel+0x136>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	e00a      	b.n	8004750 <HAL_ADC_ConfigChannel+0x14c>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b04      	cmp	r3, #4
 8004758:	d027      	beq.n	80047aa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6919      	ldr	r1, [r3, #16]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004768:	f7ff fc54 	bl	8004014 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6919      	ldr	r1, [r3, #16]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	7e5b      	ldrb	r3, [r3, #25]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d102      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x17e>
 800477c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004780:	e000      	b.n	8004784 <HAL_ADC_ConfigChannel+0x180>
 8004782:	2300      	movs	r3, #0
 8004784:	461a      	mov	r2, r3
 8004786:	f7ff fc7e 	bl	8004086 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6919      	ldr	r1, [r3, #16]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	7e1b      	ldrb	r3, [r3, #24]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x19c>
 800479a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800479e:	e000      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x19e>
 80047a0:	2300      	movs	r3, #0
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7ff fc56 	bl	8004054 <LL_ADC_SetDataRightShift>
 80047a8:	e047      	b.n	800483a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	069b      	lsls	r3, r3, #26
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d107      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047cc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	069b      	lsls	r3, r3, #26
 80047de:	429a      	cmp	r2, r3
 80047e0:	d107      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047f0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	069b      	lsls	r3, r3, #26
 8004802:	429a      	cmp	r2, r3
 8004804:	d107      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004814:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	069b      	lsls	r3, r3, #26
 8004826:	429a      	cmp	r2, r3
 8004828:	d107      	bne.n	800483a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004838:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fd06 	bl	8004250 <LL_ADC_IsEnabled>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 820d 	bne.w	8004c66 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	461a      	mov	r2, r3
 800485a:	f7ff fc87 	bl	800416c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <HAL_ADC_ConfigChannel+0x290>)
 8004864:	4293      	cmp	r3, r2
 8004866:	f040 8133 	bne.w	8004ad0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004876:	2b00      	cmp	r3, #0
 8004878:	d110      	bne.n	800489c <HAL_ADC_ConfigChannel+0x298>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	0e9b      	lsrs	r3, r3, #26
 8004880:	3301      	adds	r3, #1
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2b09      	cmp	r3, #9
 8004888:	bf94      	ite	ls
 800488a:	2301      	movls	r3, #1
 800488c:	2300      	movhi	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	e01e      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x2cc>
 8004892:	bf00      	nop
 8004894:	47ff0000 	.word	0x47ff0000
 8004898:	5c001000 	.word	0x5c001000
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80048aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80048ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80048b4:	2320      	movs	r3, #32
 80048b6:	e003      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80048b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	3301      	adds	r3, #1
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2b09      	cmp	r3, #9
 80048c8:	bf94      	ite	ls
 80048ca:	2301      	movls	r3, #1
 80048cc:	2300      	movhi	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d079      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d107      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x2ec>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0e9b      	lsrs	r3, r3, #26
 80048e6:	3301      	adds	r3, #1
 80048e8:	069b      	lsls	r3, r3, #26
 80048ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ee:	e015      	b.n	800491c <HAL_ADC_ConfigChannel+0x318>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80048fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004900:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004908:	2320      	movs	r3, #32
 800490a:	e003      	b.n	8004914 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800490c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	3301      	adds	r3, #1
 8004916:	069b      	lsls	r3, r3, #26
 8004918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_ADC_ConfigChannel+0x338>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0e9b      	lsrs	r3, r3, #26
 800492e:	3301      	adds	r3, #1
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2101      	movs	r1, #1
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	e017      	b.n	800496c <HAL_ADC_ConfigChannel+0x368>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800494e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004954:	2320      	movs	r3, #32
 8004956:	e003      	b.n	8004960 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3301      	adds	r3, #1
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2101      	movs	r1, #1
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	ea42 0103 	orr.w	r1, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x38e>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	0e9b      	lsrs	r3, r3, #26
 8004982:	3301      	adds	r3, #1
 8004984:	f003 021f 	and.w	r2, r3, #31
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	051b      	lsls	r3, r3, #20
 8004990:	e018      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x3c0>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80049aa:	2320      	movs	r3, #32
 80049ac:	e003      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	3301      	adds	r3, #1
 80049b8:	f003 021f 	and.w	r2, r3, #31
 80049bc:	4613      	mov	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c4:	430b      	orrs	r3, r1
 80049c6:	e07e      	b.n	8004ac6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x3e0>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0e9b      	lsrs	r3, r3, #26
 80049da:	3301      	adds	r3, #1
 80049dc:	069b      	lsls	r3, r3, #26
 80049de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049e2:	e015      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x40c>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	069b      	lsls	r3, r3, #26
 8004a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x42c>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0e9b      	lsrs	r3, r3, #26
 8004a22:	3301      	adds	r3, #1
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2e:	e017      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x45c>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	fa93 f3a3 	rbit	r3, r3
 8004a3c:	61bb      	str	r3, [r7, #24]
  return result;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004a48:	2320      	movs	r3, #32
 8004a4a:	e003      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	ea42 0103 	orr.w	r1, r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x488>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	3301      	adds	r3, #1
 8004a78:	f003 021f 	and.w	r2, r3, #31
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4413      	add	r3, r2
 8004a82:	3b1e      	subs	r3, #30
 8004a84:	051b      	lsls	r3, r3, #20
 8004a86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	e01b      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x4c0>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	60fb      	str	r3, [r7, #12]
  return result;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	e003      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	f003 021f 	and.w	r2, r3, #31
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	3b1e      	subs	r3, #30
 8004abe:	051b      	lsls	r3, r3, #20
 8004ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	6892      	ldr	r2, [r2, #8]
 8004aca:	4619      	mov	r1, r3
 8004acc:	f7ff fb22 	bl	8004114 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f280 80c6 	bge.w	8004c66 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a67      	ldr	r2, [pc, #412]	; (8004c7c <HAL_ADC_ConfigChannel+0x678>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_ADC_ConfigChannel+0x4ea>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a65      	ldr	r2, [pc, #404]	; (8004c80 <HAL_ADC_ConfigChannel+0x67c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x4ee>
 8004aee:	4b65      	ldr	r3, [pc, #404]	; (8004c84 <HAL_ADC_ConfigChannel+0x680>)
 8004af0:	e000      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x4f0>
 8004af2:	4b65      	ldr	r3, [pc, #404]	; (8004c88 <HAL_ADC_ConfigChannel+0x684>)
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fa7f 	bl	8003ff8 <LL_ADC_GetCommonPathInternalCh>
 8004afa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5e      	ldr	r2, [pc, #376]	; (8004c7c <HAL_ADC_ConfigChannel+0x678>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_ADC_ConfigChannel+0x50c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a5d      	ldr	r2, [pc, #372]	; (8004c80 <HAL_ADC_ConfigChannel+0x67c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10e      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x52a>
 8004b10:	485a      	ldr	r0, [pc, #360]	; (8004c7c <HAL_ADC_ConfigChannel+0x678>)
 8004b12:	f7ff fb9d 	bl	8004250 <LL_ADC_IsEnabled>
 8004b16:	4604      	mov	r4, r0
 8004b18:	4859      	ldr	r0, [pc, #356]	; (8004c80 <HAL_ADC_ConfigChannel+0x67c>)
 8004b1a:	f7ff fb99 	bl	8004250 <LL_ADC_IsEnabled>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4323      	orrs	r3, r4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e008      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x53c>
 8004b2e:	4857      	ldr	r0, [pc, #348]	; (8004c8c <HAL_ADC_ConfigChannel+0x688>)
 8004b30:	f7ff fb8e 	bl	8004250 <LL_ADC_IsEnabled>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d07d      	beq.n	8004c40 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a51      	ldr	r2, [pc, #324]	; (8004c90 <HAL_ADC_ConfigChannel+0x68c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d130      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x5ac>
 8004b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d12b      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a4b      	ldr	r2, [pc, #300]	; (8004c8c <HAL_ADC_ConfigChannel+0x688>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f040 8081 	bne.w	8004c66 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a44      	ldr	r2, [pc, #272]	; (8004c7c <HAL_ADC_ConfigChannel+0x678>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_ADC_ConfigChannel+0x574>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a43      	ldr	r2, [pc, #268]	; (8004c80 <HAL_ADC_ConfigChannel+0x67c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d101      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x578>
 8004b78:	4a42      	ldr	r2, [pc, #264]	; (8004c84 <HAL_ADC_ConfigChannel+0x680>)
 8004b7a:	e000      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x57a>
 8004b7c:	4a42      	ldr	r2, [pc, #264]	; (8004c88 <HAL_ADC_ConfigChannel+0x684>)
 8004b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f7ff fa23 	bl	8003fd2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b8c:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_ADC_ConfigChannel+0x690>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	099b      	lsrs	r3, r3, #6
 8004b92:	4a41      	ldr	r2, [pc, #260]	; (8004c98 <HAL_ADC_ConfigChannel+0x694>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	099b      	lsrs	r3, r3, #6
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ba0:	e002      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f9      	bne.n	8004ba2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bae:	e05a      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a39      	ldr	r2, [pc, #228]	; (8004c9c <HAL_ADC_ConfigChannel+0x698>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d11e      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x5f4>
 8004bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d119      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_ADC_ConfigChannel+0x688>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d14b      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <HAL_ADC_ConfigChannel+0x678>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_ADC_ConfigChannel+0x5de>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <HAL_ADC_ConfigChannel+0x67c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x5e2>
 8004be2:	4a28      	ldr	r2, [pc, #160]	; (8004c84 <HAL_ADC_ConfigChannel+0x680>)
 8004be4:	e000      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x5e4>
 8004be6:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <HAL_ADC_ConfigChannel+0x684>)
 8004be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f7ff f9ee 	bl	8003fd2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bf6:	e036      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <HAL_ADC_ConfigChannel+0x69c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d131      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x662>
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d12c      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <HAL_ADC_ConfigChannel+0x688>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d127      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <HAL_ADC_ConfigChannel+0x678>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_ADC_ConfigChannel+0x626>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a16      	ldr	r2, [pc, #88]	; (8004c80 <HAL_ADC_ConfigChannel+0x67c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x62a>
 8004c2a:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <HAL_ADC_ConfigChannel+0x680>)
 8004c2c:	e000      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x62c>
 8004c2e:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <HAL_ADC_ConfigChannel+0x684>)
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7ff f9ca 	bl	8003fd2 <LL_ADC_SetCommonPathInternalCh>
 8004c3e:	e012      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004c52:	e008      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f043 0220 	orr.w	r2, r3, #32
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3784      	adds	r7, #132	; 0x84
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40022100 	.word	0x40022100
 8004c84:	40022300 	.word	0x40022300
 8004c88:	58026300 	.word	0x58026300
 8004c8c:	58026000 	.word	0x58026000
 8004c90:	cb840000 	.word	0xcb840000
 8004c94:	24000000 	.word	0x24000000
 8004c98:	053e2d63 	.word	0x053e2d63
 8004c9c:	c7520000 	.word	0xc7520000
 8004ca0:	cfb80000 	.word	0xcfb80000

08004ca4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a79      	ldr	r2, [pc, #484]	; (8004e98 <ADC_ConfigureBoostMode+0x1f4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <ADC_ConfigureBoostMode+0x1c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a78      	ldr	r2, [pc, #480]	; (8004e9c <ADC_ConfigureBoostMode+0x1f8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d109      	bne.n	8004cd4 <ADC_ConfigureBoostMode+0x30>
 8004cc0:	4b77      	ldr	r3, [pc, #476]	; (8004ea0 <ADC_ConfigureBoostMode+0x1fc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e008      	b.n	8004ce6 <ADC_ConfigureBoostMode+0x42>
 8004cd4:	4b73      	ldr	r3, [pc, #460]	; (8004ea4 <ADC_ConfigureBoostMode+0x200>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01c      	beq.n	8004d24 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004cea:	f002 ffbf 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8004cee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cf8:	d010      	beq.n	8004d1c <ADC_ConfigureBoostMode+0x78>
 8004cfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cfe:	d871      	bhi.n	8004de4 <ADC_ConfigureBoostMode+0x140>
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d04:	d002      	beq.n	8004d0c <ADC_ConfigureBoostMode+0x68>
 8004d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d0a:	d16b      	bne.n	8004de4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	60fb      	str	r3, [r7, #12]
        break;
 8004d1a:	e066      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	089b      	lsrs	r3, r3, #2
 8004d20:	60fb      	str	r3, [r7, #12]
        break;
 8004d22:	e062      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004d24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d28:	f003 ff3c 	bl	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d2c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d36:	d051      	beq.n	8004ddc <ADC_ConfigureBoostMode+0x138>
 8004d38:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d3c:	d854      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d3e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d42:	d047      	beq.n	8004dd4 <ADC_ConfigureBoostMode+0x130>
 8004d44:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d48:	d84e      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d4a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d4e:	d03d      	beq.n	8004dcc <ADC_ConfigureBoostMode+0x128>
 8004d50:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d54:	d848      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d5a:	d033      	beq.n	8004dc4 <ADC_ConfigureBoostMode+0x120>
 8004d5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d60:	d842      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d62:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d66:	d029      	beq.n	8004dbc <ADC_ConfigureBoostMode+0x118>
 8004d68:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d6c:	d83c      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d6e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d72:	d01a      	beq.n	8004daa <ADC_ConfigureBoostMode+0x106>
 8004d74:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d78:	d836      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d7a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d7e:	d014      	beq.n	8004daa <ADC_ConfigureBoostMode+0x106>
 8004d80:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d84:	d830      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8a:	d00e      	beq.n	8004daa <ADC_ConfigureBoostMode+0x106>
 8004d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d90:	d82a      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d96:	d008      	beq.n	8004daa <ADC_ConfigureBoostMode+0x106>
 8004d98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d9c:	d824      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x144>
 8004d9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004da2:	d002      	beq.n	8004daa <ADC_ConfigureBoostMode+0x106>
 8004da4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004da8:	d11e      	bne.n	8004de8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	0c9b      	lsrs	r3, r3, #18
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	60fb      	str	r3, [r7, #12]
        break;
 8004dba:	e016      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	60fb      	str	r3, [r7, #12]
        break;
 8004dc2:	e012      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	60fb      	str	r3, [r7, #12]
        break;
 8004dca:	e00e      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	60fb      	str	r3, [r7, #12]
        break;
 8004dd2:	e00a      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	09db      	lsrs	r3, r3, #7
 8004dd8:	60fb      	str	r3, [r7, #12]
        break;
 8004dda:	e006      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	60fb      	str	r3, [r7, #12]
        break;
 8004de2:	e002      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
        break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004de8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004dea:	f7ff f8af 	bl	8003f4c <HAL_GetREVID>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d815      	bhi.n	8004e24 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a2b      	ldr	r2, [pc, #172]	; (8004ea8 <ADC_ConfigureBoostMode+0x204>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d908      	bls.n	8004e12 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e0e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e10:	e03e      	b.n	8004e90 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e20:	609a      	str	r2, [r3, #8]
}
 8004e22:	e035      	b.n	8004e90 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <ADC_ConfigureBoostMode+0x208>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d808      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e40:	609a      	str	r2, [r3, #8]
}
 8004e42:	e025      	b.n	8004e90 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <ADC_ConfigureBoostMode+0x20c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d80a      	bhi.n	8004e62 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e5e:	609a      	str	r2, [r3, #8]
}
 8004e60:	e016      	b.n	8004e90 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <ADC_ConfigureBoostMode+0x210>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d80a      	bhi.n	8004e80 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	e007      	b.n	8004e90 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e8e:	609a      	str	r2, [r3, #8]
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40022000 	.word	0x40022000
 8004e9c:	40022100 	.word	0x40022100
 8004ea0:	40022300 	.word	0x40022300
 8004ea4:	58026300 	.word	0x58026300
 8004ea8:	01312d00 	.word	0x01312d00
 8004eac:	005f5e10 	.word	0x005f5e10
 8004eb0:	00bebc20 	.word	0x00bebc20
 8004eb4:	017d7840 	.word	0x017d7840

08004eb8 <LL_ADC_IsEnabled>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <LL_ADC_IsEnabled+0x18>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <LL_ADC_IsEnabled+0x1a>
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <LL_ADC_REG_IsConversionOngoing>:
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d101      	bne.n	8004ef6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b09f      	sub	sp, #124	; 0x7c
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0be      	b.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a5c      	ldr	r2, [pc, #368]	; (80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d102      	bne.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f3c:	4b5b      	ldr	r3, [pc, #364]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	e001      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e09d      	b.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff ffb9 	bl	8004ede <LL_ADC_REG_IsConversionOngoing>
 8004f6c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff ffb3 	bl	8004ede <LL_ADC_REG_IsConversionOngoing>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d17f      	bne.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d17c      	bne.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a47      	ldr	r2, [pc, #284]	; (80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a46      	ldr	r2, [pc, #280]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004f98:	4b45      	ldr	r3, [pc, #276]	; (80050b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f9a:	e000      	b.n	8004f9e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f9c:	4b45      	ldr	r3, [pc, #276]	; (80050b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f9e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d039      	beq.n	800501c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3a      	ldr	r2, [pc, #232]	; (80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a38      	ldr	r2, [pc, #224]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d10e      	bne.n	8004fec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004fce:	4836      	ldr	r0, [pc, #216]	; (80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004fd0:	f7ff ff72 	bl	8004eb8 <LL_ADC_IsEnabled>
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	4835      	ldr	r0, [pc, #212]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004fd8:	f7ff ff6e 	bl	8004eb8 <LL_ADC_IsEnabled>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	4323      	orrs	r3, r4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e008      	b.n	8004ffe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004fec:	4832      	ldr	r0, [pc, #200]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fee:	f7ff ff63 	bl	8004eb8 <LL_ADC_IsEnabled>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d047      	beq.n	8005092 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005008:	4013      	ands	r3, r2
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	6811      	ldr	r1, [r2, #0]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	6892      	ldr	r2, [r2, #8]
 8005012:	430a      	orrs	r2, r1
 8005014:	431a      	orrs	r2, r3
 8005016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005018:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800501a:	e03a      	b.n	8005092 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800501c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005026:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1e      	ldr	r2, [pc, #120]	; (80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d10e      	bne.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800503c:	481a      	ldr	r0, [pc, #104]	; (80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800503e:	f7ff ff3b 	bl	8004eb8 <LL_ADC_IsEnabled>
 8005042:	4604      	mov	r4, r0
 8005044:	4819      	ldr	r0, [pc, #100]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005046:	f7ff ff37 	bl	8004eb8 <LL_ADC_IsEnabled>
 800504a:	4603      	mov	r3, r0
 800504c:	4323      	orrs	r3, r4
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e008      	b.n	800506c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800505a:	4817      	ldr	r0, [pc, #92]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800505c:	f7ff ff2c 	bl	8004eb8 <LL_ADC_IsEnabled>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005076:	4013      	ands	r3, r2
 8005078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800507a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800507c:	e009      	b.n	8005092 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005090:	e000      	b.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005092:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800509c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	377c      	adds	r7, #124	; 0x7c
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd90      	pop	{r4, r7, pc}
 80050a8:	40022000 	.word	0x40022000
 80050ac:	40022100 	.word	0x40022100
 80050b0:	40022300 	.word	0x40022300
 80050b4:	58026300 	.word	0x58026300
 80050b8:	58026000 	.word	0x58026000
 80050bc:	fffff0e0 	.word	0xfffff0e0

080050c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <__NVIC_SetPriorityGrouping+0x40>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050dc:	4013      	ands	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <__NVIC_SetPriorityGrouping+0x44>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050ee:	4a04      	ldr	r2, [pc, #16]	; (8005100 <__NVIC_SetPriorityGrouping+0x40>)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	60d3      	str	r3, [r2, #12]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	e000ed00 	.word	0xe000ed00
 8005104:	05fa0000 	.word	0x05fa0000

08005108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <__NVIC_GetPriorityGrouping+0x18>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	f003 0307 	and.w	r3, r3, #7
}
 8005116:	4618      	mov	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800512e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005132:	2b00      	cmp	r3, #0
 8005134:	db0b      	blt.n	800514e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	f003 021f 	and.w	r2, r3, #31
 800513c:	4907      	ldr	r1, [pc, #28]	; (800515c <__NVIC_EnableIRQ+0x38>)
 800513e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2001      	movs	r0, #1
 8005146:	fa00 f202 	lsl.w	r2, r0, r2
 800514a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	e000e100 	.word	0xe000e100

08005160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	6039      	str	r1, [r7, #0]
 800516a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800516c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005170:	2b00      	cmp	r3, #0
 8005172:	db0a      	blt.n	800518a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	490c      	ldr	r1, [pc, #48]	; (80051ac <__NVIC_SetPriority+0x4c>)
 800517a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800517e:	0112      	lsls	r2, r2, #4
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	440b      	add	r3, r1
 8005184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005188:	e00a      	b.n	80051a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	4908      	ldr	r1, [pc, #32]	; (80051b0 <__NVIC_SetPriority+0x50>)
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	3b04      	subs	r3, #4
 8005198:	0112      	lsls	r2, r2, #4
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	440b      	add	r3, r1
 800519e:	761a      	strb	r2, [r3, #24]
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	e000e100 	.word	0xe000e100
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f1c3 0307 	rsb	r3, r3, #7
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	bf28      	it	cs
 80051d2:	2304      	movcs	r3, #4
 80051d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3304      	adds	r3, #4
 80051da:	2b06      	cmp	r3, #6
 80051dc:	d902      	bls.n	80051e4 <NVIC_EncodePriority+0x30>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3b03      	subs	r3, #3
 80051e2:	e000      	b.n	80051e6 <NVIC_EncodePriority+0x32>
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43da      	mvns	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	401a      	ands	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	fa01 f303 	lsl.w	r3, r1, r3
 8005206:	43d9      	mvns	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800520c:	4313      	orrs	r3, r2
         );
}
 800520e:	4618      	mov	r0, r3
 8005210:	3724      	adds	r7, #36	; 0x24
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3b01      	subs	r3, #1
 8005228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800522c:	d301      	bcc.n	8005232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800522e:	2301      	movs	r3, #1
 8005230:	e00f      	b.n	8005252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005232:	4a0a      	ldr	r2, [pc, #40]	; (800525c <SysTick_Config+0x40>)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3b01      	subs	r3, #1
 8005238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800523a:	210f      	movs	r1, #15
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	f7ff ff8e 	bl	8005160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <SysTick_Config+0x40>)
 8005246:	2200      	movs	r2, #0
 8005248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800524a:	4b04      	ldr	r3, [pc, #16]	; (800525c <SysTick_Config+0x40>)
 800524c:	2207      	movs	r2, #7
 800524e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	e000e010 	.word	0xe000e010

08005260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff ff29 	bl	80050c0 <__NVIC_SetPriorityGrouping>
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b086      	sub	sp, #24
 800527a:	af00      	add	r7, sp, #0
 800527c:	4603      	mov	r3, r0
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005284:	f7ff ff40 	bl	8005108 <__NVIC_GetPriorityGrouping>
 8005288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	6978      	ldr	r0, [r7, #20]
 8005290:	f7ff ff90 	bl	80051b4 <NVIC_EncodePriority>
 8005294:	4602      	mov	r2, r0
 8005296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff ff5f 	bl	8005160 <__NVIC_SetPriority>
}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	4603      	mov	r3, r0
 80052b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff ff33 	bl	8005124 <__NVIC_EnableIRQ>
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff ffa4 	bl	800521c <SysTick_Config>
 80052d4:	4603      	mov	r3, r0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e014      	b.n	800531a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	791b      	ldrb	r3, [r3, #4]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7fb fc39 	bl	8000b78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	795b      	ldrb	r3, [r3, #5]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_DAC_ConfigChannel+0x18>
 8005338:	2302      	movs	r3, #2
 800533a:	e11d      	b.n	8005578 <HAL_DAC_ConfigChannel+0x254>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2202      	movs	r2, #2
 8005346:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b04      	cmp	r3, #4
 800534e:	d174      	bne.n	800543a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005350:	f7fe fdcc 	bl	8003eec <HAL_GetTick>
 8005354:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d134      	bne.n	80053c6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800535c:	e011      	b.n	8005382 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800535e:	f7fe fdc5 	bl	8003eec <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d90a      	bls.n	8005382 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f043 0208 	orr.w	r2, r3, #8
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2203      	movs	r2, #3
 800537c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0fa      	b.n	8005578 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005388:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_DAC_ConfigChannel+0x25c>)
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005390:	2001      	movs	r0, #1
 8005392:	f7fe fdb7 	bl	8003f04 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	6992      	ldr	r2, [r2, #24]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
 80053a0:	e01e      	b.n	80053e0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80053a2:	f7fe fda3 	bl	8003eec <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d90a      	bls.n	80053c6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f043 0208 	orr.w	r2, r3, #8
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2203      	movs	r2, #3
 80053c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0d8      	b.n	8005578 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dbe8      	blt.n	80053a2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80053d0:	2001      	movs	r0, #1
 80053d2:	f7fe fd97 	bl	8003f04 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	6992      	ldr	r2, [r2, #24]
 80053de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	ea02 0103 	and.w	r1, r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	409a      	lsls	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	21ff      	movs	r1, #255	; 0xff
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	ea02 0103 	and.w	r1, r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	409a      	lsls	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d11d      	bne.n	800547e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	221f      	movs	r2, #31
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4013      	ands	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2207      	movs	r2, #7
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4013      	ands	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d102      	bne.n	80054a8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	e00f      	b.n	80054c8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d102      	bne.n	80054b6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80054b0:	2301      	movs	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	e008      	b.n	80054c8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80054be:	2301      	movs	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	e001      	b.n	80054c8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6819      	ldr	r1, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43da      	mvns	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	400a      	ands	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43db      	mvns	r3, r3
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4013      	ands	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	22c0      	movs	r2, #192	; 0xc0
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43da      	mvns	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	400a      	ands	r2, r1
 8005568:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20008000 	.word	0x20008000

08005584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	; 0x24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005592:	4b89      	ldr	r3, [pc, #548]	; (80057b8 <HAL_GPIO_Init+0x234>)
 8005594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005596:	e194      	b.n	80058c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	2101      	movs	r1, #1
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8186 	beq.w	80058bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d00b      	beq.n	80055d0 <HAL_GPIO_Init+0x4c>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d007      	beq.n	80055d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055c4:	2b11      	cmp	r3, #17
 80055c6:	d003      	beq.n	80055d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b12      	cmp	r3, #18
 80055ce:	d130      	bne.n	8005632 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	2203      	movs	r2, #3
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4013      	ands	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005606:	2201      	movs	r2, #1
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 0201 	and.w	r2, r3, #1
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4313      	orrs	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	2203      	movs	r2, #3
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4313      	orrs	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d003      	beq.n	8005672 <HAL_GPIO_Init+0xee>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b12      	cmp	r3, #18
 8005670:	d123      	bne.n	80056ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	08da      	lsrs	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3208      	adds	r2, #8
 800567a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	220f      	movs	r2, #15
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	08da      	lsrs	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3208      	adds	r2, #8
 80056b4:	69b9      	ldr	r1, [r7, #24]
 80056b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	2203      	movs	r2, #3
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0203 	and.w	r2, r3, #3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80e0 	beq.w	80058bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_GPIO_Init+0x238>)
 80056fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005702:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <HAL_GPIO_Init+0x238>)
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800570c:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <HAL_GPIO_Init+0x238>)
 800570e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <HAL_GPIO_Init+0x23c>)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	3302      	adds	r3, #2
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	220f      	movs	r2, #15
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <HAL_GPIO_Init+0x240>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d052      	beq.n	80057ec <HAL_GPIO_Init+0x268>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <HAL_GPIO_Init+0x244>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_GPIO_Init+0x22e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <HAL_GPIO_Init+0x248>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d02b      	beq.n	80057ae <HAL_GPIO_Init+0x22a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <HAL_GPIO_Init+0x24c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d025      	beq.n	80057aa <HAL_GPIO_Init+0x226>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <HAL_GPIO_Init+0x250>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <HAL_GPIO_Init+0x222>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <HAL_GPIO_Init+0x254>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d019      	beq.n	80057a2 <HAL_GPIO_Init+0x21e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1a      	ldr	r2, [pc, #104]	; (80057dc <HAL_GPIO_Init+0x258>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_GPIO_Init+0x21a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <HAL_GPIO_Init+0x25c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00d      	beq.n	800579a <HAL_GPIO_Init+0x216>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_GPIO_Init+0x260>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <HAL_GPIO_Init+0x212>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_GPIO_Init+0x264>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d101      	bne.n	8005792 <HAL_GPIO_Init+0x20e>
 800578e:	2309      	movs	r3, #9
 8005790:	e02d      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 8005792:	230a      	movs	r3, #10
 8005794:	e02b      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 8005796:	2308      	movs	r3, #8
 8005798:	e029      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 800579a:	2307      	movs	r3, #7
 800579c:	e027      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 800579e:	2306      	movs	r3, #6
 80057a0:	e025      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057a2:	2305      	movs	r3, #5
 80057a4:	e023      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057a6:	2304      	movs	r3, #4
 80057a8:	e021      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057aa:	2303      	movs	r3, #3
 80057ac:	e01f      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e01d      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e01b      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057b6:	bf00      	nop
 80057b8:	58000080 	.word	0x58000080
 80057bc:	58024400 	.word	0x58024400
 80057c0:	58000400 	.word	0x58000400
 80057c4:	58020000 	.word	0x58020000
 80057c8:	58020400 	.word	0x58020400
 80057cc:	58020800 	.word	0x58020800
 80057d0:	58020c00 	.word	0x58020c00
 80057d4:	58021000 	.word	0x58021000
 80057d8:	58021400 	.word	0x58021400
 80057dc:	58021800 	.word	0x58021800
 80057e0:	58021c00 	.word	0x58021c00
 80057e4:	58022000 	.word	0x58022000
 80057e8:	58022400 	.word	0x58022400
 80057ec:	2300      	movs	r3, #0
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	f002 0203 	and.w	r2, r2, #3
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	4093      	lsls	r3, r2
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057fe:	4938      	ldr	r1, [pc, #224]	; (80058e0 <HAL_GPIO_Init+0x35c>)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	3302      	adds	r3, #2
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	43db      	mvns	r3, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	43db      	mvns	r3, r3
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	4013      	ands	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	3301      	adds	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f ae63 	bne.w	8005598 <HAL_GPIO_Init+0x14>
  }
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	3724      	adds	r7, #36	; 0x24
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	58000400 	.word	0x58000400

080058e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	887b      	ldrh	r3, [r7, #2]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
 8005900:	e001      	b.n	8005906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	807b      	strh	r3, [r7, #2]
 8005920:	4613      	mov	r3, r2
 8005922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005924:	787b      	ldrb	r3, [r7, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005930:	e003      	b.n	800593a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005932:	887b      	ldrh	r3, [r7, #2]
 8005934:	041a      	lsls	r2, r3, #16
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	619a      	str	r2, [r3, #24]
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005948:	b08f      	sub	sp, #60	; 0x3c
 800594a:	af0a      	add	r7, sp, #40	; 0x28
 800594c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e116      	b.n	8005b86 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f00c fb86 	bl	8012084 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2203      	movs	r2, #3
 800597c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f007 ff11 	bl	800d7be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	687e      	ldr	r6, [r7, #4]
 80059a4:	466d      	mov	r5, sp
 80059a6:	f106 0410 	add.w	r4, r6, #16
 80059aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80059ba:	1d33      	adds	r3, r6, #4
 80059bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059be:	6838      	ldr	r0, [r7, #0]
 80059c0:	f007 fddc 	bl	800d57c <USB_CoreInit>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0d7      	b.n	8005b86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f007 feff 	bl	800d7e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
 80059e6:	e04a      	b.n	8005a7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	333d      	adds	r3, #61	; 0x3d
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059fc:	7bfa      	ldrb	r2, [r7, #15]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	333c      	adds	r3, #60	; 0x3c
 8005a0c:	7bfa      	ldrb	r2, [r7, #15]
 8005a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	b298      	uxth	r0, r3
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	3342      	adds	r3, #66	; 0x42
 8005a24:	4602      	mov	r2, r0
 8005a26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a28:	7bfa      	ldrb	r2, [r7, #15]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	333f      	adds	r3, #63	; 0x3f
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a3c:	7bfa      	ldrb	r2, [r7, #15]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	3344      	adds	r3, #68	; 0x44
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a50:	7bfa      	ldrb	r2, [r7, #15]
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	4613      	mov	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3348      	adds	r3, #72	; 0x48
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a64:	7bfa      	ldrb	r2, [r7, #15]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	3350      	adds	r3, #80	; 0x50
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	73fb      	strb	r3, [r7, #15]
 8005a7e:	7bfa      	ldrb	r2, [r7, #15]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d3af      	bcc.n	80059e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	73fb      	strb	r3, [r7, #15]
 8005a8c:	e044      	b.n	8005b18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a8e:	7bfa      	ldrb	r2, [r7, #15]
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005aa4:	7bfa      	ldrb	r2, [r7, #15]
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005ab6:	7bfa      	ldrb	r2, [r7, #15]
 8005ab8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005aba:	7bfa      	ldrb	r2, [r7, #15]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ad0:	7bfa      	ldrb	r2, [r7, #15]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ae6:	7bfa      	ldrb	r2, [r7, #15]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005afc:	7bfa      	ldrb	r2, [r7, #15]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	3301      	adds	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
 8005b18:	7bfa      	ldrb	r2, [r7, #15]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d3b5      	bcc.n	8005a8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	687e      	ldr	r6, [r7, #4]
 8005b2a:	466d      	mov	r5, sp
 8005b2c:	f106 0410 	add.w	r4, r6, #16
 8005b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b40:	1d33      	adds	r3, r6, #4
 8005b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b44:	6838      	ldr	r0, [r7, #0]
 8005b46:	f007 fe75 	bl	800d834 <USB_DevInit>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e014      	b.n	8005b86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d102      	bne.n	8005b7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 f8bf 	bl	8006cf8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f008 fef5 	bl	800e96e <USB_DevDisconnect>

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_PCD_Start+0x1c>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e020      	b.n	8005bec <HAL_PCD_Start+0x5e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d109      	bne.n	8005bce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d005      	beq.n	8005bce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f007 fde2 	bl	800d79c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f008 fea5 	bl	800e92c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b08d      	sub	sp, #52	; 0x34
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f008 ff63 	bl	800ead6 <USB_GetMode>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f040 83ca 	bne.w	80063ac <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f008 fec7 	bl	800e9b0 <USB_ReadInterrupts>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 83c0 	beq.w	80063aa <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f008 febe 	bl	800e9b0 <USB_ReadInterrupts>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d107      	bne.n	8005c4e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695a      	ldr	r2, [r3, #20]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f002 0202 	and.w	r2, r2, #2
 8005c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f008 feac 	bl	800e9b0 <USB_ReadInterrupts>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d161      	bne.n	8005d26 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0210 	bic.w	r2, r2, #16
 8005c70:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f003 020f 	and.w	r2, r3, #15
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	3304      	adds	r3, #4
 8005c90:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	0c5b      	lsrs	r3, r3, #17
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d124      	bne.n	8005ce8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d035      	beq.n	8005d16 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005cb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6a38      	ldr	r0, [r7, #32]
 8005cbe:	f008 fce3 	bl	800e688 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	091b      	lsrs	r3, r3, #4
 8005cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cce:	441a      	add	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	091b      	lsrs	r3, r3, #4
 8005cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ce0:	441a      	add	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	619a      	str	r2, [r3, #24]
 8005ce6:	e016      	b.n	8005d16 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	0c5b      	lsrs	r3, r3, #17
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	2b06      	cmp	r3, #6
 8005cf2:	d110      	bne.n	8005d16 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6a38      	ldr	r0, [r7, #32]
 8005d00:	f008 fcc2 	bl	800e688 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d10:	441a      	add	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0210 	orr.w	r2, r2, #16
 8005d24:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f008 fe40 	bl	800e9b0 <USB_ReadInterrupts>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d3a:	d16e      	bne.n	8005e1a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f008 fe46 	bl	800e9d6 <USB_ReadDevAllOutEpInterrupt>
 8005d4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005d4c:	e062      	b.n	8005e14 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d057      	beq.n	8005e08 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	4611      	mov	r1, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f008 fe6b 	bl	800ea3e <USB_ReadDevOutEPInterrupt>
 8005d68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	461a      	mov	r2, r3
 8005d82:	2301      	movs	r3, #1
 8005d84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fe0b 	bl	80069a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00c      	beq.n	8005db2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da4:	461a      	mov	r2, r3
 8005da6:	2308      	movs	r3, #8
 8005da8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 ff05 	bl	8006bbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2310      	movs	r3, #16
 8005dcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	2320      	movs	r3, #32
 8005de8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	461a      	mov	r2, r3
 8005e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e06:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d199      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f008 fdc6 	bl	800e9b0 <USB_ReadInterrupts>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e2e:	f040 80c0 	bne.w	8005fb2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f008 fde7 	bl	800ea0a <USB_ReadDevAllInEpInterrupt>
 8005e3c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005e42:	e0b2      	b.n	8005faa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80a7 	beq.w	8005f9e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f008 fe0d 	bl	800ea7a <USB_ReadDevInEPInterrupt>
 8005e60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d057      	beq.n	8005f1c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	2201      	movs	r2, #1
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	69f9      	ldr	r1, [r7, #28]
 8005e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d132      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3348      	adds	r3, #72	; 0x48
 8005eba:	6819      	ldr	r1, [r3, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4403      	add	r3, r0
 8005eca:	3344      	adds	r3, #68	; 0x44
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4419      	add	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4403      	add	r3, r0
 8005ede:	3348      	adds	r3, #72	; 0x48
 8005ee0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d113      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x31c>
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3350      	adds	r3, #80	; 0x50
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d108      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f08:	461a      	mov	r2, r3
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	f008 fe16 	bl	800eb3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f00c f935 	bl	8012186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	461a      	mov	r2, r3
 8005f34:	2308      	movs	r3, #8
 8005f36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4e:	461a      	mov	r2, r3
 8005f50:	2310      	movs	r3, #16
 8005f52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2340      	movs	r3, #64	; 0x40
 8005f6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f86:	461a      	mov	r2, r3
 8005f88:	2302      	movs	r3, #2
 8005f8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fc75 	bl	8006888 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f47f af49 	bne.w	8005e44 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f008 fcfa 	bl	800e9b0 <USB_ReadInterrupts>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc6:	d122      	bne.n	800600e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d108      	bne.n	8005ff8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fee:	2100      	movs	r1, #0
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fea5 	bl	8006d40 <HAL_PCDEx_LPM_Callback>
 8005ff6:	e002      	b.n	8005ffe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f00c f93b 	bl	8012274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800600c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f008 fccc 	bl	800e9b0 <USB_ReadInterrupts>
 8006018:	4603      	mov	r3, r0
 800601a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800601e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006022:	d112      	bne.n	800604a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d102      	bne.n	800603a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f00c f8f7 	bl	8012228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006048:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f008 fcae 	bl	800e9b0 <USB_ReadInterrupts>
 8006054:	4603      	mov	r3, r0
 8006056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800605a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800605e:	d121      	bne.n	80060a4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800606e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d111      	bne.n	800609e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006088:	089b      	lsrs	r3, r3, #2
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006094:	2101      	movs	r1, #1
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fe52 	bl	8006d40 <HAL_PCDEx_LPM_Callback>
 800609c:	e002      	b.n	80060a4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f00c f8c2 	bl	8012228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f008 fc81 	bl	800e9b0 <USB_ReadInterrupts>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	f040 80c7 	bne.w	800624a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2110      	movs	r1, #16
 80060d6:	4618      	mov	r0, r3
 80060d8:	f007 fd0a 	bl	800daf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060dc:	2300      	movs	r3, #0
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e0:	e056      	b.n	8006190 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	461a      	mov	r2, r3
 80060f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006110:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006114:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006134:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	461a      	mov	r2, r3
 8006144:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006148:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	69fa      	ldr	r2, [r7, #28]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006164:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006168:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006184:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006188:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	3301      	adds	r3, #1
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006196:	429a      	cmp	r2, r3
 8006198:	d3a3      	bcc.n	80060e2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80061ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d016      	beq.n	80061e4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c6:	f043 030b 	orr.w	r3, r3, #11
 80061ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061dc:	f043 030b 	orr.w	r3, r3, #11
 80061e0:	6453      	str	r3, [r2, #68]	; 0x44
 80061e2:	e015      	b.n	8006210 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	4619      	mov	r1, r3
 80061f4:	f242 032b 	movw	r3, #8235	; 0x202b
 80061f8:	4313      	orrs	r3, r2
 80061fa:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620a:	f043 030b 	orr.w	r3, r3, #11
 800620e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006222:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006234:	461a      	mov	r2, r3
 8006236:	f008 fc81 	bl	800eb3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f008 fbae 	bl	800e9b0 <USB_ReadInterrupts>
 8006254:	4603      	mov	r3, r0
 8006256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800625a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625e:	d124      	bne.n	80062aa <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f008 fc45 	bl	800eaf4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f007 fc9f 	bl	800dbb2 <USB_GetDevSpeed>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681c      	ldr	r4, [r3, #0]
 8006280:	f001 fcf4 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8006284:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	4620      	mov	r0, r4
 8006290:	f007 f9e2 	bl	800d658 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f00b ff9e 	bl	80121d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80062a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f008 fb7e 	bl	800e9b0 <USB_ReadInterrupts>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d10a      	bne.n	80062d4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f00b ff7b 	bl	80121ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f002 0208 	and.w	r2, r2, #8
 80062d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f008 fb69 	bl	800e9b0 <USB_ReadInterrupts>
 80062de:	4603      	mov	r3, r0
 80062e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e8:	d10f      	bne.n	800630a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f00b ffdd 	bl	80122b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f008 fb4e 	bl	800e9b0 <USB_ReadInterrupts>
 8006314:	4603      	mov	r3, r0
 8006316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800631a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800631e:	d10f      	bne.n	8006340 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	b2db      	uxtb	r3, r3
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f00b ffb0 	bl	8012290 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695a      	ldr	r2, [r3, #20]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800633e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f008 fb33 	bl	800e9b0 <USB_ReadInterrupts>
 800634a:	4603      	mov	r3, r0
 800634c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006354:	d10a      	bne.n	800636c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f00b ffbe 	bl	80122d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695a      	ldr	r2, [r3, #20]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800636a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4618      	mov	r0, r3
 8006372:	f008 fb1d 	bl	800e9b0 <USB_ReadInterrupts>
 8006376:	4603      	mov	r3, r0
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b04      	cmp	r3, #4
 800637e:	d115      	bne.n	80063ac <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f00b ffae 	bl	80122f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6859      	ldr	r1, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	e000      	b.n	80063ac <HAL_PCD_IRQHandler+0x7b8>
      return;
 80063aa:	bf00      	nop
    }
  }
}
 80063ac:	3734      	adds	r7, #52	; 0x34
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}

080063b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_PCD_SetAddress+0x1a>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e013      	b.n	80063f4 <HAL_PCD_SetAddress+0x42>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	78fa      	ldrb	r2, [r7, #3]
 80063d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f008 fa7b 	bl	800e8e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	4608      	mov	r0, r1
 8006406:	4611      	mov	r1, r2
 8006408:	461a      	mov	r2, r3
 800640a:	4603      	mov	r3, r0
 800640c:	70fb      	strb	r3, [r7, #3]
 800640e:	460b      	mov	r3, r1
 8006410:	803b      	strh	r3, [r7, #0]
 8006412:	4613      	mov	r3, r2
 8006414:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800641a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800641e:	2b00      	cmp	r3, #0
 8006420:	da0f      	bge.n	8006442 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006422:	78fb      	ldrb	r3, [r7, #3]
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	4613      	mov	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	3338      	adds	r3, #56	; 0x38
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	3304      	adds	r3, #4
 8006438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	705a      	strb	r2, [r3, #1]
 8006440:	e00f      	b.n	8006462 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	f003 020f 	and.w	r2, r3, #15
 8006448:	4613      	mov	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4413      	add	r3, r2
 8006458:	3304      	adds	r3, #4
 800645a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	b2da      	uxtb	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800646e:	883a      	ldrh	r2, [r7, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	78ba      	ldrb	r2, [r7, #2]
 8006478:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800648c:	78bb      	ldrb	r3, [r7, #2]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d102      	bne.n	8006498 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_PCD_EP_Open+0xaa>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e00e      	b.n	80064c4 <HAL_PCD_EP_Open+0xc8>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f007 fba1 	bl	800dbfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80064c2:	7afb      	ldrb	r3, [r7, #11]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	da0f      	bge.n	8006500 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	f003 020f 	and.w	r2, r3, #15
 80064e6:	4613      	mov	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	1a9b      	subs	r3, r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	3338      	adds	r3, #56	; 0x38
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4413      	add	r3, r2
 80064f4:	3304      	adds	r3, #4
 80064f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	705a      	strb	r2, [r3, #1]
 80064fe:	e00f      	b.n	8006520 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	f003 020f 	and.w	r2, r3, #15
 8006506:	4613      	mov	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	3304      	adds	r3, #4
 8006518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	b2da      	uxtb	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_PCD_EP_Close+0x6e>
 8006536:	2302      	movs	r3, #2
 8006538:	e00e      	b.n	8006558 <HAL_PCD_EP_Close+0x8c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	4618      	mov	r0, r3
 800654a:	f007 fbdf 	bl	800dd0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	607a      	str	r2, [r7, #4]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	460b      	mov	r3, r1
 800656e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006570:	7afb      	ldrb	r3, [r7, #11]
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	3304      	adds	r3, #4
 8006588:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d102      	bne.n	80065bc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	6979      	ldr	r1, [r7, #20]
 80065d4:	f007 fec2 	bl	800e35c <USB_EP0StartXfer>
 80065d8:	e008      	b.n	80065ec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	6979      	ldr	r1, [r7, #20]
 80065e8:	f007 fc6c 	bl	800dec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	f003 020f 	and.w	r2, r3, #15
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006618:	681b      	ldr	r3, [r3, #0]
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
 8006632:	460b      	mov	r3, r1
 8006634:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	f003 020f 	and.w	r2, r3, #15
 800663c:	4613      	mov	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	3338      	adds	r3, #56	; 0x38
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	3304      	adds	r3, #4
 800664c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2200      	movs	r2, #0
 800665e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2201      	movs	r2, #1
 8006664:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006666:	7afb      	ldrb	r3, [r7, #11]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	b2da      	uxtb	r2, r3
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d102      	bne.n	8006680 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006680:	7afb      	ldrb	r3, [r7, #11]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	2b00      	cmp	r3, #0
 8006688:	d109      	bne.n	800669e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	6979      	ldr	r1, [r7, #20]
 8006698:	f007 fe60 	bl	800e35c <USB_EP0StartXfer>
 800669c:	e008      	b.n	80066b0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	6979      	ldr	r1, [r7, #20]
 80066ac:	f007 fc0a 	bl	800dec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d901      	bls.n	80066d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e050      	b.n	800677a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	da0f      	bge.n	8006700 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	f003 020f 	and.w	r2, r3, #15
 80066e6:	4613      	mov	r3, r2
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	3338      	adds	r3, #56	; 0x38
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4413      	add	r3, r2
 80066f4:	3304      	adds	r3, #4
 80066f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	705a      	strb	r2, [r3, #1]
 80066fe:	e00d      	b.n	800671c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	4613      	mov	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	3304      	adds	r3, #4
 8006714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	b2da      	uxtb	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_PCD_EP_SetStall+0x82>
 8006738:	2302      	movs	r3, #2
 800673a:	e01e      	b.n	800677a <HAL_PCD_EP_SetStall+0xc0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68f9      	ldr	r1, [r7, #12]
 800674a:	4618      	mov	r0, r3
 800674c:	f007 fff4 	bl	800e738 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	b2d9      	uxtb	r1, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800676a:	461a      	mov	r2, r3
 800676c:	f008 f9e6 	bl	800eb3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d901      	bls.n	80067a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e042      	b.n	8006826 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da0f      	bge.n	80067c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 020f 	and.w	r2, r3, #15
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	3338      	adds	r3, #56	; 0x38
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4413      	add	r3, r2
 80067bc:	3304      	adds	r3, #4
 80067be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	705a      	strb	r2, [r3, #1]
 80067c6:	e00f      	b.n	80067e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	f003 020f 	and.w	r2, r3, #15
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	3304      	adds	r3, #4
 80067e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_PCD_EP_ClrStall+0x86>
 8006804:	2302      	movs	r3, #2
 8006806:	e00e      	b.n	8006826 <HAL_PCD_EP_ClrStall+0xa4>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68f9      	ldr	r1, [r7, #12]
 8006816:	4618      	mov	r0, r3
 8006818:	f007 fffc 	bl	800e814 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_PCD_EP_Flush+0x1a>
 8006844:	2302      	movs	r3, #2
 8006846:	e01b      	b.n	8006880 <HAL_PCD_EP_Flush+0x52>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8006850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006854:	2b00      	cmp	r3, #0
 8006856:	da09      	bge.n	800686c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f007 f943 	bl	800daf0 <USB_FlushTxFifo>
 800686a:	e004      	b.n	8006876 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4618      	mov	r0, r3
 8006872:	f007 f963 	bl	800db3c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	3338      	adds	r3, #56	; 0x38
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	4413      	add	r3, r2
 80068ac:	3304      	adds	r3, #4
 80068ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d901      	bls.n	80068c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e06c      	b.n	800699a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d902      	bls.n	80068dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	3303      	adds	r3, #3
 80068e0:	089b      	lsrs	r3, r3, #2
 80068e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068e4:	e02b      	b.n	800693e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d902      	bls.n	8006902 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3303      	adds	r3, #3
 8006906:	089b      	lsrs	r3, r3, #2
 8006908:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68d9      	ldr	r1, [r3, #12]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800691a:	b2db      	uxtb	r3, r3
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	4603      	mov	r3, r0
 8006920:	6978      	ldr	r0, [r7, #20]
 8006922:	f007 fe73 	bl	800e60c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	441a      	add	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	b29b      	uxth	r3, r3
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	429a      	cmp	r2, r3
 8006952:	d809      	bhi.n	8006968 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800695c:	429a      	cmp	r2, r3
 800695e:	d203      	bcs.n	8006968 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1be      	bne.n	80068e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	695a      	ldr	r2, [r3, #20]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	429a      	cmp	r2, r3
 8006972:	d811      	bhi.n	8006998 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	2201      	movs	r2, #1
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	43db      	mvns	r3, r3
 800698e:	6939      	ldr	r1, [r7, #16]
 8006990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006994:	4013      	ands	r3, r2
 8006996:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3720      	adds	r7, #32
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	333c      	adds	r3, #60	; 0x3c
 80069bc:	3304      	adds	r3, #4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	f040 80a0 	bne.w	8006b1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d015      	beq.n	8006a12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4a72      	ldr	r2, [pc, #456]	; (8006bb4 <PCD_EP_OutXfrComplete_int+0x210>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	f240 80dd 	bls.w	8006baa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80d7 	beq.w	8006baa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0e:	6093      	str	r3, [r2, #8]
 8006a10:	e0cb      	b.n	8006baa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	461a      	mov	r2, r3
 8006a2a:	2320      	movs	r3, #32
 8006a2c:	6093      	str	r3, [r2, #8]
 8006a2e:	e0bc      	b.n	8006baa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 80b7 	bne.w	8006baa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a5d      	ldr	r2, [pc, #372]	; (8006bb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d90f      	bls.n	8006a64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a60:	6093      	str	r3, [r2, #8]
 8006a62:	e0a2      	b.n	8006baa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	1a9b      	subs	r3, r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	0159      	lsls	r1, r3, #5
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	440b      	add	r3, r1
 8006a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006a8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4403      	add	r3, r0
 8006a9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006a9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	1a9b      	subs	r3, r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4403      	add	r3, r0
 8006ac2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4419      	add	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4403      	add	r3, r0
 8006ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006adc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d114      	bne.n	8006b0e <PCD_EP_OutXfrComplete_int+0x16a>
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	1a9b      	subs	r3, r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d108      	bne.n	8006b0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b06:	461a      	mov	r2, r3
 8006b08:	2101      	movs	r1, #1
 8006b0a:	f008 f817 	bl	800eb3c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f00b fb1b 	bl	8012150 <HAL_PCD_DataOutStageCallback>
 8006b1a:	e046      	b.n	8006baa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <PCD_EP_OutXfrComplete_int+0x214>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d124      	bne.n	8006b6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b40:	6093      	str	r3, [r2, #8]
 8006b42:	e032      	b.n	8006baa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d008      	beq.n	8006b60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f00b faf2 	bl	8012150 <HAL_PCD_DataOutStageCallback>
 8006b6c:	e01d      	b.n	8006baa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d114      	bne.n	8006b9e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d108      	bne.n	8006b9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b96:	461a      	mov	r2, r3
 8006b98:	2100      	movs	r1, #0
 8006b9a:	f007 ffcf 	bl	800eb3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f00b fad3 	bl	8012150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	4f54300a 	.word	0x4f54300a
 8006bb8:	4f54310a 	.word	0x4f54310a

08006bbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	333c      	adds	r3, #60	; 0x3c
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <PCD_EP_OutSetupPacket_int+0x88>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d90e      	bls.n	8006c10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f00b fa8b 	bl	801212c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a0a      	ldr	r2, [pc, #40]	; (8006c44 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d90c      	bls.n	8006c38 <PCD_EP_OutSetupPacket_int+0x7c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d108      	bne.n	8006c38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c30:	461a      	mov	r2, r3
 8006c32:	2101      	movs	r1, #1
 8006c34:	f007 ff82 	bl	800eb3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	4f54300a 	.word	0x4f54300a

08006c48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
 8006c54:	4613      	mov	r3, r2
 8006c56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d107      	bne.n	8006c76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c66:	883b      	ldrh	r3, [r7, #0]
 8006c68:	0419      	lsls	r1, r3, #16
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
 8006c74:	e028      	b.n	8006cc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4413      	add	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	e00d      	b.n	8006ca6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	3340      	adds	r3, #64	; 0x40
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	0c1b      	lsrs	r3, r3, #16
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	73fb      	strb	r3, [r7, #15]
 8006ca6:	7bfa      	ldrb	r2, [r7, #15]
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d3ec      	bcc.n	8006c8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006cb0:	883b      	ldrh	r3, [r7, #0]
 8006cb2:	0418      	lsls	r0, r3, #16
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	4302      	orrs	r2, r0
 8006cc0:	3340      	adds	r3, #64	; 0x40
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <HAL_PCDEx_ActivateLPM+0x44>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	10000003 	.word	0x10000003

08006d40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006d60:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d00a      	beq.n	8006d82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d6c:	4b16      	ldr	r3, [pc, #88]	; (8006dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d001      	beq.n	8006d7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e01f      	b.n	8006dbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e01d      	b.n	8006dbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d82:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f023 0207 	bic.w	r2, r3, #7
 8006d8a:	490f      	ldr	r1, [pc, #60]	; (8006dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d92:	f7fd f8ab 	bl	8003eec <HAL_GetTick>
 8006d96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d98:	e009      	b.n	8006dae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d9a:	f7fd f8a7 	bl	8003eec <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006da8:	d901      	bls.n	8006dae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e007      	b.n	8006dbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dae:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <HAL_PWREx_ConfigSupply+0x70>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dba:	d1ee      	bne.n	8006d9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	58024800 	.word	0x58024800

08006dcc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4a04      	ldr	r2, [pc, #16]	; (8006de8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dda:	60d3      	str	r3, [r2, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	58024800 	.word	0x58024800

08006dec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08c      	sub	sp, #48	; 0x30
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e3ff      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8087 	beq.w	8006f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e0c:	4b99      	ldr	r3, [pc, #612]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e16:	4b97      	ldr	r3, [pc, #604]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	d007      	beq.n	8006e32 <HAL_RCC_OscConfig+0x46>
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	2b18      	cmp	r3, #24
 8006e26:	d110      	bne.n	8006e4a <HAL_RCC_OscConfig+0x5e>
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d10b      	bne.n	8006e4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e32:	4b90      	ldr	r3, [pc, #576]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d06c      	beq.n	8006f18 <HAL_RCC_OscConfig+0x12c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d168      	bne.n	8006f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e3d9      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e52:	d106      	bne.n	8006e62 <HAL_RCC_OscConfig+0x76>
 8006e54:	4b87      	ldr	r3, [pc, #540]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a86      	ldr	r2, [pc, #536]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	e02e      	b.n	8006ec0 <HAL_RCC_OscConfig+0xd4>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10c      	bne.n	8006e84 <HAL_RCC_OscConfig+0x98>
 8006e6a:	4b82      	ldr	r3, [pc, #520]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a81      	ldr	r2, [pc, #516]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	4b7f      	ldr	r3, [pc, #508]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a7e      	ldr	r2, [pc, #504]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	e01d      	b.n	8006ec0 <HAL_RCC_OscConfig+0xd4>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_RCC_OscConfig+0xbc>
 8006e8e:	4b79      	ldr	r3, [pc, #484]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a78      	ldr	r2, [pc, #480]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	4b76      	ldr	r3, [pc, #472]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a75      	ldr	r2, [pc, #468]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e00b      	b.n	8006ec0 <HAL_RCC_OscConfig+0xd4>
 8006ea8:	4b72      	ldr	r3, [pc, #456]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a71      	ldr	r2, [pc, #452]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	4b6f      	ldr	r3, [pc, #444]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a6e      	ldr	r2, [pc, #440]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d013      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec8:	f7fd f810 	bl	8003eec <HAL_GetTick>
 8006ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ed0:	f7fd f80c 	bl	8003eec <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b64      	cmp	r3, #100	; 0x64
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e38d      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ee2:	4b64      	ldr	r3, [pc, #400]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCC_OscConfig+0xe4>
 8006eee:	e014      	b.n	8006f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef0:	f7fc fffc 	bl	8003eec <HAL_GetTick>
 8006ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ef8:	f7fc fff8 	bl	8003eec <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b64      	cmp	r3, #100	; 0x64
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e379      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f0a:	4b5a      	ldr	r3, [pc, #360]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x10c>
 8006f16:	e000      	b.n	8006f1a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 80ae 	beq.w	8007084 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f28:	4b52      	ldr	r3, [pc, #328]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f32:	4b50      	ldr	r3, [pc, #320]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <HAL_RCC_OscConfig+0x162>
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	2b18      	cmp	r3, #24
 8006f42:	d13a      	bne.n	8006fba <HAL_RCC_OscConfig+0x1ce>
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d135      	bne.n	8006fba <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f4e:	4b49      	ldr	r3, [pc, #292]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <HAL_RCC_OscConfig+0x17a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e34b      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f66:	f7fc fff1 	bl	8003f4c <HAL_GetREVID>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d817      	bhi.n	8006fa4 <HAL_RCC_OscConfig+0x1b8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d108      	bne.n	8006f8e <HAL_RCC_OscConfig+0x1a2>
 8006f7c:	4b3d      	ldr	r3, [pc, #244]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f84:	4a3b      	ldr	r2, [pc, #236]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f8a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f8c:	e07a      	b.n	8007084 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f8e:	4b39      	ldr	r3, [pc, #228]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	031b      	lsls	r3, r3, #12
 8006f9c:	4935      	ldr	r1, [pc, #212]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fa2:	e06f      	b.n	8007084 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa4:	4b33      	ldr	r3, [pc, #204]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	061b      	lsls	r3, r3, #24
 8006fb2:	4930      	ldr	r1, [pc, #192]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fb8:	e064      	b.n	8007084 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d045      	beq.n	800704e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fc2:	4b2c      	ldr	r3, [pc, #176]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 0219 	bic.w	r2, r3, #25
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	4929      	ldr	r1, [pc, #164]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fc ff8a 	bl	8003eec <HAL_GetTick>
 8006fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fdc:	f7fc ff86 	bl	8003eec <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e307      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fee:	4b21      	ldr	r3, [pc, #132]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0f0      	beq.n	8006fdc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ffa:	f7fc ffa7 	bl	8003f4c <HAL_GetREVID>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f241 0203 	movw	r2, #4099	; 0x1003
 8007004:	4293      	cmp	r3, r2
 8007006:	d817      	bhi.n	8007038 <HAL_RCC_OscConfig+0x24c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d108      	bne.n	8007022 <HAL_RCC_OscConfig+0x236>
 8007010:	4b18      	ldr	r3, [pc, #96]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007018:	4a16      	ldr	r2, [pc, #88]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 800701a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800701e:	6053      	str	r3, [r2, #4]
 8007020:	e030      	b.n	8007084 <HAL_RCC_OscConfig+0x298>
 8007022:	4b14      	ldr	r3, [pc, #80]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	031b      	lsls	r3, r3, #12
 8007030:	4910      	ldr	r1, [pc, #64]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8007032:	4313      	orrs	r3, r2
 8007034:	604b      	str	r3, [r1, #4]
 8007036:	e025      	b.n	8007084 <HAL_RCC_OscConfig+0x298>
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	061b      	lsls	r3, r3, #24
 8007046:	490b      	ldr	r1, [pc, #44]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8007048:	4313      	orrs	r3, r2
 800704a:	604b      	str	r3, [r1, #4]
 800704c:	e01a      	b.n	8007084 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800704e:	4b09      	ldr	r3, [pc, #36]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a08      	ldr	r2, [pc, #32]	; (8007074 <HAL_RCC_OscConfig+0x288>)
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705a:	f7fc ff47 	bl	8003eec <HAL_GetTick>
 800705e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007060:	e00a      	b.n	8007078 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007062:	f7fc ff43 	bl	8003eec <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d903      	bls.n	8007078 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e2c4      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
 8007074:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007078:	4ba4      	ldr	r3, [pc, #656]	; (800730c <HAL_RCC_OscConfig+0x520>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ee      	bne.n	8007062 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80a9 	beq.w	80071e4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007092:	4b9e      	ldr	r3, [pc, #632]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800709a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800709c:	4b9b      	ldr	r3, [pc, #620]	; (800730c <HAL_RCC_OscConfig+0x520>)
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d007      	beq.n	80070b8 <HAL_RCC_OscConfig+0x2cc>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b18      	cmp	r3, #24
 80070ac:	d13a      	bne.n	8007124 <HAL_RCC_OscConfig+0x338>
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d135      	bne.n	8007124 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070b8:	4b94      	ldr	r3, [pc, #592]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d005      	beq.n	80070d0 <HAL_RCC_OscConfig+0x2e4>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d001      	beq.n	80070d0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e296      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070d0:	f7fc ff3c 	bl	8003f4c <HAL_GetREVID>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80070da:	4293      	cmp	r3, r2
 80070dc:	d817      	bhi.n	800710e <HAL_RCC_OscConfig+0x322>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d108      	bne.n	80070f8 <HAL_RCC_OscConfig+0x30c>
 80070e6:	4b89      	ldr	r3, [pc, #548]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070ee:	4a87      	ldr	r2, [pc, #540]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80070f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070f6:	e075      	b.n	80071e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070f8:	4b84      	ldr	r3, [pc, #528]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	069b      	lsls	r3, r3, #26
 8007106:	4981      	ldr	r1, [pc, #516]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007108:	4313      	orrs	r3, r2
 800710a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800710c:	e06a      	b.n	80071e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800710e:	4b7f      	ldr	r3, [pc, #508]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	497b      	ldr	r1, [pc, #492]	; (800730c <HAL_RCC_OscConfig+0x520>)
 800711e:	4313      	orrs	r3, r2
 8007120:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007122:	e05f      	b.n	80071e4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d042      	beq.n	80071b2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800712c:	4b77      	ldr	r3, [pc, #476]	; (800730c <HAL_RCC_OscConfig+0x520>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a76      	ldr	r2, [pc, #472]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fc fed8 	bl	8003eec <HAL_GetTick>
 800713c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007140:	f7fc fed4 	bl	8003eec <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e255      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007152:	4b6e      	ldr	r3, [pc, #440]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800715e:	f7fc fef5 	bl	8003f4c <HAL_GetREVID>
 8007162:	4603      	mov	r3, r0
 8007164:	f241 0203 	movw	r2, #4099	; 0x1003
 8007168:	4293      	cmp	r3, r2
 800716a:	d817      	bhi.n	800719c <HAL_RCC_OscConfig+0x3b0>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	2b20      	cmp	r3, #32
 8007172:	d108      	bne.n	8007186 <HAL_RCC_OscConfig+0x39a>
 8007174:	4b65      	ldr	r3, [pc, #404]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800717c:	4a63      	ldr	r2, [pc, #396]	; (800730c <HAL_RCC_OscConfig+0x520>)
 800717e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007182:	6053      	str	r3, [r2, #4]
 8007184:	e02e      	b.n	80071e4 <HAL_RCC_OscConfig+0x3f8>
 8007186:	4b61      	ldr	r3, [pc, #388]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	069b      	lsls	r3, r3, #26
 8007194:	495d      	ldr	r1, [pc, #372]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007196:	4313      	orrs	r3, r2
 8007198:	604b      	str	r3, [r1, #4]
 800719a:	e023      	b.n	80071e4 <HAL_RCC_OscConfig+0x3f8>
 800719c:	4b5b      	ldr	r3, [pc, #364]	; (800730c <HAL_RCC_OscConfig+0x520>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	4958      	ldr	r1, [pc, #352]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60cb      	str	r3, [r1, #12]
 80071b0:	e018      	b.n	80071e4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071b2:	4b56      	ldr	r3, [pc, #344]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a55      	ldr	r2, [pc, #340]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80071b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071be:	f7fc fe95 	bl	8003eec <HAL_GetTick>
 80071c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071c6:	f7fc fe91 	bl	8003eec <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e212      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071d8:	4b4c      	ldr	r3, [pc, #304]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f0      	bne.n	80071c6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d036      	beq.n	800725e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d019      	beq.n	800722c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f8:	4b44      	ldr	r3, [pc, #272]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80071fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fc:	4a43      	ldr	r2, [pc, #268]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80071fe:	f043 0301 	orr.w	r3, r3, #1
 8007202:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007204:	f7fc fe72 	bl	8003eec <HAL_GetTick>
 8007208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800720c:	f7fc fe6e 	bl	8003eec <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e1ef      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800721e:	4b3b      	ldr	r3, [pc, #236]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f0      	beq.n	800720c <HAL_RCC_OscConfig+0x420>
 800722a:	e018      	b.n	800725e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800722c:	4b37      	ldr	r3, [pc, #220]	; (800730c <HAL_RCC_OscConfig+0x520>)
 800722e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007230:	4a36      	ldr	r2, [pc, #216]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007232:	f023 0301 	bic.w	r3, r3, #1
 8007236:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007238:	f7fc fe58 	bl	8003eec <HAL_GetTick>
 800723c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007240:	f7fc fe54 	bl	8003eec <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e1d5      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007252:	4b2e      	ldr	r3, [pc, #184]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1f0      	bne.n	8007240 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d036      	beq.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d019      	beq.n	80072a6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007272:	4b26      	ldr	r3, [pc, #152]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a25      	ldr	r2, [pc, #148]	; (800730c <HAL_RCC_OscConfig+0x520>)
 8007278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800727c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800727e:	f7fc fe35 	bl	8003eec <HAL_GetTick>
 8007282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007284:	e008      	b.n	8007298 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007286:	f7fc fe31 	bl	8003eec <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e1b2      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007298:	4b1c      	ldr	r3, [pc, #112]	; (800730c <HAL_RCC_OscConfig+0x520>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0f0      	beq.n	8007286 <HAL_RCC_OscConfig+0x49a>
 80072a4:	e018      	b.n	80072d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072a6:	4b19      	ldr	r3, [pc, #100]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a18      	ldr	r2, [pc, #96]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80072ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072b2:	f7fc fe1b 	bl	8003eec <HAL_GetTick>
 80072b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072ba:	f7fc fe17 	bl	8003eec <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e198      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072cc:	4b0f      	ldr	r3, [pc, #60]	; (800730c <HAL_RCC_OscConfig+0x520>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f0      	bne.n	80072ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8085 	beq.w	80073f0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072e6:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <HAL_RCC_OscConfig+0x524>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a09      	ldr	r2, [pc, #36]	; (8007310 <HAL_RCC_OscConfig+0x524>)
 80072ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072f2:	f7fc fdfb 	bl	8003eec <HAL_GetTick>
 80072f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072f8:	e00c      	b.n	8007314 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072fa:	f7fc fdf7 	bl	8003eec <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b64      	cmp	r3, #100	; 0x64
 8007306:	d905      	bls.n	8007314 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e178      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
 800730c:	58024400 	.word	0x58024400
 8007310:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007314:	4b96      	ldr	r3, [pc, #600]	; (8007570 <HAL_RCC_OscConfig+0x784>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0ec      	beq.n	80072fa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d106      	bne.n	8007336 <HAL_RCC_OscConfig+0x54a>
 8007328:	4b92      	ldr	r3, [pc, #584]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	4a91      	ldr	r2, [pc, #580]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6713      	str	r3, [r2, #112]	; 0x70
 8007334:	e02d      	b.n	8007392 <HAL_RCC_OscConfig+0x5a6>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10c      	bne.n	8007358 <HAL_RCC_OscConfig+0x56c>
 800733e:	4b8d      	ldr	r3, [pc, #564]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	4a8c      	ldr	r2, [pc, #560]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6713      	str	r3, [r2, #112]	; 0x70
 800734a:	4b8a      	ldr	r3, [pc, #552]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	4a89      	ldr	r2, [pc, #548]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007350:	f023 0304 	bic.w	r3, r3, #4
 8007354:	6713      	str	r3, [r2, #112]	; 0x70
 8007356:	e01c      	b.n	8007392 <HAL_RCC_OscConfig+0x5a6>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b05      	cmp	r3, #5
 800735e:	d10c      	bne.n	800737a <HAL_RCC_OscConfig+0x58e>
 8007360:	4b84      	ldr	r3, [pc, #528]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007364:	4a83      	ldr	r2, [pc, #524]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007366:	f043 0304 	orr.w	r3, r3, #4
 800736a:	6713      	str	r3, [r2, #112]	; 0x70
 800736c:	4b81      	ldr	r3, [pc, #516]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800736e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007370:	4a80      	ldr	r2, [pc, #512]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	6713      	str	r3, [r2, #112]	; 0x70
 8007378:	e00b      	b.n	8007392 <HAL_RCC_OscConfig+0x5a6>
 800737a:	4b7e      	ldr	r3, [pc, #504]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737e:	4a7d      	ldr	r2, [pc, #500]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	6713      	str	r3, [r2, #112]	; 0x70
 8007386:	4b7b      	ldr	r3, [pc, #492]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738a:	4a7a      	ldr	r2, [pc, #488]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800738c:	f023 0304 	bic.w	r3, r3, #4
 8007390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d015      	beq.n	80073c6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739a:	f7fc fda7 	bl	8003eec <HAL_GetTick>
 800739e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073a0:	e00a      	b.n	80073b8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073a2:	f7fc fda3 	bl	8003eec <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e122      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073b8:	4b6e      	ldr	r3, [pc, #440]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0ee      	beq.n	80073a2 <HAL_RCC_OscConfig+0x5b6>
 80073c4:	e014      	b.n	80073f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c6:	f7fc fd91 	bl	8003eec <HAL_GetTick>
 80073ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073cc:	e00a      	b.n	80073e4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073ce:	f7fc fd8d 	bl	8003eec <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073dc:	4293      	cmp	r3, r2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e10c      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073e4:	4b63      	ldr	r3, [pc, #396]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1ee      	bne.n	80073ce <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8101 	beq.w	80075fc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073fa:	4b5e      	ldr	r3, [pc, #376]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007402:	2b18      	cmp	r3, #24
 8007404:	f000 80bc 	beq.w	8007580 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	2b02      	cmp	r3, #2
 800740e:	f040 8095 	bne.w	800753c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007412:	4b58      	ldr	r3, [pc, #352]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a57      	ldr	r2, [pc, #348]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800741c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741e:	f7fc fd65 	bl	8003eec <HAL_GetTick>
 8007422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007424:	e008      	b.n	8007438 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007426:	f7fc fd61 	bl	8003eec <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e0e2      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007438:	4b4e      	ldr	r3, [pc, #312]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1f0      	bne.n	8007426 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007444:	4b4b      	ldr	r3, [pc, #300]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007448:	4b4b      	ldr	r3, [pc, #300]	; (8007578 <HAL_RCC_OscConfig+0x78c>)
 800744a:	4013      	ands	r3, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007454:	0112      	lsls	r2, r2, #4
 8007456:	430a      	orrs	r2, r1
 8007458:	4946      	ldr	r1, [pc, #280]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800745a:	4313      	orrs	r3, r2
 800745c:	628b      	str	r3, [r1, #40]	; 0x28
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	3b01      	subs	r3, #1
 8007464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746c:	3b01      	subs	r3, #1
 800746e:	025b      	lsls	r3, r3, #9
 8007470:	b29b      	uxth	r3, r3
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	3b01      	subs	r3, #1
 800747a:	041b      	lsls	r3, r3, #16
 800747c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007486:	3b01      	subs	r3, #1
 8007488:	061b      	lsls	r3, r3, #24
 800748a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800748e:	4939      	ldr	r1, [pc, #228]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007490:	4313      	orrs	r3, r2
 8007492:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007494:	4b37      	ldr	r3, [pc, #220]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4a36      	ldr	r2, [pc, #216]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074a0:	4b34      	ldr	r3, [pc, #208]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a4:	4b35      	ldr	r3, [pc, #212]	; (800757c <HAL_RCC_OscConfig+0x790>)
 80074a6:	4013      	ands	r3, r2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80074ac:	00d2      	lsls	r2, r2, #3
 80074ae:	4931      	ldr	r1, [pc, #196]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074b4:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	f023 020c 	bic.w	r2, r3, #12
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	492c      	ldr	r1, [pc, #176]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074c6:	4b2b      	ldr	r3, [pc, #172]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	f023 0202 	bic.w	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d2:	4928      	ldr	r1, [pc, #160]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074d8:	4b26      	ldr	r3, [pc, #152]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	4a25      	ldr	r2, [pc, #148]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e4:	4b23      	ldr	r3, [pc, #140]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	4a22      	ldr	r2, [pc, #136]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074f0:	4b20      	ldr	r3, [pc, #128]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	4a1f      	ldr	r2, [pc, #124]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80074fc:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007502:	f043 0301 	orr.w	r3, r3, #1
 8007506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007508:	4b1a      	ldr	r3, [pc, #104]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a19      	ldr	r2, [pc, #100]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800750e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fc fcea 	bl	8003eec <HAL_GetTick>
 8007518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800751c:	f7fc fce6 	bl	8003eec <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e067      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800752e:	4b11      	ldr	r3, [pc, #68]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f0      	beq.n	800751c <HAL_RCC_OscConfig+0x730>
 800753a:	e05f      	b.n	80075fc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800753c:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0c      	ldr	r2, [pc, #48]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007548:	f7fc fcd0 	bl	8003eec <HAL_GetTick>
 800754c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007550:	f7fc fccc 	bl	8003eec <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e04d      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007562:	4b04      	ldr	r3, [pc, #16]	; (8007574 <HAL_RCC_OscConfig+0x788>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f0      	bne.n	8007550 <HAL_RCC_OscConfig+0x764>
 800756e:	e045      	b.n	80075fc <HAL_RCC_OscConfig+0x810>
 8007570:	58024800 	.word	0x58024800
 8007574:	58024400 	.word	0x58024400
 8007578:	fffffc0c 	.word	0xfffffc0c
 800757c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007580:	4b21      	ldr	r3, [pc, #132]	; (8007608 <HAL_RCC_OscConfig+0x81c>)
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007586:	4b20      	ldr	r3, [pc, #128]	; (8007608 <HAL_RCC_OscConfig+0x81c>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	2b01      	cmp	r3, #1
 8007592:	d031      	beq.n	80075f8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f003 0203 	and.w	r2, r3, #3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800759e:	429a      	cmp	r2, r3
 80075a0:	d12a      	bne.n	80075f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d122      	bne.n	80075f8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075be:	429a      	cmp	r2, r3
 80075c0:	d11a      	bne.n	80075f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	0a5b      	lsrs	r3, r3, #9
 80075c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d111      	bne.n	80075f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	0c1b      	lsrs	r3, r3, #16
 80075d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d108      	bne.n	80075f8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	0e1b      	lsrs	r3, r3, #24
 80075ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3730      	adds	r7, #48	; 0x30
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	58024400 	.word	0x58024400

0800760c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e19c      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007620:	4b8a      	ldr	r3, [pc, #552]	; (800784c <HAL_RCC_ClockConfig+0x240>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d910      	bls.n	8007650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762e:	4b87      	ldr	r3, [pc, #540]	; (800784c <HAL_RCC_ClockConfig+0x240>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 020f 	bic.w	r2, r3, #15
 8007636:	4985      	ldr	r1, [pc, #532]	; (800784c <HAL_RCC_ClockConfig+0x240>)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	4313      	orrs	r3, r2
 800763c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800763e:	4b83      	ldr	r3, [pc, #524]	; (800784c <HAL_RCC_ClockConfig+0x240>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d001      	beq.n	8007650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e184      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d010      	beq.n	800767e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	4b7b      	ldr	r3, [pc, #492]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007668:	429a      	cmp	r2, r3
 800766a:	d908      	bls.n	800767e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800766c:	4b78      	ldr	r3, [pc, #480]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	4975      	ldr	r1, [pc, #468]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 800767a:	4313      	orrs	r3, r2
 800767c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d010      	beq.n	80076ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	4b70      	ldr	r3, [pc, #448]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007696:	429a      	cmp	r2, r3
 8007698:	d908      	bls.n	80076ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800769a:	4b6d      	ldr	r3, [pc, #436]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	496a      	ldr	r1, [pc, #424]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d010      	beq.n	80076da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	4b64      	ldr	r3, [pc, #400]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d908      	bls.n	80076da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076c8:	4b61      	ldr	r3, [pc, #388]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	495e      	ldr	r1, [pc, #376]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d010      	beq.n	8007708 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69da      	ldr	r2, [r3, #28]
 80076ea:	4b59      	ldr	r3, [pc, #356]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d908      	bls.n	8007708 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80076f6:	4b56      	ldr	r3, [pc, #344]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	4953      	ldr	r1, [pc, #332]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007704:	4313      	orrs	r3, r2
 8007706:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d010      	beq.n	8007736 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	4b4d      	ldr	r3, [pc, #308]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	429a      	cmp	r2, r3
 8007722:	d908      	bls.n	8007736 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007724:	4b4a      	ldr	r3, [pc, #296]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f023 020f 	bic.w	r2, r3, #15
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4947      	ldr	r1, [pc, #284]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007732:	4313      	orrs	r3, r2
 8007734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d055      	beq.n	80077ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007742:	4b43      	ldr	r3, [pc, #268]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	4940      	ldr	r1, [pc, #256]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007750:	4313      	orrs	r3, r2
 8007752:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d107      	bne.n	800776c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800775c:	4b3c      	ldr	r3, [pc, #240]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d121      	bne.n	80077ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0f6      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d107      	bne.n	8007784 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007774:	4b36      	ldr	r3, [pc, #216]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d115      	bne.n	80077ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e0ea      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d107      	bne.n	800779c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800778c:	4b30      	ldr	r3, [pc, #192]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e0de      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800779c:	4b2c      	ldr	r3, [pc, #176]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0d6      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077ac:	4b28      	ldr	r3, [pc, #160]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f023 0207 	bic.w	r2, r3, #7
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4925      	ldr	r1, [pc, #148]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077be:	f7fc fb95 	bl	8003eec <HAL_GetTick>
 80077c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c4:	e00a      	b.n	80077dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077c6:	f7fc fb91 	bl	8003eec <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e0be      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077dc:	4b1c      	ldr	r3, [pc, #112]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1eb      	bne.n	80077c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d010      	beq.n	800781c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	4b14      	ldr	r3, [pc, #80]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	429a      	cmp	r2, r3
 8007808:	d208      	bcs.n	800781c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800780a:	4b11      	ldr	r3, [pc, #68]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f023 020f 	bic.w	r2, r3, #15
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	490e      	ldr	r1, [pc, #56]	; (8007850 <HAL_RCC_ClockConfig+0x244>)
 8007818:	4313      	orrs	r3, r2
 800781a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800781c:	4b0b      	ldr	r3, [pc, #44]	; (800784c <HAL_RCC_ClockConfig+0x240>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d214      	bcs.n	8007854 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <HAL_RCC_ClockConfig+0x240>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f023 020f 	bic.w	r2, r3, #15
 8007832:	4906      	ldr	r1, [pc, #24]	; (800784c <HAL_RCC_ClockConfig+0x240>)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	4313      	orrs	r3, r2
 8007838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800783a:	4b04      	ldr	r3, [pc, #16]	; (800784c <HAL_RCC_ClockConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	429a      	cmp	r2, r3
 8007846:	d005      	beq.n	8007854 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e086      	b.n	800795a <HAL_RCC_ClockConfig+0x34e>
 800784c:	52002000 	.word	0x52002000
 8007850:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d010      	beq.n	8007882 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	4b3f      	ldr	r3, [pc, #252]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800786c:	429a      	cmp	r2, r3
 800786e:	d208      	bcs.n	8007882 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007870:	4b3c      	ldr	r3, [pc, #240]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	4939      	ldr	r1, [pc, #228]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 800787e:	4313      	orrs	r3, r2
 8007880:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0308 	and.w	r3, r3, #8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d010      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	695a      	ldr	r2, [r3, #20]
 8007892:	4b34      	ldr	r3, [pc, #208]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800789a:	429a      	cmp	r2, r3
 800789c:	d208      	bcs.n	80078b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800789e:	4b31      	ldr	r3, [pc, #196]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	492e      	ldr	r1, [pc, #184]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0310 	and.w	r3, r3, #16
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d010      	beq.n	80078de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	4b28      	ldr	r3, [pc, #160]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d208      	bcs.n	80078de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078cc:	4b25      	ldr	r3, [pc, #148]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	4922      	ldr	r1, [pc, #136]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d010      	beq.n	800790c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69da      	ldr	r2, [r3, #28]
 80078ee:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d208      	bcs.n	800790c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078fa:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	4917      	ldr	r1, [pc, #92]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007908:	4313      	orrs	r3, r2
 800790a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800790c:	f000 f834 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8007910:	4602      	mov	r2, r0
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	0a1b      	lsrs	r3, r3, #8
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	4912      	ldr	r1, [pc, #72]	; (8007968 <HAL_RCC_ClockConfig+0x35c>)
 800791e:	5ccb      	ldrb	r3, [r1, r3]
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
 8007928:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800792a:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <HAL_RCC_ClockConfig+0x358>)
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	4a0d      	ldr	r2, [pc, #52]	; (8007968 <HAL_RCC_ClockConfig+0x35c>)
 8007934:	5cd3      	ldrb	r3, [r2, r3]
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	fa22 f303 	lsr.w	r3, r2, r3
 8007940:	4a0a      	ldr	r2, [pc, #40]	; (800796c <HAL_RCC_ClockConfig+0x360>)
 8007942:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007944:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <HAL_RCC_ClockConfig+0x364>)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800794a:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <HAL_RCC_ClockConfig+0x368>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7fc fa82 	bl	8003e58 <HAL_InitTick>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	58024400 	.word	0x58024400
 8007968:	0801307c 	.word	0x0801307c
 800796c:	24000004 	.word	0x24000004
 8007970:	24000000 	.word	0x24000000
 8007974:	24000098 	.word	0x24000098

08007978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007978:	b480      	push	{r7}
 800797a:	b089      	sub	sp, #36	; 0x24
 800797c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800797e:	4bb3      	ldr	r3, [pc, #716]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007986:	2b18      	cmp	r3, #24
 8007988:	f200 8155 	bhi.w	8007c36 <HAL_RCC_GetSysClockFreq+0x2be>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <HAL_RCC_GetSysClockFreq+0x1c>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079f9 	.word	0x080079f9
 8007998:	08007c37 	.word	0x08007c37
 800799c:	08007c37 	.word	0x08007c37
 80079a0:	08007c37 	.word	0x08007c37
 80079a4:	08007c37 	.word	0x08007c37
 80079a8:	08007c37 	.word	0x08007c37
 80079ac:	08007c37 	.word	0x08007c37
 80079b0:	08007c37 	.word	0x08007c37
 80079b4:	08007a1f 	.word	0x08007a1f
 80079b8:	08007c37 	.word	0x08007c37
 80079bc:	08007c37 	.word	0x08007c37
 80079c0:	08007c37 	.word	0x08007c37
 80079c4:	08007c37 	.word	0x08007c37
 80079c8:	08007c37 	.word	0x08007c37
 80079cc:	08007c37 	.word	0x08007c37
 80079d0:	08007c37 	.word	0x08007c37
 80079d4:	08007a25 	.word	0x08007a25
 80079d8:	08007c37 	.word	0x08007c37
 80079dc:	08007c37 	.word	0x08007c37
 80079e0:	08007c37 	.word	0x08007c37
 80079e4:	08007c37 	.word	0x08007c37
 80079e8:	08007c37 	.word	0x08007c37
 80079ec:	08007c37 	.word	0x08007c37
 80079f0:	08007c37 	.word	0x08007c37
 80079f4:	08007a2b 	.word	0x08007a2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f8:	4b94      	ldr	r3, [pc, #592]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a04:	4b91      	ldr	r3, [pc, #580]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	08db      	lsrs	r3, r3, #3
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	4a90      	ldr	r2, [pc, #576]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a10:	fa22 f303 	lsr.w	r3, r2, r3
 8007a14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007a16:	e111      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a18:	4b8d      	ldr	r3, [pc, #564]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a1a:	61bb      	str	r3, [r7, #24]
    break;
 8007a1c:	e10e      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a1e:	4b8d      	ldr	r3, [pc, #564]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a20:	61bb      	str	r3, [r7, #24]
    break;
 8007a22:	e10b      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a24:	4b8c      	ldr	r3, [pc, #560]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a26:	61bb      	str	r3, [r7, #24]
    break;
 8007a28:	e108      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a2a:	4b88      	ldr	r3, [pc, #544]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a34:	4b85      	ldr	r3, [pc, #532]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	091b      	lsrs	r3, r3, #4
 8007a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a40:	4b82      	ldr	r3, [pc, #520]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a4a:	4b80      	ldr	r3, [pc, #512]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4e:	08db      	lsrs	r3, r3, #3
 8007a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	fb02 f303 	mul.w	r3, r2, r3
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80e1 	beq.w	8007c30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	f000 8083 	beq.w	8007b7c <HAL_RCC_GetSysClockFreq+0x204>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	f200 80a1 	bhi.w	8007bc0 <HAL_RCC_GetSysClockFreq+0x248>
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_RCC_GetSysClockFreq+0x114>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d056      	beq.n	8007b38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a8a:	e099      	b.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a8c:	4b6f      	ldr	r3, [pc, #444]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02d      	beq.n	8007af4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a98:	4b6c      	ldr	r3, [pc, #432]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	08db      	lsrs	r3, r3, #3
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	4a6b      	ldr	r2, [pc, #428]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac2:	4b62      	ldr	r3, [pc, #392]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ad6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007af2:	e087      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b06:	4b51      	ldr	r3, [pc, #324]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b36:	e065      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4a:	4b40      	ldr	r3, [pc, #256]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b7a:	e043      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8e:	4b2f      	ldr	r3, [pc, #188]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ba2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bbe:	e021      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd2:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007be6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007c04:	4b11      	ldr	r3, [pc, #68]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	0a5b      	lsrs	r3, r3, #9
 8007c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0e:	3301      	adds	r3, #1
 8007c10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	ee07 3a90 	vmov	s15, r3
 8007c18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c28:	ee17 3a90 	vmov	r3, s15
 8007c2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c2e:	e005      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61bb      	str	r3, [r7, #24]
    break;
 8007c34:	e002      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c38:	61bb      	str	r3, [r7, #24]
    break;
 8007c3a:	bf00      	nop
  }

  return sysclockfreq;
 8007c3c:	69bb      	ldr	r3, [r7, #24]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3724      	adds	r7, #36	; 0x24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	03d09000 	.word	0x03d09000
 8007c54:	003d0900 	.word	0x003d0900
 8007c58:	017d7840 	.word	0x017d7840
 8007c5c:	46000000 	.word	0x46000000
 8007c60:	4c742400 	.word	0x4c742400
 8007c64:	4a742400 	.word	0x4a742400
 8007c68:	4bbebc20 	.word	0x4bbebc20

08007c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c72:	f7ff fe81 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8007c76:	4602      	mov	r2, r0
 8007c78:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <HAL_RCC_GetHCLKFreq+0x50>)
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	0a1b      	lsrs	r3, r3, #8
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	490f      	ldr	r1, [pc, #60]	; (8007cc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c84:	5ccb      	ldrb	r3, [r1, r3]
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c90:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <HAL_RCC_GetHCLKFreq+0x50>)
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	4a09      	ldr	r2, [pc, #36]	; (8007cc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c9a:	5cd3      	ldrb	r3, [r2, r3]
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca6:	4a07      	ldr	r2, [pc, #28]	; (8007cc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ca8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007caa:	4a07      	ldr	r2, [pc, #28]	; (8007cc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	0801307c 	.word	0x0801307c
 8007cc4:	24000004 	.word	0x24000004
 8007cc8:	24000000 	.word	0x24000000

08007ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cd0:	f7ff ffcc 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	091b      	lsrs	r3, r3, #4
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	4904      	ldr	r1, [pc, #16]	; (8007cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ce2:	5ccb      	ldrb	r3, [r1, r3]
 8007ce4:	f003 031f 	and.w	r3, r3, #31
 8007ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	58024400 	.word	0x58024400
 8007cf4:	0801307c 	.word	0x0801307c

08007cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007cfc:	f7ff ffb6 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8007d00:	4602      	mov	r2, r0
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	4904      	ldr	r1, [pc, #16]	; (8007d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d0e:	5ccb      	ldrb	r3, [r1, r3]
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	58024400 	.word	0x58024400
 8007d20:	0801307c 	.word	0x0801307c

08007d24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d30:	2300      	movs	r3, #0
 8007d32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d03f      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d48:	d02a      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007d4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d4e:	d824      	bhi.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d54:	d018      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d5a:	d81e      	bhi.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d64:	d007      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007d66:	e018      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d68:	4bab      	ldr	r3, [pc, #684]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4aaa      	ldr	r2, [pc, #680]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d74:	e015      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	2102      	movs	r1, #2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 fff3 	bl	8009d68 <RCCEx_PLL2_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d86:	e00c      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3324      	adds	r3, #36	; 0x24
 8007d8c:	2102      	movs	r1, #2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f002 f89c 	bl	8009ecc <RCCEx_PLL3_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d98:	e003      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d9e:	e000      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d109      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007da8:	4b9b      	ldr	r3, [pc, #620]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db4:	4998      	ldr	r1, [pc, #608]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	650b      	str	r3, [r1, #80]	; 0x50
 8007dba:	e001      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d03d      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d826      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007dd4:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007df1 	.word	0x08007df1
 8007de0:	08007dff 	.word	0x08007dff
 8007de4:	08007e11 	.word	0x08007e11
 8007de8:	08007e29 	.word	0x08007e29
 8007dec:	08007e29 	.word	0x08007e29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df0:	4b89      	ldr	r3, [pc, #548]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4a88      	ldr	r2, [pc, #544]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dfc:	e015      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 ffaf 	bl	8009d68 <RCCEx_PLL2_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e0e:	e00c      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3324      	adds	r3, #36	; 0x24
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f002 f858 	bl	8009ecc <RCCEx_PLL3_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e20:	e003      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]
      break;
 8007e26:	e000      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e30:	4b79      	ldr	r3, [pc, #484]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e34:	f023 0207 	bic.w	r2, r3, #7
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3c:	4976      	ldr	r1, [pc, #472]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	650b      	str	r3, [r1, #80]	; 0x50
 8007e42:	e001      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d042      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5c:	d02b      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e62:	d825      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e64:	2bc0      	cmp	r3, #192	; 0xc0
 8007e66:	d028      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e68:	2bc0      	cmp	r3, #192	; 0xc0
 8007e6a:	d821      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e6c:	2b80      	cmp	r3, #128	; 0x80
 8007e6e:	d016      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007e70:	2b80      	cmp	r3, #128	; 0x80
 8007e72:	d81d      	bhi.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007e78:	2b40      	cmp	r3, #64	; 0x40
 8007e7a:	d007      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007e7c:	e018      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e7e:	4b66      	ldr	r3, [pc, #408]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	4a65      	ldr	r2, [pc, #404]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e8a:	e017      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 ff68 	bl	8009d68 <RCCEx_PLL2_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e9c:	e00e      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3324      	adds	r3, #36	; 0x24
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f002 f811 	bl	8009ecc <RCCEx_PLL3_Config>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007eae:	e005      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb4:	e002      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007eb6:	bf00      	nop
 8007eb8:	e000      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ec2:	4b55      	ldr	r3, [pc, #340]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ece:	4952      	ldr	r1, [pc, #328]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	650b      	str	r3, [r1, #80]	; 0x50
 8007ed4:	e001      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d049      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007eec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ef0:	d030      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ef6:	d82a      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ef8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007efc:	d02c      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007efe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f02:	d824      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f08:	d018      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f0e:	d81e      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f18:	d007      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f1a:	e018      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1c:	4b3e      	ldr	r3, [pc, #248]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	4a3d      	ldr	r2, [pc, #244]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f28:	e017      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 ff19 	bl	8009d68 <RCCEx_PLL2_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f3a:	e00e      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3324      	adds	r3, #36	; 0x24
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 ffc2 	bl	8009ecc <RCCEx_PLL3_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f4c:	e005      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	75fb      	strb	r3, [r7, #23]
      break;
 8007f52:	e002      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f54:	bf00      	nop
 8007f56:	e000      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f60:	4b2d      	ldr	r3, [pc, #180]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f6e:	492a      	ldr	r1, [pc, #168]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	658b      	str	r3, [r1, #88]	; 0x58
 8007f74:	e001      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d04c      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f90:	d030      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f96:	d82a      	bhi.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f9c:	d02c      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007f9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fa2:	d824      	bhi.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa8:	d018      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fae:	d81e      	bhi.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fb8:	d007      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007fba:	e018      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbc:	4b16      	ldr	r3, [pc, #88]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	4a15      	ldr	r2, [pc, #84]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fc8:	e017      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fec9 	bl	8009d68 <RCCEx_PLL2_Config>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007fda:	e00e      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3324      	adds	r3, #36	; 0x24
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 ff72 	bl	8009ecc <RCCEx_PLL3_Config>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fec:	e005      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff2:	e002      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007ff4:	bf00      	nop
 8007ff6:	e000      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10d      	bne.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008000:	4b05      	ldr	r3, [pc, #20]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008004:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800800e:	4902      	ldr	r1, [pc, #8]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008010:	4313      	orrs	r3, r2
 8008012:	658b      	str	r3, [r1, #88]	; 0x58
 8008014:	e004      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008016:	bf00      	nop
 8008018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d032      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008030:	2b30      	cmp	r3, #48	; 0x30
 8008032:	d01c      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008034:	2b30      	cmp	r3, #48	; 0x30
 8008036:	d817      	bhi.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008038:	2b20      	cmp	r3, #32
 800803a:	d00c      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800803c:	2b20      	cmp	r3, #32
 800803e:	d813      	bhi.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008040:	2b00      	cmp	r3, #0
 8008042:	d016      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008044:	2b10      	cmp	r3, #16
 8008046:	d10f      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008048:	4baf      	ldr	r3, [pc, #700]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	4aae      	ldr	r2, [pc, #696]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800804e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008054:	e00e      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3304      	adds	r3, #4
 800805a:	2102      	movs	r1, #2
 800805c:	4618      	mov	r0, r3
 800805e:	f001 fe83 	bl	8009d68 <RCCEx_PLL2_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008066:	e005      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	75fb      	strb	r3, [r7, #23]
      break;
 800806c:	e002      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800807a:	4ba3      	ldr	r3, [pc, #652]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800807c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008086:	49a0      	ldr	r1, [pc, #640]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008088:	4313      	orrs	r3, r2
 800808a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800808c:	e001      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d047      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080a6:	d030      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80080a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ac:	d82a      	bhi.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80080ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080b2:	d02c      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80080b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080b8:	d824      	bhi.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80080ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080be:	d018      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c4:	d81e      	bhi.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80080ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ce:	d007      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80080d0:	e018      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d2:	4b8d      	ldr	r3, [pc, #564]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	4a8c      	ldr	r2, [pc, #560]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080de:	e017      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	2100      	movs	r1, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fe3e 	bl	8009d68 <RCCEx_PLL2_Config>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080f0:	e00e      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3324      	adds	r3, #36	; 0x24
 80080f6:	2100      	movs	r1, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f001 fee7 	bl	8009ecc <RCCEx_PLL3_Config>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008102:	e005      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
      break;
 8008108:	e002      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800810a:	bf00      	nop
 800810c:	e000      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800810e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008116:	4b7c      	ldr	r3, [pc, #496]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008122:	4979      	ldr	r1, [pc, #484]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008124:	4313      	orrs	r3, r2
 8008126:	650b      	str	r3, [r1, #80]	; 0x50
 8008128:	e001      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d049      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008142:	d02e      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008148:	d828      	bhi.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800814a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800814e:	d02a      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008150:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008154:	d822      	bhi.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008156:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800815a:	d026      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x486>
 800815c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008160:	d81c      	bhi.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008166:	d010      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800816c:	d816      	bhi.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d01d      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008176:	d111      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3304      	adds	r3, #4
 800817c:	2101      	movs	r1, #1
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fdf2 	bl	8009d68 <RCCEx_PLL2_Config>
 8008184:	4603      	mov	r3, r0
 8008186:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008188:	e012      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3324      	adds	r3, #36	; 0x24
 800818e:	2101      	movs	r1, #1
 8008190:	4618      	mov	r0, r3
 8008192:	f001 fe9b 	bl	8009ecc <RCCEx_PLL3_Config>
 8008196:	4603      	mov	r3, r0
 8008198:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800819a:	e009      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]
      break;
 80081a0:	e006      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80081a2:	bf00      	nop
 80081a4:	e004      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80081a6:	bf00      	nop
 80081a8:	e002      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80081aa:	bf00      	nop
 80081ac:	e000      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80081ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081b6:	4b54      	ldr	r3, [pc, #336]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081c2:	4951      	ldr	r1, [pc, #324]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	650b      	str	r3, [r1, #80]	; 0x50
 80081c8:	e001      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d04b      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081e4:	d02e      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80081e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081ea:	d828      	bhi.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f0:	d02a      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80081f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f6:	d822      	bhi.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081fc:	d026      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80081fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008202:	d81c      	bhi.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008208:	d010      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800820a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820e:	d816      	bhi.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01d      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008218:	d111      	bne.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3304      	adds	r3, #4
 800821e:	2101      	movs	r1, #1
 8008220:	4618      	mov	r0, r3
 8008222:	f001 fda1 	bl	8009d68 <RCCEx_PLL2_Config>
 8008226:	4603      	mov	r3, r0
 8008228:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800822a:	e012      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3324      	adds	r3, #36	; 0x24
 8008230:	2101      	movs	r1, #1
 8008232:	4618      	mov	r0, r3
 8008234:	f001 fe4a 	bl	8009ecc <RCCEx_PLL3_Config>
 8008238:	4603      	mov	r3, r0
 800823a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800823c:	e009      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	75fb      	strb	r3, [r7, #23]
      break;
 8008242:	e006      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008244:	bf00      	nop
 8008246:	e004      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008248:	bf00      	nop
 800824a:	e002      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800824c:	bf00      	nop
 800824e:	e000      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008258:	4b2b      	ldr	r3, [pc, #172]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800825a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008266:	4928      	ldr	r1, [pc, #160]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008268:	4313      	orrs	r3, r2
 800826a:	658b      	str	r3, [r1, #88]	; 0x58
 800826c:	e001      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d02f      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008286:	d00e      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828c:	d814      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d015      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008296:	d10f      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008298:	4b1b      	ldr	r3, [pc, #108]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	4a1a      	ldr	r2, [pc, #104]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800829e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082a4:	e00c      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	2101      	movs	r1, #1
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 fd5b 	bl	8009d68 <RCCEx_PLL2_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082b6:	e003      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]
      break;
 80082bc:	e000      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80082be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082c6:	4b10      	ldr	r3, [pc, #64]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d2:	490d      	ldr	r1, [pc, #52]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	650b      	str	r3, [r1, #80]	; 0x50
 80082d8:	e001      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d033      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d81c      	bhi.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008333 	.word	0x08008333
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	0800831b 	.word	0x0800831b
 8008304:	08008333 	.word	0x08008333
 8008308:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800830c:	4bb8      	ldr	r3, [pc, #736]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	4ab7      	ldr	r2, [pc, #732]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008318:	e00c      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3304      	adds	r3, #4
 800831e:	2102      	movs	r1, #2
 8008320:	4618      	mov	r0, r3
 8008322:	f001 fd21 	bl	8009d68 <RCCEx_PLL2_Config>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800832a:	e003      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	75fb      	strb	r3, [r7, #23]
      break;
 8008330:	e000      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800833a:	4bad      	ldr	r3, [pc, #692]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800833c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800833e:	f023 0203 	bic.w	r2, r3, #3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	49aa      	ldr	r1, [pc, #680]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008348:	4313      	orrs	r3, r2
 800834a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800834c:	e001      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 8086 	beq.w	800846c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008360:	4ba4      	ldr	r3, [pc, #656]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4aa3      	ldr	r2, [pc, #652]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800836a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800836c:	f7fb fdbe 	bl	8003eec <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008372:	e009      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008374:	f7fb fdba 	bl	8003eec <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b64      	cmp	r3, #100	; 0x64
 8008380:	d902      	bls.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	75fb      	strb	r3, [r7, #23]
        break;
 8008386:	e005      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008388:	4b9a      	ldr	r3, [pc, #616]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0ef      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d166      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800839a:	4b95      	ldr	r3, [pc, #596]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800839c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083a4:	4053      	eors	r3, r2
 80083a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d013      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083ae:	4b90      	ldr	r3, [pc, #576]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083b8:	4b8d      	ldr	r3, [pc, #564]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083bc:	4a8c      	ldr	r2, [pc, #560]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083c4:	4b8a      	ldr	r3, [pc, #552]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c8:	4a89      	ldr	r2, [pc, #548]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80083d0:	4a87      	ldr	r2, [pc, #540]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e0:	d115      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e2:	f7fb fd83 	bl	8003eec <HAL_GetTick>
 80083e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083e8:	e00b      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ea:	f7fb fd7f 	bl	8003eec <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d902      	bls.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	75fb      	strb	r3, [r7, #23]
            break;
 8008400:	e005      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008402:	4b7b      	ldr	r3, [pc, #492]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ed      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d126      	bne.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800841a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800841e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008422:	d10d      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008424:	4b72      	ldr	r3, [pc, #456]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008432:	0919      	lsrs	r1, r3, #4
 8008434:	4b70      	ldr	r3, [pc, #448]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008436:	400b      	ands	r3, r1
 8008438:	496d      	ldr	r1, [pc, #436]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800843a:	4313      	orrs	r3, r2
 800843c:	610b      	str	r3, [r1, #16]
 800843e:	e005      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008440:	4b6b      	ldr	r3, [pc, #428]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	4a6a      	ldr	r2, [pc, #424]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008446:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800844a:	6113      	str	r3, [r2, #16]
 800844c:	4b68      	ldr	r3, [pc, #416]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800844e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800845a:	4965      	ldr	r1, [pc, #404]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800845c:	4313      	orrs	r3, r2
 800845e:	670b      	str	r3, [r1, #112]	; 0x70
 8008460:	e004      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	75bb      	strb	r3, [r7, #22]
 8008466:	e001      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
 800846a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d07e      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800847c:	2b28      	cmp	r3, #40	; 0x28
 800847e:	d867      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008480:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	08008557 	.word	0x08008557
 800848c:	08008551 	.word	0x08008551
 8008490:	08008551 	.word	0x08008551
 8008494:	08008551 	.word	0x08008551
 8008498:	08008551 	.word	0x08008551
 800849c:	08008551 	.word	0x08008551
 80084a0:	08008551 	.word	0x08008551
 80084a4:	08008551 	.word	0x08008551
 80084a8:	0800852d 	.word	0x0800852d
 80084ac:	08008551 	.word	0x08008551
 80084b0:	08008551 	.word	0x08008551
 80084b4:	08008551 	.word	0x08008551
 80084b8:	08008551 	.word	0x08008551
 80084bc:	08008551 	.word	0x08008551
 80084c0:	08008551 	.word	0x08008551
 80084c4:	08008551 	.word	0x08008551
 80084c8:	0800853f 	.word	0x0800853f
 80084cc:	08008551 	.word	0x08008551
 80084d0:	08008551 	.word	0x08008551
 80084d4:	08008551 	.word	0x08008551
 80084d8:	08008551 	.word	0x08008551
 80084dc:	08008551 	.word	0x08008551
 80084e0:	08008551 	.word	0x08008551
 80084e4:	08008551 	.word	0x08008551
 80084e8:	08008557 	.word	0x08008557
 80084ec:	08008551 	.word	0x08008551
 80084f0:	08008551 	.word	0x08008551
 80084f4:	08008551 	.word	0x08008551
 80084f8:	08008551 	.word	0x08008551
 80084fc:	08008551 	.word	0x08008551
 8008500:	08008551 	.word	0x08008551
 8008504:	08008551 	.word	0x08008551
 8008508:	08008557 	.word	0x08008557
 800850c:	08008551 	.word	0x08008551
 8008510:	08008551 	.word	0x08008551
 8008514:	08008551 	.word	0x08008551
 8008518:	08008551 	.word	0x08008551
 800851c:	08008551 	.word	0x08008551
 8008520:	08008551 	.word	0x08008551
 8008524:	08008551 	.word	0x08008551
 8008528:	08008557 	.word	0x08008557
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	2101      	movs	r1, #1
 8008532:	4618      	mov	r0, r3
 8008534:	f001 fc18 	bl	8009d68 <RCCEx_PLL2_Config>
 8008538:	4603      	mov	r3, r0
 800853a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800853c:	e00c      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	3324      	adds	r3, #36	; 0x24
 8008542:	2101      	movs	r1, #1
 8008544:	4618      	mov	r0, r3
 8008546:	f001 fcc1 	bl	8009ecc <RCCEx_PLL3_Config>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800854e:	e003      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	75fb      	strb	r3, [r7, #23]
      break;
 8008554:	e000      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800855e:	4b24      	ldr	r3, [pc, #144]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008562:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800856a:	4921      	ldr	r1, [pc, #132]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800856c:	4313      	orrs	r3, r2
 800856e:	654b      	str	r3, [r1, #84]	; 0x54
 8008570:	e001      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d03e      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008586:	2b05      	cmp	r3, #5
 8008588:	d820      	bhi.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085d3 	.word	0x080085d3
 8008594:	080085a9 	.word	0x080085a9
 8008598:	080085bb 	.word	0x080085bb
 800859c:	080085d3 	.word	0x080085d3
 80085a0:	080085d3 	.word	0x080085d3
 80085a4:	080085d3 	.word	0x080085d3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3304      	adds	r3, #4
 80085ac:	2101      	movs	r1, #1
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 fbda 	bl	8009d68 <RCCEx_PLL2_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80085b8:	e00c      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3324      	adds	r3, #36	; 0x24
 80085be:	2101      	movs	r1, #1
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fc83 	bl	8009ecc <RCCEx_PLL3_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80085ca:	e003      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	75fb      	strb	r3, [r7, #23]
      break;
 80085d0:	e000      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80085d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d110      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80085da:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085de:	f023 0207 	bic.w	r2, r3, #7
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e6:	4902      	ldr	r1, [pc, #8]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	654b      	str	r3, [r1, #84]	; 0x54
 80085ec:	e008      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80085ee:	bf00      	nop
 80085f0:	58024400 	.word	0x58024400
 80085f4:	58024800 	.word	0x58024800
 80085f8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
 80085fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d039      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	2b05      	cmp	r3, #5
 8008614:	d820      	bhi.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	0800865f 	.word	0x0800865f
 8008620:	08008635 	.word	0x08008635
 8008624:	08008647 	.word	0x08008647
 8008628:	0800865f 	.word	0x0800865f
 800862c:	0800865f 	.word	0x0800865f
 8008630:	0800865f 	.word	0x0800865f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3304      	adds	r3, #4
 8008638:	2101      	movs	r1, #1
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fb94 	bl	8009d68 <RCCEx_PLL2_Config>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008644:	e00c      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3324      	adds	r3, #36	; 0x24
 800864a:	2101      	movs	r1, #1
 800864c:	4618      	mov	r0, r3
 800864e:	f001 fc3d 	bl	8009ecc <RCCEx_PLL3_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008656:	e003      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	75fb      	strb	r3, [r7, #23]
      break;
 800865c:	e000      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800865e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008666:	4bb7      	ldr	r3, [pc, #732]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866a:	f023 0207 	bic.w	r2, r3, #7
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008674:	49b3      	ldr	r1, [pc, #716]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008676:	4313      	orrs	r3, r2
 8008678:	658b      	str	r3, [r1, #88]	; 0x58
 800867a:	e001      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d04b      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008696:	d02e      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800869c:	d828      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a2:	d02a      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80086a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a8:	d822      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80086aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086ae:	d026      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80086b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086b4:	d81c      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80086b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ba:	d010      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80086bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c0:	d816      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01d      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80086c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ca:	d111      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	3304      	adds	r3, #4
 80086d0:	2100      	movs	r1, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 fb48 	bl	8009d68 <RCCEx_PLL2_Config>
 80086d8:	4603      	mov	r3, r0
 80086da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086dc:	e012      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3324      	adds	r3, #36	; 0x24
 80086e2:	2102      	movs	r1, #2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 fbf1 	bl	8009ecc <RCCEx_PLL3_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086ee:	e009      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	75fb      	strb	r3, [r7, #23]
      break;
 80086f4:	e006      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80086f6:	bf00      	nop
 80086f8:	e004      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80086fa:	bf00      	nop
 80086fc:	e002      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80086fe:	bf00      	nop
 8008700:	e000      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800870a:	4b8e      	ldr	r3, [pc, #568]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008718:	498a      	ldr	r1, [pc, #552]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800871a:	4313      	orrs	r3, r2
 800871c:	654b      	str	r3, [r1, #84]	; 0x54
 800871e:	e001      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872c:	2b00      	cmp	r3, #0
 800872e:	d04b      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008736:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800873a:	d02e      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800873c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008740:	d828      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008746:	d02a      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874c:	d822      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800874e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008752:	d026      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008754:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008758:	d81c      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800875a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800875e:	d010      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008764:	d816      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01d      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800876a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876e:	d111      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	2100      	movs	r1, #0
 8008776:	4618      	mov	r0, r3
 8008778:	f001 faf6 	bl	8009d68 <RCCEx_PLL2_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008780:	e012      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3324      	adds	r3, #36	; 0x24
 8008786:	2102      	movs	r1, #2
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fb9f 	bl	8009ecc <RCCEx_PLL3_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008792:	e009      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	75fb      	strb	r3, [r7, #23]
      break;
 8008798:	e006      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800879a:	bf00      	nop
 800879c:	e004      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800879e:	bf00      	nop
 80087a0:	e002      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80087a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087ae:	4b65      	ldr	r3, [pc, #404]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087bc:	4961      	ldr	r1, [pc, #388]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	658b      	str	r3, [r1, #88]	; 0x58
 80087c2:	e001      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d04b      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087de:	d02e      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80087e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087e4:	d828      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80087e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ea:	d02a      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80087ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f0:	d822      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80087f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087f6:	d026      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80087f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087fc:	d81c      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80087fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008802:	d010      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008808:	d816      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d01d      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800880e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008812:	d111      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3304      	adds	r3, #4
 8008818:	2100      	movs	r1, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f001 faa4 	bl	8009d68 <RCCEx_PLL2_Config>
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008824:	e012      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3324      	adds	r3, #36	; 0x24
 800882a:	2102      	movs	r1, #2
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fb4d 	bl	8009ecc <RCCEx_PLL3_Config>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008836:	e009      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	75fb      	strb	r3, [r7, #23]
      break;
 800883c:	e006      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800883e:	bf00      	nop
 8008840:	e004      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008842:	bf00      	nop
 8008844:	e002      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008846:	bf00      	nop
 8008848:	e000      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800884a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800884c:	7dfb      	ldrb	r3, [r7, #23]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008852:	4b3c      	ldr	r3, [pc, #240]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008860:	4938      	ldr	r1, [pc, #224]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008862:	4313      	orrs	r3, r2
 8008864:	658b      	str	r3, [r1, #88]	; 0x58
 8008866:	e001      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0308 	and.w	r3, r3, #8
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01a      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800887e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008882:	d10a      	bne.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3324      	adds	r3, #36	; 0x24
 8008888:	2102      	movs	r1, #2
 800888a:	4618      	mov	r0, r3
 800888c:	f001 fb1e 	bl	8009ecc <RCCEx_PLL3_Config>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800889a:	4b2a      	ldr	r3, [pc, #168]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088a8:	4926      	ldr	r1, [pc, #152]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0310 	and.w	r3, r3, #16
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d01a      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c4:	d10a      	bne.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3324      	adds	r3, #36	; 0x24
 80088ca:	2102      	movs	r1, #2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fafd 	bl	8009ecc <RCCEx_PLL3_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088dc:	4b19      	ldr	r3, [pc, #100]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ea:	4916      	ldr	r1, [pc, #88]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d036      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008906:	d01f      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800890c:	d817      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008916:	d009      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008918:	e011      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3304      	adds	r3, #4
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f001 fa21 	bl	8009d68 <RCCEx_PLL2_Config>
 8008926:	4603      	mov	r3, r0
 8008928:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800892a:	e00e      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3324      	adds	r3, #36	; 0x24
 8008930:	2102      	movs	r1, #2
 8008932:	4618      	mov	r0, r3
 8008934:	f001 faca 	bl	8009ecc <RCCEx_PLL3_Config>
 8008938:	4603      	mov	r3, r0
 800893a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800893c:	e005      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
      break;
 8008942:	e002      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008944:	58024400 	.word	0x58024400
      break;
 8008948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008950:	4b93      	ldr	r3, [pc, #588]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008954:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800895e:	4990      	ldr	r1, [pc, #576]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008960:	4313      	orrs	r3, r2
 8008962:	658b      	str	r3, [r1, #88]	; 0x58
 8008964:	e001      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d033      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800897c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008980:	d01c      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008986:	d816      	bhi.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800898c:	d003      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800898e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008992:	d007      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008994:	e00f      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008996:	4b82      	ldr	r3, [pc, #520]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	4a81      	ldr	r2, [pc, #516]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800899c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80089a2:	e00c      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3324      	adds	r3, #36	; 0x24
 80089a8:	2101      	movs	r1, #1
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 fa8e 	bl	8009ecc <RCCEx_PLL3_Config>
 80089b0:	4603      	mov	r3, r0
 80089b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80089b4:	e003      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ba:	e000      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80089bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089c4:	4b76      	ldr	r3, [pc, #472]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d2:	4973      	ldr	r1, [pc, #460]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	654b      	str	r3, [r1, #84]	; 0x54
 80089d8:	e001      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089da:	7dfb      	ldrb	r3, [r7, #23]
 80089dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d029      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80089f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f6:	d007      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80089f8:	e00f      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089fa:	4b69      	ldr	r3, [pc, #420]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	4a68      	ldr	r2, [pc, #416]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a06:	e00b      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	2102      	movs	r1, #2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 f9aa 	bl	8009d68 <RCCEx_PLL2_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a18:	e002      	b.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a26:	4b5e      	ldr	r3, [pc, #376]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a32:	495b      	ldr	r1, [pc, #364]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a38:	e001      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
 8008a3c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3324      	adds	r3, #36	; 0x24
 8008a4e:	2102      	movs	r1, #2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fa3b 	bl	8009ecc <RCCEx_PLL3_Config>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d030      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a74:	d017      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a7a:	d811      	bhi.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a80:	d013      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a86:	d80b      	bhi.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d010      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a90:	d106      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a92:	4b43      	ldr	r3, [pc, #268]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a96:	4a42      	ldr	r2, [pc, #264]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008a9e:	e007      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa4:	e004      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008aa6:	bf00      	nop
 8008aa8:	e002      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008aaa:	bf00      	nop
 8008aac:	e000      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d109      	bne.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ab6:	4b3a      	ldr	r3, [pc, #232]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ac2:	4937      	ldr	r1, [pc, #220]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	654b      	str	r3, [r1, #84]	; 0x54
 8008ac8:	e001      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ada:	4b31      	ldr	r3, [pc, #196]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ade:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae6:	492e      	ldr	r1, [pc, #184]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d009      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008af8:	4b29      	ldr	r3, [pc, #164]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b06:	4926      	ldr	r1, [pc, #152]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b18:	4b21      	ldr	r3, [pc, #132]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b24:	491e      	ldr	r1, [pc, #120]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00d      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b36:	4b1a      	ldr	r3, [pc, #104]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	4a19      	ldr	r2, [pc, #100]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b40:	6113      	str	r3, [r2, #16]
 8008b42:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b4c:	4914      	ldr	r1, [pc, #80]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	da08      	bge.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b66:	490e      	ldr	r1, [pc, #56]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d009      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b78:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b86:	4906      	ldr	r1, [pc, #24]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008b8c:	7dbb      	ldrb	r3, [r7, #22]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	e000      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	58024400 	.word	0x58024400

08008ba4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b090      	sub	sp, #64	; 0x40
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb2:	f040 8095 	bne.w	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008bb6:	4bae      	ldr	r3, [pc, #696]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	f200 8088 	bhi.w	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008be5 	.word	0x08008be5
 8008bd4:	08008c0d 	.word	0x08008c0d
 8008bd8:	08008c35 	.word	0x08008c35
 8008bdc:	08008cd1 	.word	0x08008cd1
 8008be0:	08008c5d 	.word	0x08008c5d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008be4:	4ba2      	ldr	r3, [pc, #648]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bf0:	d108      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 ff64 	bl	8009ac4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c00:	f000 bc95 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c08:	f000 bc91 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c0c:	4b98      	ldr	r3, [pc, #608]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c18:	d108      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c1a:	f107 0318 	add.w	r3, r7, #24
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fca8 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c28:	f000 bc81 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c30:	f000 bc7d 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c34:	4b8e      	ldr	r3, [pc, #568]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c40:	d108      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c42:	f107 030c 	add.w	r3, r7, #12
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fde8 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c50:	f000 bc6d 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c58:	f000 bc69 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c5c:	4b84      	ldr	r3, [pc, #528]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c66:	4b82      	ldr	r3, [pc, #520]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d10c      	bne.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d109      	bne.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c78:	4b7d      	ldr	r3, [pc, #500]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	08db      	lsrs	r3, r3, #3
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	4a7c      	ldr	r2, [pc, #496]	; (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008c84:	fa22 f303 	lsr.w	r3, r2, r3
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c8a:	e01f      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c8c:	4b78      	ldr	r3, [pc, #480]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c98:	d106      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ca0:	d102      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ca2:	4b75      	ldr	r3, [pc, #468]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca6:	e011      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ca8:	4b71      	ldr	r3, [pc, #452]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cb4:	d106      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cbc:	d102      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008cbe:	4b6f      	ldr	r3, [pc, #444]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc2:	e003      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008cc8:	f000 bc31 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ccc:	f000 bc2f 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008cd0:	4b6b      	ldr	r3, [pc, #428]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd4:	f000 bc2b 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cdc:	f000 bc27 	b.w	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ce6:	f040 8095 	bne.w	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008cea:	4b61      	ldr	r3, [pc, #388]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008cf2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cfa:	d04d      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d02:	f200 8084 	bhi.w	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	2bc0      	cmp	r3, #192	; 0xc0
 8008d0a:	d07d      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d10:	d87d      	bhi.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	2b80      	cmp	r3, #128	; 0x80
 8008d16:	d02d      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	2b80      	cmp	r3, #128	; 0x80
 8008d1c:	d877      	bhi.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d012      	beq.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008d2a:	e070      	b.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d2c:	4b50      	ldr	r3, [pc, #320]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d38:	d107      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fec0 	bl	8009ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d48:	e3f1      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d4e:	e3ee      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d50:	4b47      	ldr	r3, [pc, #284]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d5c:	d107      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d5e:	f107 0318 	add.w	r3, r7, #24
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fc06 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d6c:	e3df      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d72:	e3dc      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d74:	4b3e      	ldr	r3, [pc, #248]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d80:	d107      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d82:	f107 030c 	add.w	r3, r7, #12
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fd48 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d90:	e3cd      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d96:	e3ca      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d98:	4b35      	ldr	r3, [pc, #212]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008da2:	4b33      	ldr	r3, [pc, #204]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d10c      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d109      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008db4:	4b2e      	ldr	r3, [pc, #184]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	08db      	lsrs	r3, r3, #3
 8008dba:	f003 0303 	and.w	r3, r3, #3
 8008dbe:	4a2d      	ldr	r2, [pc, #180]	; (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc6:	e01e      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dc8:	4b29      	ldr	r3, [pc, #164]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd4:	d106      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ddc:	d102      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008dde:	4b26      	ldr	r3, [pc, #152]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de2:	e010      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008de4:	4b22      	ldr	r3, [pc, #136]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008df0:	d106      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df8:	d102      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008dfa:	4b20      	ldr	r3, [pc, #128]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dfe:	e002      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e04:	e393      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e06:	e392      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e08:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e0c:	e38f      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e12:	e38c      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e1a:	f040 80a7 	bne.w	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008e1e:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e2e:	d05f      	beq.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e36:	f200 8096 	bhi.w	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e40:	f000 808e 	beq.w	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e4a:	f200 808c 	bhi.w	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e54:	d03a      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e5c:	f200 8083 	bhi.w	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00e      	beq.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e6c:	d01c      	beq.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008e6e:	e07a      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008e70:	58024400 	.word	0x58024400
 8008e74:	03d09000 	.word	0x03d09000
 8008e78:	003d0900 	.word	0x003d0900
 8008e7c:	017d7840 	.word	0x017d7840
 8008e80:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e84:	4baa      	ldr	r3, [pc, #680]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e90:	d107      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fe14 	bl	8009ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ea0:	e345      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ea6:	e342      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ea8:	4ba1      	ldr	r3, [pc, #644]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eb4:	d107      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb6:	f107 0318 	add.w	r3, r7, #24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 fb5a 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ec4:	e333      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eca:	e330      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ecc:	4b98      	ldr	r3, [pc, #608]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed8:	d107      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eda:	f107 030c 	add.w	r3, r7, #12
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fc9c 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ee8:	e321      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eee:	e31e      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ef0:	4b8f      	ldr	r3, [pc, #572]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008efa:	4b8d      	ldr	r3, [pc, #564]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0304 	and.w	r3, r3, #4
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d10c      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f0c:	4b88      	ldr	r3, [pc, #544]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	08db      	lsrs	r3, r3, #3
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	4a87      	ldr	r2, [pc, #540]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f1e:	e01e      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f20:	4b83      	ldr	r3, [pc, #524]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2c:	d106      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f34:	d102      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f36:	4b80      	ldr	r3, [pc, #512]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f3a:	e010      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f3c:	4b7c      	ldr	r3, [pc, #496]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f48:	d106      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f50:	d102      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f52:	4b7a      	ldr	r3, [pc, #488]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f56:	e002      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f5c:	e2e7      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f5e:	e2e6      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f60:	4b77      	ldr	r3, [pc, #476]	; (8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f64:	e2e3      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f6a:	e2e0      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f72:	f040 809c 	bne.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008f76:	4b6e      	ldr	r3, [pc, #440]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f7e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f86:	d054      	beq.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f8e:	f200 808b 	bhi.w	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f98:	f000 8083 	beq.w	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fa2:	f200 8081 	bhi.w	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fac:	d02f      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fb4:	d878      	bhi.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fc2:	d012      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008fc4:	e070      	b.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fc6:	4b5a      	ldr	r3, [pc, #360]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fd2:	d107      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fd73 	bl	8009ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fe2:	e2a4      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fe8:	e2a1      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fea:	4b51      	ldr	r3, [pc, #324]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ff6:	d107      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff8:	f107 0318 	add.w	r3, r7, #24
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 fab9 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009006:	e292      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800900c:	e28f      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800900e:	4b48      	ldr	r3, [pc, #288]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800901a:	d107      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901c:	f107 030c 	add.w	r3, r7, #12
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fbfb 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800902a:	e280      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009030:	e27d      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009032:	4b3f      	ldr	r3, [pc, #252]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800903a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800903c:	4b3c      	ldr	r3, [pc, #240]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b04      	cmp	r3, #4
 8009046:	d10c      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904a:	2b00      	cmp	r3, #0
 800904c:	d109      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800904e:	4b38      	ldr	r3, [pc, #224]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	08db      	lsrs	r3, r3, #3
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	4a36      	ldr	r2, [pc, #216]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800905a:	fa22 f303 	lsr.w	r3, r2, r3
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009060:	e01e      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009062:	4b33      	ldr	r3, [pc, #204]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906e:	d106      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009076:	d102      	bne.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009078:	4b2f      	ldr	r3, [pc, #188]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800907c:	e010      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800907e:	4b2c      	ldr	r3, [pc, #176]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800908a:	d106      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800908c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009092:	d102      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009094:	4b29      	ldr	r3, [pc, #164]	; (800913c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009098:	e002      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800909e:	e246      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80090a0:	e245      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80090a2:	4b27      	ldr	r3, [pc, #156]	; (8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090a6:	e242      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ac:	e23f      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b4:	f040 80a8 	bne.w	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80090b8:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80090c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090c8:	d060      	beq.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090d0:	f200 8097 	bhi.w	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090da:	f000 808f 	beq.w	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80090de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090e4:	f200 808d 	bhi.w	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ee:	d03b      	beq.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f6:	f200 8084 	bhi.w	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d004      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	d01d      	beq.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009108:	e07b      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800910a:	4b09      	ldr	r3, [pc, #36]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009116:	d107      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800911c:	4618      	mov	r0, r3
 800911e:	f000 fcd1 	bl	8009ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009126:	e202      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912c:	e1ff      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800912e:	bf00      	nop
 8009130:	58024400 	.word	0x58024400
 8009134:	03d09000 	.word	0x03d09000
 8009138:	003d0900 	.word	0x003d0900
 800913c:	017d7840 	.word	0x017d7840
 8009140:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009144:	4ba3      	ldr	r3, [pc, #652]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800914c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009150:	d107      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009152:	f107 0318 	add.w	r3, r7, #24
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fa0c 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009160:	e1e5      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009166:	e1e2      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009168:	4b9a      	ldr	r3, [pc, #616]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009174:	d107      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009176:	f107 030c 	add.w	r3, r7, #12
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fb4e 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009184:	e1d3      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800918a:	e1d0      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800918c:	4b91      	ldr	r3, [pc, #580]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800918e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009194:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009196:	4b8f      	ldr	r3, [pc, #572]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d10c      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d109      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091a8:	4b8a      	ldr	r3, [pc, #552]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	08db      	lsrs	r3, r3, #3
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	4a89      	ldr	r2, [pc, #548]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ba:	e01e      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091bc:	4b85      	ldr	r3, [pc, #532]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c8:	d106      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091d0:	d102      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80091d2:	4b82      	ldr	r3, [pc, #520]	; (80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091d6:	e010      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091d8:	4b7e      	ldr	r3, [pc, #504]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091e4:	d106      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80091e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ec:	d102      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80091ee:	4b7c      	ldr	r3, [pc, #496]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f2:	e002      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80091f8:	e199      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091fa:	e198      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091fc:	4b79      	ldr	r3, [pc, #484]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009200:	e195      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009206:	e192      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800920e:	d173      	bne.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009210:	4b70      	ldr	r3, [pc, #448]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009218:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009220:	d02f      	beq.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009228:	d863      	bhi.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009236:	d012      	beq.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009238:	e05b      	b.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800923a:	4b66      	ldr	r3, [pc, #408]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009246:	d107      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009248:	f107 0318 	add.w	r3, r7, #24
 800924c:	4618      	mov	r0, r3
 800924e:	f000 f991 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009256:	e16a      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800925c:	e167      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800925e:	4b5d      	ldr	r3, [pc, #372]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800926a:	d107      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926c:	f107 030c 	add.w	r3, r7, #12
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fad3 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800927a:	e158      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009280:	e155      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009282:	4b54      	ldr	r3, [pc, #336]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800928a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800928c:	4b51      	ldr	r3, [pc, #324]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b04      	cmp	r3, #4
 8009296:	d10c      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929a:	2b00      	cmp	r3, #0
 800929c:	d109      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800929e:	4b4d      	ldr	r3, [pc, #308]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	08db      	lsrs	r3, r3, #3
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	4a4b      	ldr	r2, [pc, #300]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80092aa:	fa22 f303 	lsr.w	r3, r2, r3
 80092ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b0:	e01e      	b.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092b2:	4b48      	ldr	r3, [pc, #288]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092be:	d106      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80092c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092c6:	d102      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80092c8:	4b44      	ldr	r3, [pc, #272]	; (80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092cc:	e010      	b.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092ce:	4b41      	ldr	r3, [pc, #260]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092da:	d106      	bne.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80092dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e2:	d102      	bne.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092e4:	4b3e      	ldr	r3, [pc, #248]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092e8:	e002      	b.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092ee:	e11e      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092f0:	e11d      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f6:	e11a      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092fe:	d133      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009300:	4b34      	ldr	r3, [pc, #208]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009308:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009316:	d012      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009318:	e023      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800931a:	4b2e      	ldr	r3, [pc, #184]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009326:	d107      	bne.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fbc9 	bl	8009ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009336:	e0fa      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800933c:	e0f7      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800933e:	4b25      	ldr	r3, [pc, #148]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800934a:	d107      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800934c:	f107 0318 	add.w	r3, r7, #24
 8009350:	4618      	mov	r0, r3
 8009352:	f000 f90f 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800935a:	e0e8      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009360:	e0e5      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009366:	e0e2      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800936e:	f040 808f 	bne.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009372:	4b18      	ldr	r3, [pc, #96]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009376:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800937a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009382:	d075      	beq.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800938a:	d87e      	bhi.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009392:	d060      	beq.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800939a:	d876      	bhi.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093a2:	d045      	beq.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093aa:	d86e      	bhi.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b2:	d02b      	beq.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ba:	d866      	bhi.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80093bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d004      	beq.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093c8:	d00e      	beq.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80093ca:	e05e      	b.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80093cc:	f000 f8bc 	bl	8009548 <HAL_RCCEx_GetD3PCLK1Freq>
 80093d0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80093d2:	e0ac      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80093d4:	58024400 	.word	0x58024400
 80093d8:	03d09000 	.word	0x03d09000
 80093dc:	003d0900 	.word	0x003d0900
 80093e0:	017d7840 	.word	0x017d7840
 80093e4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093e8:	4b53      	ldr	r3, [pc, #332]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093f4:	d107      	bne.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093f6:	f107 0318 	add.w	r3, r7, #24
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 f8ba 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009404:	e093      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800940a:	e090      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800940c:	4b4a      	ldr	r3, [pc, #296]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009418:	d107      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800941a:	f107 030c 	add.w	r3, r7, #12
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f9fc 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009428:	e081      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800942e:	e07e      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009430:	4b41      	ldr	r3, [pc, #260]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b04      	cmp	r3, #4
 800943a:	d109      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800943c:	4b3e      	ldr	r3, [pc, #248]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	08db      	lsrs	r3, r3, #3
 8009442:	f003 0303 	and.w	r3, r3, #3
 8009446:	4a3d      	ldr	r2, [pc, #244]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009448:	fa22 f303 	lsr.w	r3, r2, r3
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800944e:	e06e      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009454:	e06b      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009456:	4b38      	ldr	r3, [pc, #224]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009462:	d102      	bne.n	800946a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009464:	4b36      	ldr	r3, [pc, #216]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009466:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009468:	e061      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800946e:	e05e      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009470:	4b31      	ldr	r3, [pc, #196]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800947c:	d102      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800947e:	4b31      	ldr	r3, [pc, #196]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009480:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009482:	e054      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009488:	e051      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800948e:	e04e      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009496:	d148      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009498:	4b27      	ldr	r3, [pc, #156]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800949a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a8:	d02a      	beq.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b0:	d838      	bhi.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094be:	d00d      	beq.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80094c0:	e030      	b.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094c2:	4b1d      	ldr	r3, [pc, #116]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094ce:	d102      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80094d0:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094d4:	e02b      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094da:	e028      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094dc:	4b16      	ldr	r3, [pc, #88]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094e8:	d107      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 fae8 	bl	8009ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094f8:	e019      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094fe:	e016      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009500:	4b0d      	ldr	r3, [pc, #52]	; (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800950c:	d107      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800950e:	f107 0318 	add.w	r3, r7, #24
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f82e 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800951c:	e007      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009522:	e004      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009528:	e001      	b.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800952e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009530:	4618      	mov	r0, r3
 8009532:	3740      	adds	r7, #64	; 0x40
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	58024400 	.word	0x58024400
 800953c:	03d09000 	.word	0x03d09000
 8009540:	003d0900 	.word	0x003d0900
 8009544:	017d7840 	.word	0x017d7840

08009548 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800954c:	f7fe fb8e 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8009550:	4602      	mov	r2, r0
 8009552:	4b06      	ldr	r3, [pc, #24]	; (800956c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	091b      	lsrs	r3, r3, #4
 8009558:	f003 0307 	and.w	r3, r3, #7
 800955c:	4904      	ldr	r1, [pc, #16]	; (8009570 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800955e:	5ccb      	ldrb	r3, [r1, r3]
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009568:	4618      	mov	r0, r3
 800956a:	bd80      	pop	{r7, pc}
 800956c:	58024400 	.word	0x58024400
 8009570:	0801307c 	.word	0x0801307c

08009574 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009574:	b480      	push	{r7}
 8009576:	b089      	sub	sp, #36	; 0x24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800957c:	4ba1      	ldr	r3, [pc, #644]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009580:	f003 0303 	and.w	r3, r3, #3
 8009584:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009586:	4b9f      	ldr	r3, [pc, #636]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958a:	0b1b      	lsrs	r3, r3, #12
 800958c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009590:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009592:	4b9c      	ldr	r3, [pc, #624]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009596:	091b      	lsrs	r3, r3, #4
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800959e:	4b99      	ldr	r3, [pc, #612]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a2:	08db      	lsrs	r3, r3, #3
 80095a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	fb02 f303 	mul.w	r3, r2, r3
 80095ae:	ee07 3a90 	vmov	s15, r3
 80095b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 8111 	beq.w	80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	f000 8083 	beq.w	80096d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	f200 80a1 	bhi.w	8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d003      	beq.n	80095e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d056      	beq.n	800968c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80095de:	e099      	b.n	8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e0:	4b88      	ldr	r3, [pc, #544]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0320 	and.w	r3, r3, #32
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d02d      	beq.n	8009648 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095ec:	4b85      	ldr	r3, [pc, #532]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	08db      	lsrs	r3, r3, #3
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	4a84      	ldr	r2, [pc, #528]	; (8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80095f8:	fa22 f303 	lsr.w	r3, r2, r3
 80095fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b7b      	ldr	r3, [pc, #492]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a03 	vldr	s12, [r7, #12]
 800962a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800980c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009646:	e087      	b.n	8009758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965a:	4b6a      	ldr	r3, [pc, #424]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800965c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a03 	vldr	s12, [r7, #12]
 800966e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800980c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800968a:	e065      	b.n	8009758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969e:	4b59      	ldr	r3, [pc, #356]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800980c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096ce:	e043      	b.n	8009758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80096de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e2:	4b48      	ldr	r3, [pc, #288]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800980c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009712:	e021      	b.n	8009758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009726:	4b37      	ldr	r3, [pc, #220]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009736:	ed97 6a03 	vldr	s12, [r7, #12]
 800973a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800980c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800973e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800974a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800974e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009756:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009758:	4b2a      	ldr	r3, [pc, #168]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	0a5b      	lsrs	r3, r3, #9
 800975e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800976e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009772:	edd7 6a07 	vldr	s13, [r7, #28]
 8009776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800977a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800977e:	ee17 2a90 	vmov	r2, s15
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009786:	4b1f      	ldr	r3, [pc, #124]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	0c1b      	lsrs	r3, r3, #16
 800978c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009790:	ee07 3a90 	vmov	s15, r3
 8009794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800979c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ac:	ee17 2a90 	vmov	r2, s15
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80097b4:	4b13      	ldr	r3, [pc, #76]	; (8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b8:	0e1b      	lsrs	r3, r3, #24
 80097ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097da:	ee17 2a90 	vmov	r2, s15
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80097e2:	e008      	b.n	80097f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	609a      	str	r2, [r3, #8]
}
 80097f6:	bf00      	nop
 80097f8:	3724      	adds	r7, #36	; 0x24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	58024400 	.word	0x58024400
 8009808:	03d09000 	.word	0x03d09000
 800980c:	46000000 	.word	0x46000000
 8009810:	4c742400 	.word	0x4c742400
 8009814:	4a742400 	.word	0x4a742400
 8009818:	4bbebc20 	.word	0x4bbebc20

0800981c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800981c:	b480      	push	{r7}
 800981e:	b089      	sub	sp, #36	; 0x24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009824:	4ba1      	ldr	r3, [pc, #644]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009828:	f003 0303 	and.w	r3, r3, #3
 800982c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800982e:	4b9f      	ldr	r3, [pc, #636]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009832:	0d1b      	lsrs	r3, r3, #20
 8009834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009838:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800983a:	4b9c      	ldr	r3, [pc, #624]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009846:	4b99      	ldr	r3, [pc, #612]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984a:	08db      	lsrs	r3, r3, #3
 800984c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	fb02 f303 	mul.w	r3, r2, r3
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 8111 	beq.w	8009a8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	2b02      	cmp	r3, #2
 800986e:	f000 8083 	beq.w	8009978 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	2b02      	cmp	r3, #2
 8009876:	f200 80a1 	bhi.w	80099bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d056      	beq.n	8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009886:	e099      	b.n	80099bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009888:	4b88      	ldr	r3, [pc, #544]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0320 	and.w	r3, r3, #32
 8009890:	2b00      	cmp	r3, #0
 8009892:	d02d      	beq.n	80098f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009894:	4b85      	ldr	r3, [pc, #532]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	08db      	lsrs	r3, r3, #3
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	4a84      	ldr	r2, [pc, #528]	; (8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098a0:	fa22 f303 	lsr.w	r3, r2, r3
 80098a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	ee07 3a90 	vmov	s15, r3
 80098ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	ee07 3a90 	vmov	s15, r3
 80098b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098be:	4b7b      	ldr	r3, [pc, #492]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80098d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80098ee:	e087      	b.n	8009a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80098fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009902:	4b6a      	ldr	r3, [pc, #424]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009912:	ed97 6a03 	vldr	s12, [r7, #12]
 8009916:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800991a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009932:	e065      	b.n	8009a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009946:	4b59      	ldr	r3, [pc, #356]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009956:	ed97 6a03 	vldr	s12, [r7, #12]
 800995a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800995e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800996a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009976:	e043      	b.n	8009a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800998a:	4b48      	ldr	r3, [pc, #288]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800999a:	ed97 6a03 	vldr	s12, [r7, #12]
 800999e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ba:	e021      	b.n	8009a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ce:	4b37      	ldr	r3, [pc, #220]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099de:	ed97 6a03 	vldr	s12, [r7, #12]
 80099e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a00:	4b2a      	ldr	r3, [pc, #168]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a04:	0a5b      	lsrs	r3, r3, #9
 8009a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a26:	ee17 2a90 	vmov	r2, s15
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a2e:	4b1f      	ldr	r3, [pc, #124]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	0c1b      	lsrs	r3, r3, #16
 8009a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a38:	ee07 3a90 	vmov	s15, r3
 8009a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a54:	ee17 2a90 	vmov	r2, s15
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009a5c:	4b13      	ldr	r3, [pc, #76]	; (8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a60:	0e1b      	lsrs	r3, r3, #24
 8009a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a82:	ee17 2a90 	vmov	r2, s15
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a8a:	e008      	b.n	8009a9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	609a      	str	r2, [r3, #8]
}
 8009a9e:	bf00      	nop
 8009aa0:	3724      	adds	r7, #36	; 0x24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	58024400 	.word	0x58024400
 8009ab0:	03d09000 	.word	0x03d09000
 8009ab4:	46000000 	.word	0x46000000
 8009ab8:	4c742400 	.word	0x4c742400
 8009abc:	4a742400 	.word	0x4a742400
 8009ac0:	4bbebc20 	.word	0x4bbebc20

08009ac4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b089      	sub	sp, #36	; 0x24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009acc:	4ba0      	ldr	r3, [pc, #640]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009ad6:	4b9e      	ldr	r3, [pc, #632]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	091b      	lsrs	r3, r3, #4
 8009adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ae0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009ae2:	4b9b      	ldr	r3, [pc, #620]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009aec:	4b98      	ldr	r3, [pc, #608]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af0:	08db      	lsrs	r3, r3, #3
 8009af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	fb02 f303 	mul.w	r3, r2, r3
 8009afc:	ee07 3a90 	vmov	s15, r3
 8009b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8111 	beq.w	8009d32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	f000 8083 	beq.w	8009c1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	f200 80a1 	bhi.w	8009c62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d056      	beq.n	8009bda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009b2c:	e099      	b.n	8009c62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b2e:	4b88      	ldr	r3, [pc, #544]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0320 	and.w	r3, r3, #32
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d02d      	beq.n	8009b96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b3a:	4b85      	ldr	r3, [pc, #532]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	08db      	lsrs	r3, r3, #3
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	4a83      	ldr	r2, [pc, #524]	; (8009d54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009b46:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	ee07 3a90 	vmov	s15, r3
 8009b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b64:	4b7a      	ldr	r3, [pc, #488]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6c:	ee07 3a90 	vmov	s15, r3
 8009b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b74:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b90:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b94:	e087      	b.n	8009ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	ee07 3a90 	vmov	s15, r3
 8009b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009d5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba8:	4b69      	ldr	r3, [pc, #420]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb0:	ee07 3a90 	vmov	s15, r3
 8009bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bbc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bd8:	e065      	b.n	8009ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009d60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bec:	4b58      	ldr	r3, [pc, #352]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf4:	ee07 3a90 	vmov	s15, r3
 8009bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c1c:	e043      	b.n	8009ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	ee07 3a90 	vmov	s15, r3
 8009c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c30:	4b47      	ldr	r3, [pc, #284]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c38:	ee07 3a90 	vmov	s15, r3
 8009c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c40:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c60:	e021      	b.n	8009ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009d5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c74:	4b36      	ldr	r3, [pc, #216]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7c:	ee07 3a90 	vmov	s15, r3
 8009c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c84:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ca4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009ca6:	4b2a      	ldr	r3, [pc, #168]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009caa:	0a5b      	lsrs	r3, r3, #9
 8009cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb0:	ee07 3a90 	vmov	s15, r3
 8009cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ccc:	ee17 2a90 	vmov	r2, s15
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009cd4:	4b1e      	ldr	r3, [pc, #120]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd8:	0c1b      	lsrs	r3, r3, #16
 8009cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfa:	ee17 2a90 	vmov	r2, s15
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009d02:	4b13      	ldr	r3, [pc, #76]	; (8009d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d06:	0e1b      	lsrs	r3, r3, #24
 8009d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d0c:	ee07 3a90 	vmov	s15, r3
 8009d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d28:	ee17 2a90 	vmov	r2, s15
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d30:	e008      	b.n	8009d44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	609a      	str	r2, [r3, #8]
}
 8009d44:	bf00      	nop
 8009d46:	3724      	adds	r7, #36	; 0x24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	58024400 	.word	0x58024400
 8009d54:	03d09000 	.word	0x03d09000
 8009d58:	46000000 	.word	0x46000000
 8009d5c:	4c742400 	.word	0x4c742400
 8009d60:	4a742400 	.word	0x4a742400
 8009d64:	4bbebc20 	.word	0x4bbebc20

08009d68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d76:	4b53      	ldr	r3, [pc, #332]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7a:	f003 0303 	and.w	r3, r3, #3
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d101      	bne.n	8009d86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e099      	b.n	8009eba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d86:	4b4f      	ldr	r3, [pc, #316]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a4e      	ldr	r2, [pc, #312]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009d8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d92:	f7fa f8ab 	bl	8003eec <HAL_GetTick>
 8009d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d98:	e008      	b.n	8009dac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d9a:	f7fa f8a7 	bl	8003eec <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d901      	bls.n	8009dac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e086      	b.n	8009eba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dac:	4b45      	ldr	r3, [pc, #276]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f0      	bne.n	8009d9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009db8:	4b42      	ldr	r3, [pc, #264]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	031b      	lsls	r3, r3, #12
 8009dc6:	493f      	ldr	r1, [pc, #252]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	628b      	str	r3, [r1, #40]	; 0x28
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	025b      	lsls	r3, r3, #9
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	431a      	orrs	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	041b      	lsls	r3, r3, #16
 8009dea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009dee:	431a      	orrs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	061b      	lsls	r3, r3, #24
 8009df8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009dfc:	4931      	ldr	r1, [pc, #196]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e02:	4b30      	ldr	r3, [pc, #192]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	492d      	ldr	r1, [pc, #180]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e14:	4b2b      	ldr	r3, [pc, #172]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	f023 0220 	bic.w	r2, r3, #32
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	4928      	ldr	r1, [pc, #160]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e26:	4b27      	ldr	r3, [pc, #156]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2a:	4a26      	ldr	r2, [pc, #152]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e2c:	f023 0310 	bic.w	r3, r3, #16
 8009e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e32:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e36:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <RCCEx_PLL2_Config+0x160>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	69d2      	ldr	r2, [r2, #28]
 8009e3e:	00d2      	lsls	r2, r2, #3
 8009e40:	4920      	ldr	r1, [pc, #128]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e46:	4b1f      	ldr	r3, [pc, #124]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	4a1e      	ldr	r2, [pc, #120]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e4c:	f043 0310 	orr.w	r3, r3, #16
 8009e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e58:	4b1a      	ldr	r3, [pc, #104]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	4a19      	ldr	r2, [pc, #100]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e64:	e00f      	b.n	8009e86 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d106      	bne.n	8009e7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e6c:	4b15      	ldr	r3, [pc, #84]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	4a14      	ldr	r2, [pc, #80]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e78:	e005      	b.n	8009e86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e7a:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	4a11      	ldr	r2, [pc, #68]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a0e      	ldr	r2, [pc, #56]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009e8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e92:	f7fa f82b 	bl	8003eec <HAL_GetTick>
 8009e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e98:	e008      	b.n	8009eac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e9a:	f7fa f827 	bl	8003eec <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d901      	bls.n	8009eac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e006      	b.n	8009eba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <RCCEx_PLL2_Config+0x15c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0f0      	beq.n	8009e9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	58024400 	.word	0x58024400
 8009ec8:	ffff0007 	.word	0xffff0007

08009ecc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eda:	4b53      	ldr	r3, [pc, #332]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ede:	f003 0303 	and.w	r3, r3, #3
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d101      	bne.n	8009eea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e099      	b.n	800a01e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009eea:	4b4f      	ldr	r3, [pc, #316]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a4e      	ldr	r2, [pc, #312]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ef6:	f7f9 fff9 	bl	8003eec <HAL_GetTick>
 8009efa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009efc:	e008      	b.n	8009f10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009efe:	f7f9 fff5 	bl	8003eec <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d901      	bls.n	8009f10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e086      	b.n	800a01e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f10:	4b45      	ldr	r3, [pc, #276]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1f0      	bne.n	8009efe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f1c:	4b42      	ldr	r3, [pc, #264]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	051b      	lsls	r3, r3, #20
 8009f2a:	493f      	ldr	r1, [pc, #252]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	025b      	lsls	r3, r3, #9
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	431a      	orrs	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	041b      	lsls	r3, r3, #16
 8009f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	061b      	lsls	r3, r3, #24
 8009f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f60:	4931      	ldr	r1, [pc, #196]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f66:	4b30      	ldr	r3, [pc, #192]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	492d      	ldr	r1, [pc, #180]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f78:	4b2b      	ldr	r3, [pc, #172]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	4928      	ldr	r1, [pc, #160]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f8a:	4b27      	ldr	r3, [pc, #156]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8e:	4a26      	ldr	r2, [pc, #152]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f96:	4b24      	ldr	r3, [pc, #144]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f9a:	4b24      	ldr	r3, [pc, #144]	; (800a02c <RCCEx_PLL3_Config+0x160>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	69d2      	ldr	r2, [r2, #28]
 8009fa2:	00d2      	lsls	r2, r2, #3
 8009fa4:	4920      	ldr	r1, [pc, #128]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009faa:	4b1f      	ldr	r3, [pc, #124]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a1e      	ldr	r2, [pc, #120]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fbc:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc0:	4a19      	ldr	r2, [pc, #100]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fc8:	e00f      	b.n	8009fea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d106      	bne.n	8009fde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009fd0:	4b15      	ldr	r3, [pc, #84]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4a14      	ldr	r2, [pc, #80]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fdc:	e005      	b.n	8009fea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009fde:	4b12      	ldr	r3, [pc, #72]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	4a11      	ldr	r2, [pc, #68]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009fea:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a0e      	ldr	r2, [pc, #56]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 8009ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ff6:	f7f9 ff79 	bl	8003eec <HAL_GetTick>
 8009ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ffc:	e008      	b.n	800a010 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ffe:	f7f9 ff75 	bl	8003eec <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d901      	bls.n	800a010 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e006      	b.n	800a01e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a010:	4b05      	ldr	r3, [pc, #20]	; (800a028 <RCCEx_PLL3_Config+0x15c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0f0      	beq.n	8009ffe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	58024400 	.word	0x58024400
 800a02c:	ffff0007 	.word	0xffff0007

0800a030 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d067      	beq.n	800a112 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7f7 f8f4 	bl	8001244 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2202      	movs	r2, #2
 800a060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	22ca      	movs	r2, #202	; 0xca
 800a06a:	625a      	str	r2, [r3, #36]	; 0x24
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2253      	movs	r2, #83	; 0x53
 800a072:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fa49 	bl	800a50c <RTC_EnterInitMode>
 800a07a:	4603      	mov	r3, r0
 800a07c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d13b      	bne.n	800a0fc <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6899      	ldr	r1, [r3, #8]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	4b23      	ldr	r3, [pc, #140]	; (800a11c <HAL_RTC_Init+0xec>)
 800a090:	400b      	ands	r3, r1
 800a092:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6899      	ldr	r1, [r3, #8]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	0419      	lsls	r1, r3, #16
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68da      	ldr	r2, [r3, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fa51 	bl	800a56c <RTC_ExitInitMode>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d113      	bne.n	800a0fc <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0203 	bic.w	r2, r2, #3
 800a0e2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	69da      	ldr	r2, [r3, #28]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	22ff      	movs	r2, #255	; 0xff
 800a102:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d103      	bne.n	800a112 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	ff8fffbf 	.word	0xff8fffbf

0800a120 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a120:	b590      	push	{r4, r7, lr}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <HAL_RTC_SetTime+0x1a>
 800a136:	2302      	movs	r3, #2
 800a138:	e089      	b.n	800a24e <HAL_RTC_SetTime+0x12e>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2202      	movs	r2, #2
 800a146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	22ca      	movs	r2, #202	; 0xca
 800a150:	625a      	str	r2, [r3, #36]	; 0x24
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2253      	movs	r2, #83	; 0x53
 800a158:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f000 f9d6 	bl	800a50c <RTC_EnterInitMode>
 800a160:	4603      	mov	r3, r0
 800a162:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a164:	7cfb      	ldrb	r3, [r7, #19]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d161      	bne.n	800a22e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d126      	bne.n	800a1be <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2200      	movs	r2, #0
 800a182:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 fa2d 	bl	800a5e8 <RTC_ByteToBcd2>
 800a18e:	4603      	mov	r3, r0
 800a190:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fa26 	bl	800a5e8 <RTC_ByteToBcd2>
 800a19c:	4603      	mov	r3, r0
 800a19e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a1a0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	789b      	ldrb	r3, [r3, #2]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fa1e 	bl	800a5e8 <RTC_ByteToBcd2>
 800a1ac:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1ae:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	78db      	ldrb	r3, [r3, #3]
 800a1b6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	e018      	b.n	800a1f0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a1de:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1e4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	78db      	ldrb	r3, [r3, #3]
 800a1ea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	6979      	ldr	r1, [r7, #20]
 800a1f6:	4b18      	ldr	r3, [pc, #96]	; (800a258 <HAL_RTC_SetTime+0x138>)
 800a1f8:	400b      	ands	r3, r1
 800a1fa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a20a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6899      	ldr	r1, [r3, #8]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	68da      	ldr	r2, [r3, #12]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	431a      	orrs	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	430a      	orrs	r2, r1
 800a222:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f9a1 	bl	800a56c <RTC_ExitInitMode>
 800a22a:	4603      	mov	r3, r0
 800a22c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	22ff      	movs	r2, #255	; 0xff
 800a234:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a236:	7cfb      	ldrb	r3, [r7, #19]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d103      	bne.n	800a244 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a24c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	bd90      	pop	{r4, r7, pc}
 800a256:	bf00      	nop
 800a258:	007f7f7f 	.word	0x007f7f7f

0800a25c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	4b22      	ldr	r3, [pc, #136]	; (800a310 <HAL_RTC_GetTime+0xb4>)
 800a288:	4013      	ands	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	0c1b      	lsrs	r3, r3, #16
 800a290:	b2db      	uxtb	r3, r3
 800a292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a296:	b2da      	uxtb	r2, r3
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	0a1b      	lsrs	r3, r3, #8
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	0d9b      	lsrs	r3, r3, #22
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d11a      	bne.n	800a306 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 f9a7 	bl	800a628 <RTC_Bcd2ToByte>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	461a      	mov	r2, r3
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f99e 	bl	800a628 <RTC_Bcd2ToByte>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	789b      	ldrb	r3, [r3, #2]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f995 	bl	800a628 <RTC_Bcd2ToByte>
 800a2fe:	4603      	mov	r3, r0
 800a300:	461a      	mov	r2, r3
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	007f7f7f 	.word	0x007f7f7f

0800a314 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a314:	b590      	push	{r4, r7, lr}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_RTC_SetDate+0x1a>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e073      	b.n	800a416 <HAL_RTC_SetDate+0x102>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2202      	movs	r2, #2
 800a33a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10e      	bne.n	800a362 <HAL_RTC_SetDate+0x4e>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d008      	beq.n	800a362 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	f023 0310 	bic.w	r3, r3, #16
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	330a      	adds	r3, #10
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d11c      	bne.n	800a3a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	78db      	ldrb	r3, [r3, #3]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f93b 	bl	800a5e8 <RTC_ByteToBcd2>
 800a372:	4603      	mov	r3, r0
 800a374:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 f934 	bl	800a5e8 <RTC_ByteToBcd2>
 800a380:	4603      	mov	r3, r0
 800a382:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a384:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	789b      	ldrb	r3, [r3, #2]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f92c 	bl	800a5e8 <RTC_ByteToBcd2>
 800a390:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a392:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a39c:	4313      	orrs	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e00e      	b.n	800a3c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	78db      	ldrb	r3, [r3, #3]
 800a3a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a3ae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a3b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	22ca      	movs	r2, #202	; 0xca
 800a3c6:	625a      	str	r2, [r3, #36]	; 0x24
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2253      	movs	r2, #83	; 0x53
 800a3ce:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 f89b 	bl	800a50c <RTC_EnterInitMode>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a3da:	7cfb      	ldrb	r3, [r7, #19]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10a      	bne.n	800a3f6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	6979      	ldr	r1, [r7, #20]
 800a3e6:	4b0e      	ldr	r3, [pc, #56]	; (800a420 <HAL_RTC_SetDate+0x10c>)
 800a3e8:	400b      	ands	r3, r1
 800a3ea:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 f8bd 	bl	800a56c <RTC_ExitInitMode>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	22ff      	movs	r2, #255	; 0xff
 800a3fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a3fe:	7cfb      	ldrb	r3, [r7, #19]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d103      	bne.n	800a40c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a414:	7cfb      	ldrb	r3, [r7, #19]


}
 800a416:	4618      	mov	r0, r3
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd90      	pop	{r4, r7, pc}
 800a41e:	bf00      	nop
 800a420:	00ffff3f 	.word	0x00ffff3f

0800a424 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	4b21      	ldr	r3, [pc, #132]	; (800a4bc <HAL_RTC_GetDate+0x98>)
 800a438:	4013      	ands	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	0c1b      	lsrs	r3, r3, #16
 800a440:	b2da      	uxtb	r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	0a1b      	lsrs	r3, r3, #8
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 031f 	and.w	r3, r3, #31
 800a450:	b2da      	uxtb	r2, r3
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	0b5b      	lsrs	r3, r3, #13
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	f003 0307 	and.w	r3, r3, #7
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d11a      	bne.n	800a4b0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	78db      	ldrb	r3, [r3, #3]
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 f8d2 	bl	800a628 <RTC_Bcd2ToByte>
 800a484:	4603      	mov	r3, r0
 800a486:	461a      	mov	r2, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	785b      	ldrb	r3, [r3, #1]
 800a490:	4618      	mov	r0, r3
 800a492:	f000 f8c9 	bl	800a628 <RTC_Bcd2ToByte>
 800a496:	4603      	mov	r3, r0
 800a498:	461a      	mov	r2, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	789b      	ldrb	r3, [r3, #2]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 f8c0 	bl	800a628 <RTC_Bcd2ToByte>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	00ffff3f 	.word	0x00ffff3f

0800a4c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a4d6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a4d8:	f7f9 fd08 	bl	8003eec <HAL_GetTick>
 800a4dc:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a4de:	e009      	b.n	800a4f4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a4e0:	f7f9 fd04 	bl	8003eec <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4ee:	d901      	bls.n	800a4f4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e007      	b.n	800a504 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0ee      	beq.n	800a4e0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	d11d      	bne.n	800a562 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a530:	f7f9 fcdc 	bl	8003eec <HAL_GetTick>
 800a534:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a536:	e00d      	b.n	800a554 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a538:	f7f9 fcd8 	bl	8003eec <HAL_GetTick>
 800a53c:	4602      	mov	r2, r0
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a546:	d905      	bls.n	800a554 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2203      	movs	r2, #3
 800a550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0ea      	beq.n	800a538 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a562:	7bfb      	ldrb	r3, [r7, #15]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a578:	4b1a      	ldr	r3, [pc, #104]	; (800a5e4 <RTC_ExitInitMode+0x78>)
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	4a19      	ldr	r2, [pc, #100]	; (800a5e4 <RTC_ExitInitMode+0x78>)
 800a57e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a582:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a584:	4b17      	ldr	r3, [pc, #92]	; (800a5e4 <RTC_ExitInitMode+0x78>)
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f003 0320 	and.w	r3, r3, #32
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10c      	bne.n	800a5aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff ff95 	bl	800a4c0 <HAL_RTC_WaitForSynchro>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01e      	beq.n	800a5da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2203      	movs	r2, #3
 800a5a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	73fb      	strb	r3, [r7, #15]
 800a5a8:	e017      	b.n	800a5da <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a5aa:	4b0e      	ldr	r3, [pc, #56]	; (800a5e4 <RTC_ExitInitMode+0x78>)
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	4a0d      	ldr	r2, [pc, #52]	; (800a5e4 <RTC_ExitInitMode+0x78>)
 800a5b0:	f023 0320 	bic.w	r3, r3, #32
 800a5b4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff ff82 	bl	800a4c0 <HAL_RTC_WaitForSynchro>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2203      	movs	r2, #3
 800a5c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <RTC_ExitInitMode+0x78>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	4a04      	ldr	r2, [pc, #16]	; (800a5e4 <RTC_ExitInitMode+0x78>)
 800a5d4:	f043 0320 	orr.w	r3, r3, #32
 800a5d8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	58004000 	.word	0x58004000

0800a5e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a5f6:	79fb      	ldrb	r3, [r7, #7]
 800a5f8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a5fa:	e005      	b.n	800a608 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3301      	adds	r3, #1
 800a600:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a602:	7afb      	ldrb	r3, [r7, #11]
 800a604:	3b0a      	subs	r3, #10
 800a606:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a608:	7afb      	ldrb	r3, [r7, #11]
 800a60a:	2b09      	cmp	r3, #9
 800a60c:	d8f6      	bhi.n	800a5fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	011b      	lsls	r3, r3, #4
 800a614:	b2da      	uxtb	r2, r3
 800a616:	7afb      	ldrb	r3, [r7, #11]
 800a618:	4313      	orrs	r3, r2
 800a61a:	b2db      	uxtb	r3, r3
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	091b      	lsrs	r3, r3, #4
 800a636:	b2db      	uxtb	r3, r3
 800a638:	461a      	mov	r2, r3
 800a63a:	0092      	lsls	r2, r2, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	f003 030f 	and.w	r3, r3, #15
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	4413      	add	r3, r2
 800a64e:	b2db      	uxtb	r3, r3
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800a664:	2300      	movs	r3, #0
 800a666:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e0eb      	b.n	800a84a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a75      	ldr	r2, [pc, #468]	; (800a854 <HAL_SPI_Init+0x1f8>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d00f      	beq.n	800a6a2 <HAL_SPI_Init+0x46>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a74      	ldr	r2, [pc, #464]	; (800a858 <HAL_SPI_Init+0x1fc>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d00a      	beq.n	800a6a2 <HAL_SPI_Init+0x46>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a72      	ldr	r2, [pc, #456]	; (800a85c <HAL_SPI_Init+0x200>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d005      	beq.n	800a6a2 <HAL_SPI_Init+0x46>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	2b0f      	cmp	r3, #15
 800a69c:	d901      	bls.n	800a6a2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e0d3      	b.n	800a84a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 f87a 	bl	800b79c <SPI_GetPacketSize>
 800a6a8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a69      	ldr	r2, [pc, #420]	; (800a854 <HAL_SPI_Init+0x1f8>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d00c      	beq.n	800a6ce <HAL_SPI_Init+0x72>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a67      	ldr	r2, [pc, #412]	; (800a858 <HAL_SPI_Init+0x1fc>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d007      	beq.n	800a6ce <HAL_SPI_Init+0x72>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a66      	ldr	r2, [pc, #408]	; (800a85c <HAL_SPI_Init+0x200>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d002      	beq.n	800a6ce <HAL_SPI_Init+0x72>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d811      	bhi.n	800a6f2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6d2:	4a60      	ldr	r2, [pc, #384]	; (800a854 <HAL_SPI_Init+0x1f8>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d009      	beq.n	800a6ec <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a5e      	ldr	r2, [pc, #376]	; (800a858 <HAL_SPI_Init+0x1fc>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d004      	beq.n	800a6ec <HAL_SPI_Init+0x90>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a5d      	ldr	r2, [pc, #372]	; (800a85c <HAL_SPI_Init+0x200>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d104      	bne.n	800a6f6 <HAL_SPI_Init+0x9a>
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2b10      	cmp	r3, #16
 800a6f0:	d901      	bls.n	800a6f6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e0a9      	b.n	800a84a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d106      	bne.n	800a710 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7f6 fe78 	bl	8001400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2202      	movs	r2, #2
 800a714:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0201 	bic.w	r2, r2, #1
 800a726:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a730:	d119      	bne.n	800a766 <HAL_SPI_Init+0x10a>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a73a:	d103      	bne.n	800a744 <HAL_SPI_Init+0xe8>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a740:	2b00      	cmp	r3, #0
 800a742:	d008      	beq.n	800a756 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10c      	bne.n	800a766 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a754:	d107      	bne.n	800a766 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a764:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	69da      	ldr	r2, [r3, #28]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	431a      	orrs	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	431a      	orrs	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a778:	ea42 0103 	orr.w	r1, r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	431a      	orrs	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	431a      	orrs	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	431a      	orrs	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	431a      	orrs	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	431a      	orrs	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7c6:	ea42 0103 	orr.w	r1, r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d113      	bne.n	800a806 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a804:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 0201 	bic.w	r2, r2, #1
 800a814:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	430a      	orrs	r2, r1
 800a836:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	40013000 	.word	0x40013000
 800a858:	40003800 	.word	0x40003800
 800a85c:	40003c00 	.word	0x40003c00

0800a860 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08a      	sub	sp, #40	; 0x28
 800a864:	af02      	add	r7, sp, #8
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	4613      	mov	r3, r2
 800a86e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3320      	adds	r3, #32
 800a876:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a882:	2b01      	cmp	r3, #1
 800a884:	d101      	bne.n	800a88a <HAL_SPI_Transmit+0x2a>
 800a886:	2302      	movs	r3, #2
 800a888:	e1d7      	b.n	800ac3a <HAL_SPI_Transmit+0x3da>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a892:	f7f9 fb2b 	bl	8003eec <HAL_GetTick>
 800a896:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d007      	beq.n	800a8b4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a8b0:	7efb      	ldrb	r3, [r7, #27]
 800a8b2:	e1c2      	b.n	800ac3a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <HAL_SPI_Transmit+0x60>
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d107      	bne.n	800a8d0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a8cc:	7efb      	ldrb	r3, [r7, #27]
 800a8ce:	e1b4      	b.n	800ac3a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2203      	movs	r2, #3
 800a8d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	88fa      	ldrh	r2, [r7, #6]
 800a8ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	88fa      	ldrh	r2, [r7, #6]
 800a8f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a920:	d107      	bne.n	800a932 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a930:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	4b96      	ldr	r3, [pc, #600]	; (800ab94 <HAL_SPI_Transmit+0x334>)
 800a93a:	4013      	ands	r3, r2
 800a93c:	88f9      	ldrh	r1, [r7, #6]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	6812      	ldr	r2, [r2, #0]
 800a942:	430b      	orrs	r3, r1
 800a944:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f042 0201 	orr.w	r2, r2, #1
 800a954:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a95e:	d107      	bne.n	800a970 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a96e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	2b0f      	cmp	r3, #15
 800a976:	d947      	bls.n	800aa08 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a978:	e03f      	b.n	800a9fa <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b02      	cmp	r3, #2
 800a986:	d114      	bne.n	800a9b2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6812      	ldr	r2, [r2, #0]
 800a992:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a998:	1d1a      	adds	r2, r3, #4
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a9b0:	e023      	b.n	800a9fa <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9b2:	f7f9 fa9b 	bl	8003eec <HAL_GetTick>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d803      	bhi.n	800a9ca <HAL_SPI_Transmit+0x16a>
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c8:	d102      	bne.n	800a9d0 <HAL_SPI_Transmit+0x170>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d114      	bne.n	800a9fa <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fe15 	bl	800b600 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e11f      	b.n	800ac3a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1b9      	bne.n	800a97a <HAL_SPI_Transmit+0x11a>
 800aa06:	e0f2      	b.n	800abee <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	2b07      	cmp	r3, #7
 800aa0e:	f240 80e7 	bls.w	800abe0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aa12:	e05d      	b.n	800aad0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d132      	bne.n	800aa88 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d918      	bls.n	800aa60 <HAL_SPI_Transmit+0x200>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d014      	beq.n	800aa60 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6812      	ldr	r2, [r2, #0]
 800aa40:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa46:	1d1a      	adds	r2, r3, #4
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	3b02      	subs	r3, #2
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa5e:	e037      	b.n	800aad0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa64:	881a      	ldrh	r2, [r3, #0]
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa6e:	1c9a      	adds	r2, r3, #2
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa86:	e023      	b.n	800aad0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa88:	f7f9 fa30 	bl	8003eec <HAL_GetTick>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d803      	bhi.n	800aaa0 <HAL_SPI_Transmit+0x240>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9e:	d102      	bne.n	800aaa6 <HAL_SPI_Transmit+0x246>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d114      	bne.n	800aad0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f000 fdaa 	bl	800b600 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e0b4      	b.n	800ac3a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d19b      	bne.n	800aa14 <HAL_SPI_Transmit+0x1b4>
 800aadc:	e087      	b.n	800abee <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	f003 0302 	and.w	r3, r3, #2
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d155      	bne.n	800ab98 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d918      	bls.n	800ab2a <HAL_SPI_Transmit+0x2ca>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafc:	2b40      	cmp	r3, #64	; 0x40
 800aafe:	d914      	bls.n	800ab2a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6812      	ldr	r2, [r2, #0]
 800ab0a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab10:	1d1a      	adds	r2, r3, #4
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	3b04      	subs	r3, #4
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab28:	e05a      	b.n	800abe0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d917      	bls.n	800ab66 <HAL_SPI_Transmit+0x306>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d013      	beq.n	800ab66 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab42:	881a      	ldrh	r2, [r3, #0]
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab4c:	1c9a      	adds	r2, r3, #2
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	3b02      	subs	r3, #2
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab64:	e03c      	b.n	800abe0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3320      	adds	r3, #32
 800ab70:	7812      	ldrb	r2, [r2, #0]
 800ab72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab90:	e026      	b.n	800abe0 <HAL_SPI_Transmit+0x380>
 800ab92:	bf00      	nop
 800ab94:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab98:	f7f9 f9a8 	bl	8003eec <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d803      	bhi.n	800abb0 <HAL_SPI_Transmit+0x350>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abae:	d102      	bne.n	800abb6 <HAL_SPI_Transmit+0x356>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d114      	bne.n	800abe0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 fd22 	bl	800b600 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	e02c      	b.n	800ac3a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f47f af78 	bne.w	800aade <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2200      	movs	r2, #0
 800abf6:	2108      	movs	r1, #8
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 fda1 	bl	800b740 <SPI_WaitOnFlagUntilTimeout>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d007      	beq.n	800ac14 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac0a:	f043 0220 	orr.w	r2, r3, #32
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 fcf3 	bl	800b600 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	e000      	b.n	800ac3a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ac38:	7efb      	ldrb	r3, [r7, #27]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3720      	adds	r7, #32
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop

0800ac44 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08a      	sub	sp, #40	; 0x28
 800ac48:	af02      	add	r7, sp, #8
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	603b      	str	r3, [r7, #0]
 800ac50:	4613      	mov	r3, r2
 800ac52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3330      	adds	r3, #48	; 0x30
 800ac5e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac68:	d112      	bne.n	800ac90 <HAL_SPI_Receive+0x4c>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10e      	bne.n	800ac90 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2204      	movs	r2, #4
 800ac76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac7a:	88fa      	ldrh	r2, [r7, #6]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	4613      	mov	r3, r2
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	68b9      	ldr	r1, [r7, #8]
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 f9ce 	bl	800b028 <HAL_SPI_TransmitReceive>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	e1c7      	b.n	800b020 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d101      	bne.n	800ac9e <HAL_SPI_Receive+0x5a>
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	e1c0      	b.n	800b020 <HAL_SPI_Receive+0x3dc>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aca6:	f7f9 f921 	bl	8003eec <HAL_GetTick>
 800acaa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d007      	beq.n	800acc8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800acb8:	2302      	movs	r3, #2
 800acba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800acc4:	7ffb      	ldrb	r3, [r7, #31]
 800acc6:	e1ab      	b.n	800b020 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <HAL_SPI_Receive+0x90>
 800acce:	88fb      	ldrh	r3, [r7, #6]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d107      	bne.n	800ace4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ace0:	7ffb      	ldrb	r3, [r7, #31]
 800ace2:	e19d      	b.n	800b020 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2204      	movs	r2, #4
 800ace8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	88fa      	ldrh	r2, [r7, #6]
 800acfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	88fa      	ldrh	r2, [r7, #6]
 800ad06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ad34:	d107      	bne.n	800ad46 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad44:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b94      	ldr	r3, [pc, #592]	; (800afa0 <HAL_SPI_Receive+0x35c>)
 800ad4e:	4013      	ands	r3, r2
 800ad50:	88f9      	ldrh	r1, [r7, #6]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	6812      	ldr	r2, [r2, #0]
 800ad56:	430b      	orrs	r3, r1
 800ad58:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f042 0201 	orr.w	r2, r2, #1
 800ad68:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad72:	d107      	bne.n	800ad84 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	2b0f      	cmp	r3, #15
 800ad8a:	d948      	bls.n	800ae1e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ad8c:	e040      	b.n	800ae10 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	695a      	ldr	r2, [r3, #20]
 800ad94:	f248 0308 	movw	r3, #32776	; 0x8008
 800ad98:	4013      	ands	r3, r2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d014      	beq.n	800adc8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ada6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ada8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adae:	1d1a      	adds	r2, r3, #4
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3b01      	subs	r3, #1
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800adc6:	e023      	b.n	800ae10 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adc8:	f7f9 f890 	bl	8003eec <HAL_GetTick>
 800adcc:	4602      	mov	r2, r0
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d803      	bhi.n	800ade0 <HAL_SPI_Receive+0x19c>
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adde:	d102      	bne.n	800ade6 <HAL_SPI_Receive+0x1a2>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d114      	bne.n	800ae10 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 fc0a 	bl	800b600 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e107      	b.n	800b020 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1b8      	bne.n	800ad8e <HAL_SPI_Receive+0x14a>
 800ae1c:	e0ed      	b.n	800affa <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	2b07      	cmp	r3, #7
 800ae24:	f240 80e2 	bls.w	800afec <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ae28:	e05b      	b.n	800aee2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d030      	beq.n	800ae9a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d014      	beq.n	800ae70 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae50:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae56:	1d1a      	adds	r2, r3, #4
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	3b02      	subs	r3, #2
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae6e:	e038      	b.n	800aee2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae74:	69ba      	ldr	r2, [r7, #24]
 800ae76:	8812      	ldrh	r2, [r2, #0]
 800ae78:	b292      	uxth	r2, r2
 800ae7a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae80:	1c9a      	adds	r2, r3, #2
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae98:	e023      	b.n	800aee2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae9a:	f7f9 f827 	bl	8003eec <HAL_GetTick>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d803      	bhi.n	800aeb2 <HAL_SPI_Receive+0x26e>
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb0:	d102      	bne.n	800aeb8 <HAL_SPI_Receive+0x274>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d114      	bne.n	800aee2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f000 fba1 	bl	800b600 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aecc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e09e      	b.n	800b020 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d19d      	bne.n	800ae2a <HAL_SPI_Receive+0x1e6>
 800aeee:	e084      	b.n	800affa <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d052      	beq.n	800afa4 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d014      	beq.n	800af36 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af16:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af1c:	1d1a      	adds	r2, r3, #4
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af28:	b29b      	uxth	r3, r3
 800af2a:	3b04      	subs	r3, #4
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800af34:	e05a      	b.n	800afec <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800af40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af44:	d914      	bls.n	800af70 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	8812      	ldrh	r2, [r2, #0]
 800af4e:	b292      	uxth	r2, r2
 800af50:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af56:	1c9a      	adds	r2, r3, #2
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af62:	b29b      	uxth	r3, r3
 800af64:	3b02      	subs	r3, #2
 800af66:	b29a      	uxth	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800af6e:	e03d      	b.n	800afec <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af7c:	7812      	ldrb	r2, [r2, #0]
 800af7e:	b2d2      	uxtb	r2, r2
 800af80:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af92:	b29b      	uxth	r3, r3
 800af94:	3b01      	subs	r3, #1
 800af96:	b29a      	uxth	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800af9e:	e025      	b.n	800afec <HAL_SPI_Receive+0x3a8>
 800afa0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afa4:	f7f8 ffa2 	bl	8003eec <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d803      	bhi.n	800afbc <HAL_SPI_Receive+0x378>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afba:	d102      	bne.n	800afc2 <HAL_SPI_Receive+0x37e>
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d114      	bne.n	800afec <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 fb1c 	bl	800b600 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e019      	b.n	800b020 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f47f af7b 	bne.w	800aef0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 fb00 	bl	800b600 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e000      	b.n	800b020 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800b01e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3720      	adds	r7, #32
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08e      	sub	sp, #56	; 0x38
 800b02c:	af02      	add	r7, sp, #8
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3320      	adds	r3, #32
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3330      	adds	r3, #48	; 0x30
 800b04a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b052:	2b01      	cmp	r3, #1
 800b054:	d101      	bne.n	800b05a <HAL_SPI_TransmitReceive+0x32>
 800b056:	2302      	movs	r3, #2
 800b058:	e2ce      	b.n	800b5f8 <HAL_SPI_TransmitReceive+0x5d0>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b062:	f7f8 ff43 	bl	8003eec <HAL_GetTick>
 800b066:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b068:	887b      	ldrh	r3, [r7, #2]
 800b06a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b06c:	887b      	ldrh	r3, [r7, #2]
 800b06e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b076:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b07e:	7efb      	ldrb	r3, [r7, #27]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d014      	beq.n	800b0ae <HAL_SPI_TransmitReceive+0x86>
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b08a:	d106      	bne.n	800b09a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <HAL_SPI_TransmitReceive+0x72>
 800b094:	7efb      	ldrb	r3, [r7, #27]
 800b096:	2b04      	cmp	r3, #4
 800b098:	d009      	beq.n	800b0ae <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800b09a:	2302      	movs	r3, #2
 800b09c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b0a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0ac:	e2a4      	b.n	800b5f8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <HAL_SPI_TransmitReceive+0x98>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <HAL_SPI_TransmitReceive+0x98>
 800b0ba:	887b      	ldrh	r3, [r7, #2]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d109      	bne.n	800b0d4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b0ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0d2:	e291      	b.n	800b5f8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d003      	beq.n	800b0e8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2205      	movs	r2, #5
 800b0e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	887a      	ldrh	r2, [r7, #2]
 800b0fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	887a      	ldrh	r2, [r7, #2]
 800b102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	887a      	ldrh	r2, [r7, #2]
 800b110:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	887a      	ldrh	r2, [r7, #2]
 800b118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	4b9f      	ldr	r3, [pc, #636]	; (800b3ac <HAL_SPI_TransmitReceive+0x384>)
 800b130:	4013      	ands	r3, r2
 800b132:	8879      	ldrh	r1, [r7, #2]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	6812      	ldr	r2, [r2, #0]
 800b138:	430b      	orrs	r3, r1
 800b13a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f042 0201 	orr.w	r2, r2, #1
 800b14a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b154:	d107      	bne.n	800b166 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	2b0f      	cmp	r3, #15
 800b16c:	d970      	bls.n	800b250 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b16e:	e068      	b.n	800b242 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	f003 0302 	and.w	r3, r3, #2
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d11a      	bne.n	800b1b4 <HAL_SPI_TransmitReceive+0x18c>
 800b17e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b180:	2b00      	cmp	r3, #0
 800b182:	d017      	beq.n	800b1b4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6812      	ldr	r2, [r2, #0]
 800b18e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b194:	1d1a      	adds	r2, r3, #4
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	695a      	ldr	r2, [r3, #20]
 800b1ba:	f248 0308 	movw	r3, #32776	; 0x8008
 800b1be:	4013      	ands	r3, r2
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d01a      	beq.n	800b1fa <HAL_SPI_TransmitReceive+0x1d2>
 800b1c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d017      	beq.n	800b1fa <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b1d4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1da:	1d1a      	adds	r2, r3, #4
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1fa:	f7f8 fe77 	bl	8003eec <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b206:	429a      	cmp	r2, r3
 800b208:	d803      	bhi.n	800b212 <HAL_SPI_TransmitReceive+0x1ea>
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b210:	d102      	bne.n	800b218 <HAL_SPI_TransmitReceive+0x1f0>
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	2b00      	cmp	r3, #0
 800b216:	d114      	bne.n	800b242 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 f9f1 	bl	800b600 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b22c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e1da      	b.n	800b5f8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b244:	2b00      	cmp	r3, #0
 800b246:	d193      	bne.n	800b170 <HAL_SPI_TransmitReceive+0x148>
 800b248:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d190      	bne.n	800b170 <HAL_SPI_TransmitReceive+0x148>
 800b24e:	e1ac      	b.n	800b5aa <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	2b07      	cmp	r3, #7
 800b256:	f240 81a0 	bls.w	800b59a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b25a:	e0a9      	b.n	800b3b0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	695b      	ldr	r3, [r3, #20]
 800b262:	f003 0302 	and.w	r3, r3, #2
 800b266:	2b02      	cmp	r3, #2
 800b268:	d139      	bne.n	800b2de <HAL_SPI_TransmitReceive+0x2b6>
 800b26a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d036      	beq.n	800b2de <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b270:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b272:	2b01      	cmp	r3, #1
 800b274:	d91c      	bls.n	800b2b0 <HAL_SPI_TransmitReceive+0x288>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d018      	beq.n	800b2b0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6812      	ldr	r2, [r2, #0]
 800b288:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b28e:	1d1a      	adds	r2, r3, #4
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	3b02      	subs	r3, #2
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b2ae:	e016      	b.n	800b2de <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2b4:	881a      	ldrh	r2, [r3, #0]
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2be:	1c9a      	adds	r2, r3, #2
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d03a      	beq.n	800b362 <HAL_SPI_TransmitReceive+0x33a>
 800b2ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d037      	beq.n	800b362 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d018      	beq.n	800b332 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b308:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b30a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b310:	1d1a      	adds	r2, r3, #4
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	3b02      	subs	r3, #2
 800b320:	b29a      	uxth	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b32e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b330:	e017      	b.n	800b362 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b336:	6a3a      	ldr	r2, [r7, #32]
 800b338:	8812      	ldrh	r2, [r2, #0]
 800b33a:	b292      	uxth	r2, r2
 800b33c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b342:	1c9a      	adds	r2, r3, #2
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b34e:	b29b      	uxth	r3, r3
 800b350:	3b01      	subs	r3, #1
 800b352:	b29a      	uxth	r2, r3
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b360:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b362:	f7f8 fdc3 	bl	8003eec <HAL_GetTick>
 800b366:	4602      	mov	r2, r0
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b36e:	429a      	cmp	r2, r3
 800b370:	d803      	bhi.n	800b37a <HAL_SPI_TransmitReceive+0x352>
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b378:	d102      	bne.n	800b380 <HAL_SPI_TransmitReceive+0x358>
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d117      	bne.n	800b3b0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 f93d 	bl	800b600 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b394:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e126      	b.n	800b5f8 <HAL_SPI_TransmitReceive+0x5d0>
 800b3aa:	bf00      	nop
 800b3ac:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b3b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f47f af52 	bne.w	800b25c <HAL_SPI_TransmitReceive+0x234>
 800b3b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f47f af4e 	bne.w	800b25c <HAL_SPI_TransmitReceive+0x234>
 800b3c0:	e0f3      	b.n	800b5aa <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	f003 0302 	and.w	r3, r3, #2
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d15a      	bne.n	800b486 <HAL_SPI_TransmitReceive+0x45e>
 800b3d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d057      	beq.n	800b486 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b3d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d91c      	bls.n	800b416 <HAL_SPI_TransmitReceive+0x3ee>
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	d918      	bls.n	800b416 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6812      	ldr	r2, [r2, #0]
 800b3ee:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3f4:	1d1a      	adds	r2, r3, #4
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b400:	b29b      	uxth	r3, r3
 800b402:	3b04      	subs	r3, #4
 800b404:	b29a      	uxth	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b412:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b414:	e037      	b.n	800b486 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d91b      	bls.n	800b454 <HAL_SPI_TransmitReceive+0x42c>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b420:	2b00      	cmp	r3, #0
 800b422:	d017      	beq.n	800b454 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b428:	881a      	ldrh	r2, [r3, #0]
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b432:	1c9a      	adds	r2, r3, #2
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b43e:	b29b      	uxth	r3, r3
 800b440:	3b02      	subs	r3, #2
 800b442:	b29a      	uxth	r2, r3
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b450:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b452:	e018      	b.n	800b486 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3320      	adds	r3, #32
 800b45e:	7812      	ldrb	r2, [r2, #0]
 800b460:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b472:	b29b      	uxth	r3, r3
 800b474:	3b01      	subs	r3, #1
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b484:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	695b      	ldr	r3, [r3, #20]
 800b48c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d05e      	beq.n	800b552 <HAL_SPI_TransmitReceive+0x52a>
 800b494:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d05b      	beq.n	800b552 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d018      	beq.n	800b4da <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b4b2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b8:	1d1a      	adds	r2, r3, #4
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	3b04      	subs	r3, #4
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b4d8:	e03b      	b.n	800b552 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b4e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4e8:	d918      	bls.n	800b51c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4ee:	6a3a      	ldr	r2, [r7, #32]
 800b4f0:	8812      	ldrh	r2, [r2, #0]
 800b4f2:	b292      	uxth	r2, r2
 800b4f4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4fa:	1c9a      	adds	r2, r3, #2
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b506:	b29b      	uxth	r3, r3
 800b508:	3b02      	subs	r3, #2
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b518:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b51a:	e01a      	b.n	800b552 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b528:	7812      	ldrb	r2, [r2, #0]
 800b52a:	b2d2      	uxtb	r2, r2
 800b52c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b53e:	b29b      	uxth	r3, r3
 800b540:	3b01      	subs	r3, #1
 800b542:	b29a      	uxth	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b550:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b552:	f7f8 fccb 	bl	8003eec <HAL_GetTick>
 800b556:	4602      	mov	r2, r0
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b55e:	429a      	cmp	r2, r3
 800b560:	d803      	bhi.n	800b56a <HAL_SPI_TransmitReceive+0x542>
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b568:	d102      	bne.n	800b570 <HAL_SPI_TransmitReceive+0x548>
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d114      	bne.n	800b59a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f845 	bl	800b600 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b584:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	e02e      	b.n	800b5f8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b59a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f47f af10 	bne.w	800b3c2 <HAL_SPI_TransmitReceive+0x39a>
 800b5a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f47f af0c 	bne.w	800b3c2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	2108      	movs	r1, #8
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f000 f8c3 	bl	800b740 <SPI_WaitOnFlagUntilTimeout>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d007      	beq.n	800b5d0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5c6:	f043 0220 	orr.w	r2, r3, #32
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 f815 	bl	800b600 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e001      	b.n	800b5f8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b5f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3730      	adds	r7, #48	; 0x30
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	699a      	ldr	r2, [r3, #24]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f042 0208 	orr.w	r2, r2, #8
 800b61e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	699a      	ldr	r2, [r3, #24]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f042 0210 	orr.w	r2, r2, #16
 800b62e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f022 0201 	bic.w	r2, r2, #1
 800b63e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6919      	ldr	r1, [r3, #16]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	4b3c      	ldr	r3, [pc, #240]	; (800b73c <SPI_CloseTransfer+0x13c>)
 800b64c:	400b      	ands	r3, r1
 800b64e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	689a      	ldr	r2, [r3, #8]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b65e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d014      	beq.n	800b696 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f003 0320 	and.w	r3, r3, #32
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00f      	beq.n	800b696 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b67c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	699a      	ldr	r2, [r3, #24]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f042 0220 	orr.w	r2, r2, #32
 800b694:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d014      	beq.n	800b6cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00f      	beq.n	800b6cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b2:	f043 0204 	orr.w	r2, r3, #4
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	699a      	ldr	r2, [r3, #24]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00f      	beq.n	800b6f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6dc:	f043 0201 	orr.w	r2, r3, #1
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	699a      	ldr	r2, [r3, #24]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00f      	beq.n	800b720 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b706:	f043 0208 	orr.w	r2, r3, #8
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	699a      	ldr	r2, [r3, #24]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b71e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b730:	bf00      	nop
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	fffffc90 	.word	0xfffffc90

0800b740 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	4613      	mov	r3, r2
 800b74e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b750:	e010      	b.n	800b774 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b752:	f7f8 fbcb 	bl	8003eec <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d803      	bhi.n	800b76a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b768:	d102      	bne.n	800b770 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b770:	2303      	movs	r3, #3
 800b772:	e00f      	b.n	800b794 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	695a      	ldr	r2, [r3, #20]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	4013      	ands	r3, r2
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	429a      	cmp	r2, r3
 800b782:	bf0c      	ite	eq
 800b784:	2301      	moveq	r3, #1
 800b786:	2300      	movne	r3, #0
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	461a      	mov	r2, r3
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d0df      	beq.n	800b752 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a8:	095b      	lsrs	r3, r3, #5
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	3307      	adds	r3, #7
 800b7ba:	08db      	lsrs	r3, r3, #3
 800b7bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b082      	sub	sp, #8
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e049      	b.n	800b878 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d106      	bne.n	800b7fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7f6 f867 	bl	80018cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2202      	movs	r2, #2
 800b802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4619      	mov	r1, r3
 800b810:	4610      	mov	r0, r2
 800b812:	f000 f945 	bl	800baa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2201      	movs	r2, #1
 800b862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b892:	2b01      	cmp	r3, #1
 800b894:	d101      	bne.n	800b89a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b896:	2302      	movs	r3, #2
 800b898:	e0fd      	b.n	800ba96 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b14      	cmp	r3, #20
 800b8a6:	f200 80f0 	bhi.w	800ba8a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b8aa:	a201      	add	r2, pc, #4	; (adr r2, 800b8b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b905 	.word	0x0800b905
 800b8b4:	0800ba8b 	.word	0x0800ba8b
 800b8b8:	0800ba8b 	.word	0x0800ba8b
 800b8bc:	0800ba8b 	.word	0x0800ba8b
 800b8c0:	0800b945 	.word	0x0800b945
 800b8c4:	0800ba8b 	.word	0x0800ba8b
 800b8c8:	0800ba8b 	.word	0x0800ba8b
 800b8cc:	0800ba8b 	.word	0x0800ba8b
 800b8d0:	0800b987 	.word	0x0800b987
 800b8d4:	0800ba8b 	.word	0x0800ba8b
 800b8d8:	0800ba8b 	.word	0x0800ba8b
 800b8dc:	0800ba8b 	.word	0x0800ba8b
 800b8e0:	0800b9c7 	.word	0x0800b9c7
 800b8e4:	0800ba8b 	.word	0x0800ba8b
 800b8e8:	0800ba8b 	.word	0x0800ba8b
 800b8ec:	0800ba8b 	.word	0x0800ba8b
 800b8f0:	0800ba09 	.word	0x0800ba09
 800b8f4:	0800ba8b 	.word	0x0800ba8b
 800b8f8:	0800ba8b 	.word	0x0800ba8b
 800b8fc:	0800ba8b 	.word	0x0800ba8b
 800b900:	0800ba49 	.word	0x0800ba49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68b9      	ldr	r1, [r7, #8]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 f962 	bl	800bbd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	699a      	ldr	r2, [r3, #24]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f042 0208 	orr.w	r2, r2, #8
 800b91e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	699a      	ldr	r2, [r3, #24]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 0204 	bic.w	r2, r2, #4
 800b92e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6999      	ldr	r1, [r3, #24]
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	691a      	ldr	r2, [r3, #16]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	430a      	orrs	r2, r1
 800b940:	619a      	str	r2, [r3, #24]
      break;
 800b942:	e0a3      	b.n	800ba8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68b9      	ldr	r1, [r7, #8]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f9d2 	bl	800bcf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	699a      	ldr	r2, [r3, #24]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b95e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	699a      	ldr	r2, [r3, #24]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b96e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6999      	ldr	r1, [r3, #24]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	021a      	lsls	r2, r3, #8
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	619a      	str	r2, [r3, #24]
      break;
 800b984:	e082      	b.n	800ba8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68b9      	ldr	r1, [r7, #8]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fa3b 	bl	800be08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	69da      	ldr	r2, [r3, #28]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f042 0208 	orr.w	r2, r2, #8
 800b9a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	69da      	ldr	r2, [r3, #28]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f022 0204 	bic.w	r2, r2, #4
 800b9b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	69d9      	ldr	r1, [r3, #28]
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	691a      	ldr	r2, [r3, #16]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	61da      	str	r2, [r3, #28]
      break;
 800b9c4:	e062      	b.n	800ba8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 faa1 	bl	800bf14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	69da      	ldr	r2, [r3, #28]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69da      	ldr	r2, [r3, #28]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	69d9      	ldr	r1, [r3, #28]
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	021a      	lsls	r2, r3, #8
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	61da      	str	r2, [r3, #28]
      break;
 800ba06:	e041      	b.n	800ba8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68b9      	ldr	r1, [r7, #8]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fae8 	bl	800bfe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f042 0208 	orr.w	r2, r2, #8
 800ba22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 0204 	bic.w	r2, r2, #4
 800ba32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	691a      	ldr	r2, [r3, #16]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	430a      	orrs	r2, r1
 800ba44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba46:	e021      	b.n	800ba8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68b9      	ldr	r1, [r7, #8]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 fb2a 	bl	800c0a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	021a      	lsls	r2, r3, #8
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba88:	e000      	b.n	800ba8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ba8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop

0800baa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a40      	ldr	r2, [pc, #256]	; (800bbb4 <TIM_Base_SetConfig+0x114>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d013      	beq.n	800bae0 <TIM_Base_SetConfig+0x40>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800babe:	d00f      	beq.n	800bae0 <TIM_Base_SetConfig+0x40>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a3d      	ldr	r2, [pc, #244]	; (800bbb8 <TIM_Base_SetConfig+0x118>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d00b      	beq.n	800bae0 <TIM_Base_SetConfig+0x40>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a3c      	ldr	r2, [pc, #240]	; (800bbbc <TIM_Base_SetConfig+0x11c>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d007      	beq.n	800bae0 <TIM_Base_SetConfig+0x40>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a3b      	ldr	r2, [pc, #236]	; (800bbc0 <TIM_Base_SetConfig+0x120>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d003      	beq.n	800bae0 <TIM_Base_SetConfig+0x40>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a3a      	ldr	r2, [pc, #232]	; (800bbc4 <TIM_Base_SetConfig+0x124>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d108      	bne.n	800baf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	4313      	orrs	r3, r2
 800baf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a2f      	ldr	r2, [pc, #188]	; (800bbb4 <TIM_Base_SetConfig+0x114>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d01f      	beq.n	800bb3a <TIM_Base_SetConfig+0x9a>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb00:	d01b      	beq.n	800bb3a <TIM_Base_SetConfig+0x9a>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a2c      	ldr	r2, [pc, #176]	; (800bbb8 <TIM_Base_SetConfig+0x118>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d017      	beq.n	800bb3a <TIM_Base_SetConfig+0x9a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a2b      	ldr	r2, [pc, #172]	; (800bbbc <TIM_Base_SetConfig+0x11c>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d013      	beq.n	800bb3a <TIM_Base_SetConfig+0x9a>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a2a      	ldr	r2, [pc, #168]	; (800bbc0 <TIM_Base_SetConfig+0x120>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d00f      	beq.n	800bb3a <TIM_Base_SetConfig+0x9a>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a29      	ldr	r2, [pc, #164]	; (800bbc4 <TIM_Base_SetConfig+0x124>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d00b      	beq.n	800bb3a <TIM_Base_SetConfig+0x9a>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a28      	ldr	r2, [pc, #160]	; (800bbc8 <TIM_Base_SetConfig+0x128>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d007      	beq.n	800bb3a <TIM_Base_SetConfig+0x9a>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a27      	ldr	r2, [pc, #156]	; (800bbcc <TIM_Base_SetConfig+0x12c>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d003      	beq.n	800bb3a <TIM_Base_SetConfig+0x9a>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a26      	ldr	r2, [pc, #152]	; (800bbd0 <TIM_Base_SetConfig+0x130>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d108      	bne.n	800bb4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a10      	ldr	r2, [pc, #64]	; (800bbb4 <TIM_Base_SetConfig+0x114>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d00f      	beq.n	800bb98 <TIM_Base_SetConfig+0xf8>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a12      	ldr	r2, [pc, #72]	; (800bbc4 <TIM_Base_SetConfig+0x124>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d00b      	beq.n	800bb98 <TIM_Base_SetConfig+0xf8>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a11      	ldr	r2, [pc, #68]	; (800bbc8 <TIM_Base_SetConfig+0x128>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d007      	beq.n	800bb98 <TIM_Base_SetConfig+0xf8>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a10      	ldr	r2, [pc, #64]	; (800bbcc <TIM_Base_SetConfig+0x12c>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d003      	beq.n	800bb98 <TIM_Base_SetConfig+0xf8>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a0f      	ldr	r2, [pc, #60]	; (800bbd0 <TIM_Base_SetConfig+0x130>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d103      	bne.n	800bba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	691a      	ldr	r2, [r3, #16]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	615a      	str	r2, [r3, #20]
}
 800bba6:	bf00      	nop
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	40010000 	.word	0x40010000
 800bbb8:	40000400 	.word	0x40000400
 800bbbc:	40000800 	.word	0x40000800
 800bbc0:	40000c00 	.word	0x40000c00
 800bbc4:	40010400 	.word	0x40010400
 800bbc8:	40014000 	.word	0x40014000
 800bbcc:	40014400 	.word	0x40014400
 800bbd0:	40014800 	.word	0x40014800

0800bbd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b087      	sub	sp, #28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	f023 0201 	bic.w	r2, r3, #1
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4b37      	ldr	r3, [pc, #220]	; (800bcdc <TIM_OC1_SetConfig+0x108>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f023 0303 	bic.w	r3, r3, #3
 800bc0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f023 0302 	bic.w	r3, r3, #2
 800bc1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a2d      	ldr	r2, [pc, #180]	; (800bce0 <TIM_OC1_SetConfig+0x10c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d00f      	beq.n	800bc50 <TIM_OC1_SetConfig+0x7c>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a2c      	ldr	r2, [pc, #176]	; (800bce4 <TIM_OC1_SetConfig+0x110>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d00b      	beq.n	800bc50 <TIM_OC1_SetConfig+0x7c>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a2b      	ldr	r2, [pc, #172]	; (800bce8 <TIM_OC1_SetConfig+0x114>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d007      	beq.n	800bc50 <TIM_OC1_SetConfig+0x7c>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a2a      	ldr	r2, [pc, #168]	; (800bcec <TIM_OC1_SetConfig+0x118>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d003      	beq.n	800bc50 <TIM_OC1_SetConfig+0x7c>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a29      	ldr	r2, [pc, #164]	; (800bcf0 <TIM_OC1_SetConfig+0x11c>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d10c      	bne.n	800bc6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	f023 0308 	bic.w	r3, r3, #8
 800bc56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	697a      	ldr	r2, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f023 0304 	bic.w	r3, r3, #4
 800bc68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a1c      	ldr	r2, [pc, #112]	; (800bce0 <TIM_OC1_SetConfig+0x10c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00f      	beq.n	800bc92 <TIM_OC1_SetConfig+0xbe>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a1b      	ldr	r2, [pc, #108]	; (800bce4 <TIM_OC1_SetConfig+0x110>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00b      	beq.n	800bc92 <TIM_OC1_SetConfig+0xbe>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a1a      	ldr	r2, [pc, #104]	; (800bce8 <TIM_OC1_SetConfig+0x114>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d007      	beq.n	800bc92 <TIM_OC1_SetConfig+0xbe>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a19      	ldr	r2, [pc, #100]	; (800bcec <TIM_OC1_SetConfig+0x118>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d003      	beq.n	800bc92 <TIM_OC1_SetConfig+0xbe>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a18      	ldr	r2, [pc, #96]	; (800bcf0 <TIM_OC1_SetConfig+0x11c>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d111      	bne.n	800bcb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	693a      	ldr	r2, [r7, #16]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	621a      	str	r2, [r3, #32]
}
 800bcd0:	bf00      	nop
 800bcd2:	371c      	adds	r7, #28
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	fffeff8f 	.word	0xfffeff8f
 800bce0:	40010000 	.word	0x40010000
 800bce4:	40010400 	.word	0x40010400
 800bce8:	40014000 	.word	0x40014000
 800bcec:	40014400 	.word	0x40014400
 800bcf0:	40014800 	.word	0x40014800

0800bcf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a1b      	ldr	r3, [r3, #32]
 800bd02:	f023 0210 	bic.w	r2, r3, #16
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	699b      	ldr	r3, [r3, #24]
 800bd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	4b34      	ldr	r3, [pc, #208]	; (800bdf0 <TIM_OC2_SetConfig+0xfc>)
 800bd20:	4013      	ands	r3, r2
 800bd22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	021b      	lsls	r3, r3, #8
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f023 0320 	bic.w	r3, r3, #32
 800bd3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	011b      	lsls	r3, r3, #4
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a29      	ldr	r2, [pc, #164]	; (800bdf4 <TIM_OC2_SetConfig+0x100>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d003      	beq.n	800bd5c <TIM_OC2_SetConfig+0x68>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a28      	ldr	r2, [pc, #160]	; (800bdf8 <TIM_OC2_SetConfig+0x104>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d10d      	bne.n	800bd78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	011b      	lsls	r3, r3, #4
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a1e      	ldr	r2, [pc, #120]	; (800bdf4 <TIM_OC2_SetConfig+0x100>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d00f      	beq.n	800bda0 <TIM_OC2_SetConfig+0xac>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a1d      	ldr	r2, [pc, #116]	; (800bdf8 <TIM_OC2_SetConfig+0x104>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d00b      	beq.n	800bda0 <TIM_OC2_SetConfig+0xac>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a1c      	ldr	r2, [pc, #112]	; (800bdfc <TIM_OC2_SetConfig+0x108>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d007      	beq.n	800bda0 <TIM_OC2_SetConfig+0xac>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a1b      	ldr	r2, [pc, #108]	; (800be00 <TIM_OC2_SetConfig+0x10c>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d003      	beq.n	800bda0 <TIM_OC2_SetConfig+0xac>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a1a      	ldr	r2, [pc, #104]	; (800be04 <TIM_OC2_SetConfig+0x110>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d113      	bne.n	800bdc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bda6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bdae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	621a      	str	r2, [r3, #32]
}
 800bde2:	bf00      	nop
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	feff8fff 	.word	0xfeff8fff
 800bdf4:	40010000 	.word	0x40010000
 800bdf8:	40010400 	.word	0x40010400
 800bdfc:	40014000 	.word	0x40014000
 800be00:	40014400 	.word	0x40014400
 800be04:	40014800 	.word	0x40014800

0800be08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	4313      	orrs	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	021b      	lsls	r3, r3, #8
 800be58:	697a      	ldr	r2, [r7, #20]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a27      	ldr	r2, [pc, #156]	; (800bf00 <TIM_OC3_SetConfig+0xf8>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d003      	beq.n	800be6e <TIM_OC3_SetConfig+0x66>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a26      	ldr	r2, [pc, #152]	; (800bf04 <TIM_OC3_SetConfig+0xfc>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d10d      	bne.n	800be8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	021b      	lsls	r3, r3, #8
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	4313      	orrs	r3, r2
 800be80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a1c      	ldr	r2, [pc, #112]	; (800bf00 <TIM_OC3_SetConfig+0xf8>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d00f      	beq.n	800beb2 <TIM_OC3_SetConfig+0xaa>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a1b      	ldr	r2, [pc, #108]	; (800bf04 <TIM_OC3_SetConfig+0xfc>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d00b      	beq.n	800beb2 <TIM_OC3_SetConfig+0xaa>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a1a      	ldr	r2, [pc, #104]	; (800bf08 <TIM_OC3_SetConfig+0x100>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d007      	beq.n	800beb2 <TIM_OC3_SetConfig+0xaa>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a19      	ldr	r2, [pc, #100]	; (800bf0c <TIM_OC3_SetConfig+0x104>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d003      	beq.n	800beb2 <TIM_OC3_SetConfig+0xaa>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a18      	ldr	r2, [pc, #96]	; (800bf10 <TIM_OC3_SetConfig+0x108>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d113      	bne.n	800beda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800beb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	011b      	lsls	r3, r3, #4
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	4313      	orrs	r3, r2
 800becc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	011b      	lsls	r3, r3, #4
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	697a      	ldr	r2, [r7, #20]
 800bef2:	621a      	str	r2, [r3, #32]
}
 800bef4:	bf00      	nop
 800bef6:	371c      	adds	r7, #28
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	40010000 	.word	0x40010000
 800bf04:	40010400 	.word	0x40010400
 800bf08:	40014000 	.word	0x40014000
 800bf0c:	40014400 	.word	0x40014400
 800bf10:	40014800 	.word	0x40014800

0800bf14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	69db      	ldr	r3, [r3, #28]
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	021b      	lsls	r3, r3, #8
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	031b      	lsls	r3, r3, #12
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a18      	ldr	r2, [pc, #96]	; (800bfd0 <TIM_OC4_SetConfig+0xbc>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d00f      	beq.n	800bf94 <TIM_OC4_SetConfig+0x80>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a17      	ldr	r2, [pc, #92]	; (800bfd4 <TIM_OC4_SetConfig+0xc0>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d00b      	beq.n	800bf94 <TIM_OC4_SetConfig+0x80>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a16      	ldr	r2, [pc, #88]	; (800bfd8 <TIM_OC4_SetConfig+0xc4>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d007      	beq.n	800bf94 <TIM_OC4_SetConfig+0x80>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a15      	ldr	r2, [pc, #84]	; (800bfdc <TIM_OC4_SetConfig+0xc8>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d003      	beq.n	800bf94 <TIM_OC4_SetConfig+0x80>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a14      	ldr	r2, [pc, #80]	; (800bfe0 <TIM_OC4_SetConfig+0xcc>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d109      	bne.n	800bfa8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	695b      	ldr	r3, [r3, #20]
 800bfa0:	019b      	lsls	r3, r3, #6
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	621a      	str	r2, [r3, #32]
}
 800bfc2:	bf00      	nop
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	40010000 	.word	0x40010000
 800bfd4:	40010400 	.word	0x40010400
 800bfd8:	40014000 	.word	0x40014000
 800bfdc:	40014400 	.word	0x40014400
 800bfe0:	40014800 	.word	0x40014800

0800bfe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b087      	sub	sp, #28
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c024:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	041b      	lsls	r3, r3, #16
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4313      	orrs	r3, r2
 800c030:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a17      	ldr	r2, [pc, #92]	; (800c094 <TIM_OC5_SetConfig+0xb0>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d00f      	beq.n	800c05a <TIM_OC5_SetConfig+0x76>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a16      	ldr	r2, [pc, #88]	; (800c098 <TIM_OC5_SetConfig+0xb4>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d00b      	beq.n	800c05a <TIM_OC5_SetConfig+0x76>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a15      	ldr	r2, [pc, #84]	; (800c09c <TIM_OC5_SetConfig+0xb8>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d007      	beq.n	800c05a <TIM_OC5_SetConfig+0x76>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a14      	ldr	r2, [pc, #80]	; (800c0a0 <TIM_OC5_SetConfig+0xbc>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d003      	beq.n	800c05a <TIM_OC5_SetConfig+0x76>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4a13      	ldr	r2, [pc, #76]	; (800c0a4 <TIM_OC5_SetConfig+0xc0>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d109      	bne.n	800c06e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	021b      	lsls	r3, r3, #8
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	621a      	str	r2, [r3, #32]
}
 800c088:	bf00      	nop
 800c08a:	371c      	adds	r7, #28
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr
 800c094:	40010000 	.word	0x40010000
 800c098:	40010400 	.word	0x40010400
 800c09c:	40014000 	.word	0x40014000
 800c0a0:	40014400 	.word	0x40014400
 800c0a4:	40014800 	.word	0x40014800

0800c0a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b087      	sub	sp, #28
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a1b      	ldr	r3, [r3, #32]
 800c0c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	021b      	lsls	r3, r3, #8
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	051b      	lsls	r3, r3, #20
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a18      	ldr	r2, [pc, #96]	; (800c15c <TIM_OC6_SetConfig+0xb4>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d00f      	beq.n	800c120 <TIM_OC6_SetConfig+0x78>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a17      	ldr	r2, [pc, #92]	; (800c160 <TIM_OC6_SetConfig+0xb8>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d00b      	beq.n	800c120 <TIM_OC6_SetConfig+0x78>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a16      	ldr	r2, [pc, #88]	; (800c164 <TIM_OC6_SetConfig+0xbc>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d007      	beq.n	800c120 <TIM_OC6_SetConfig+0x78>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a15      	ldr	r2, [pc, #84]	; (800c168 <TIM_OC6_SetConfig+0xc0>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d003      	beq.n	800c120 <TIM_OC6_SetConfig+0x78>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a14      	ldr	r2, [pc, #80]	; (800c16c <TIM_OC6_SetConfig+0xc4>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d109      	bne.n	800c134 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c126:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	029b      	lsls	r3, r3, #10
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	4313      	orrs	r3, r2
 800c132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	621a      	str	r2, [r3, #32]
}
 800c14e:	bf00      	nop
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	40010000 	.word	0x40010000
 800c160:	40010400 	.word	0x40010400
 800c164:	40014000 	.word	0x40014000
 800c168:	40014400 	.word	0x40014400
 800c16c:	40014800 	.word	0x40014800

0800c170 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d109      	bne.n	800c194 <HAL_TIMEx_PWMN_Start+0x24>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b01      	cmp	r3, #1
 800c18a:	bf14      	ite	ne
 800c18c:	2301      	movne	r3, #1
 800c18e:	2300      	moveq	r3, #0
 800c190:	b2db      	uxtb	r3, r3
 800c192:	e022      	b.n	800c1da <HAL_TIMEx_PWMN_Start+0x6a>
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	2b04      	cmp	r3, #4
 800c198:	d109      	bne.n	800c1ae <HAL_TIMEx_PWMN_Start+0x3e>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	bf14      	ite	ne
 800c1a6:	2301      	movne	r3, #1
 800c1a8:	2300      	moveq	r3, #0
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	e015      	b.n	800c1da <HAL_TIMEx_PWMN_Start+0x6a>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b08      	cmp	r3, #8
 800c1b2:	d109      	bne.n	800c1c8 <HAL_TIMEx_PWMN_Start+0x58>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	bf14      	ite	ne
 800c1c0:	2301      	movne	r3, #1
 800c1c2:	2300      	moveq	r3, #0
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	e008      	b.n	800c1da <HAL_TIMEx_PWMN_Start+0x6a>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	bf14      	ite	ne
 800c1d4:	2301      	movne	r3, #1
 800c1d6:	2300      	moveq	r3, #0
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e06e      	b.n	800c2c0 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d104      	bne.n	800c1f2 <HAL_TIMEx_PWMN_Start+0x82>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1f0:	e013      	b.n	800c21a <HAL_TIMEx_PWMN_Start+0xaa>
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d104      	bne.n	800c202 <HAL_TIMEx_PWMN_Start+0x92>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c200:	e00b      	b.n	800c21a <HAL_TIMEx_PWMN_Start+0xaa>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2b08      	cmp	r3, #8
 800c206:	d104      	bne.n	800c212 <HAL_TIMEx_PWMN_Start+0xa2>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c210:	e003      	b.n	800c21a <HAL_TIMEx_PWMN_Start+0xaa>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2202      	movs	r2, #2
 800c216:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2204      	movs	r2, #4
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	4618      	mov	r0, r3
 800c224:	f000 f964 	bl	800c4f0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c236:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a22      	ldr	r2, [pc, #136]	; (800c2c8 <HAL_TIMEx_PWMN_Start+0x158>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d01d      	beq.n	800c27e <HAL_TIMEx_PWMN_Start+0x10e>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c24a:	d018      	beq.n	800c27e <HAL_TIMEx_PWMN_Start+0x10e>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a1e      	ldr	r2, [pc, #120]	; (800c2cc <HAL_TIMEx_PWMN_Start+0x15c>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d013      	beq.n	800c27e <HAL_TIMEx_PWMN_Start+0x10e>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a1d      	ldr	r2, [pc, #116]	; (800c2d0 <HAL_TIMEx_PWMN_Start+0x160>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00e      	beq.n	800c27e <HAL_TIMEx_PWMN_Start+0x10e>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a1b      	ldr	r2, [pc, #108]	; (800c2d4 <HAL_TIMEx_PWMN_Start+0x164>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d009      	beq.n	800c27e <HAL_TIMEx_PWMN_Start+0x10e>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a1a      	ldr	r2, [pc, #104]	; (800c2d8 <HAL_TIMEx_PWMN_Start+0x168>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d004      	beq.n	800c27e <HAL_TIMEx_PWMN_Start+0x10e>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a18      	ldr	r2, [pc, #96]	; (800c2dc <HAL_TIMEx_PWMN_Start+0x16c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d115      	bne.n	800c2aa <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689a      	ldr	r2, [r3, #8]
 800c284:	4b16      	ldr	r3, [pc, #88]	; (800c2e0 <HAL_TIMEx_PWMN_Start+0x170>)
 800c286:	4013      	ands	r3, r2
 800c288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2b06      	cmp	r3, #6
 800c28e:	d015      	beq.n	800c2bc <HAL_TIMEx_PWMN_Start+0x14c>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c296:	d011      	beq.n	800c2bc <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f042 0201 	orr.w	r2, r2, #1
 800c2a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2a8:	e008      	b.n	800c2bc <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f042 0201 	orr.w	r2, r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]
 800c2ba:	e000      	b.n	800c2be <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	40010000 	.word	0x40010000
 800c2cc:	40000400 	.word	0x40000400
 800c2d0:	40000800 	.word	0x40000800
 800c2d4:	40000c00 	.word	0x40000c00
 800c2d8:	40010400 	.word	0x40010400
 800c2dc:	40001800 	.word	0x40001800
 800c2e0:	00010007 	.word	0x00010007

0800c2e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d101      	bne.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	e068      	b.n	800c3ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2202      	movs	r2, #2
 800c308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a2e      	ldr	r2, [pc, #184]	; (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d004      	beq.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a2d      	ldr	r2, [pc, #180]	; (800c3e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d108      	bne.n	800c342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	4313      	orrs	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	4313      	orrs	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a1e      	ldr	r2, [pc, #120]	; (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d01d      	beq.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c36e:	d018      	beq.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a1b      	ldr	r2, [pc, #108]	; (800c3e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d013      	beq.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a1a      	ldr	r2, [pc, #104]	; (800c3e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d00e      	beq.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a18      	ldr	r2, [pc, #96]	; (800c3ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d009      	beq.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a13      	ldr	r2, [pc, #76]	; (800c3e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d004      	beq.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a14      	ldr	r2, [pc, #80]	; (800c3f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d10c      	bne.n	800c3bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	40010000 	.word	0x40010000
 800c3e0:	40010400 	.word	0x40010400
 800c3e4:	40000400 	.word	0x40000400
 800c3e8:	40000800 	.word	0x40000800
 800c3ec:	40000c00 	.word	0x40000c00
 800c3f0:	40001800 	.word	0x40001800

0800c3f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3fe:	2300      	movs	r3, #0
 800c400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d101      	bne.n	800c410 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c40c:	2302      	movs	r3, #2
 800c40e:	e065      	b.n	800c4dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	4313      	orrs	r3, r2
 800c424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	4313      	orrs	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	4313      	orrs	r3, r2
 800c440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	4313      	orrs	r3, r2
 800c46a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c476:	4313      	orrs	r3, r2
 800c478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	041b      	lsls	r3, r3, #16
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a16      	ldr	r2, [pc, #88]	; (800c4e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d004      	beq.n	800c49e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a14      	ldr	r2, [pc, #80]	; (800c4ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d115      	bne.n	800c4ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a8:	051b      	lsls	r3, r3, #20
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	69db      	ldr	r3, [r3, #28]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	40010000 	.word	0x40010000
 800c4ec:	40010400 	.word	0x40010400

0800c4f0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b087      	sub	sp, #28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f003 031f 	and.w	r3, r3, #31
 800c502:	2204      	movs	r2, #4
 800c504:	fa02 f303 	lsl.w	r3, r2, r3
 800c508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6a1a      	ldr	r2, [r3, #32]
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	43db      	mvns	r3, r3
 800c512:	401a      	ands	r2, r3
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6a1a      	ldr	r2, [r3, #32]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	f003 031f 	and.w	r3, r3, #31
 800c522:	6879      	ldr	r1, [r7, #4]
 800c524:	fa01 f303 	lsl.w	r3, r1, r3
 800c528:	431a      	orrs	r2, r3
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	621a      	str	r2, [r3, #32]
}
 800c52e:	bf00      	nop
 800c530:	371c      	adds	r7, #28
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b082      	sub	sp, #8
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	e042      	b.n	800c5d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c552:	2b00      	cmp	r3, #0
 800c554:	d106      	bne.n	800c564 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7f5 faf6 	bl	8001b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2224      	movs	r2, #36	; 0x24
 800c568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0201 	bic.w	r2, r2, #1
 800c57a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f82d 	bl	800c5dc <UART_SetConfig>
 800c582:	4603      	mov	r3, r0
 800c584:	2b01      	cmp	r3, #1
 800c586:	d101      	bne.n	800c58c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e022      	b.n	800c5d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c590:	2b00      	cmp	r3, #0
 800c592:	d002      	beq.n	800c59a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fd81 	bl	800d09c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	685a      	ldr	r2, [r3, #4]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	689a      	ldr	r2, [r3, #8]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fe08 	bl	800d1e0 <UART_CheckIdleState>
 800c5d0:	4603      	mov	r3, r0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5dc:	b5b0      	push	{r4, r5, r7, lr}
 800c5de:	b08e      	sub	sp, #56	; 0x38
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	689a      	ldr	r2, [r3, #8]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	431a      	orrs	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	4bbf      	ldr	r3, [pc, #764]	; (800c908 <UART_SetConfig+0x32c>)
 800c60a:	4013      	ands	r3, r2
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	6812      	ldr	r2, [r2, #0]
 800c610:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c612:	430b      	orrs	r3, r1
 800c614:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68da      	ldr	r2, [r3, #12]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	430a      	orrs	r2, r1
 800c62a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4ab5      	ldr	r2, [pc, #724]	; (800c90c <UART_SetConfig+0x330>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d004      	beq.n	800c646 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c642:	4313      	orrs	r3, r2
 800c644:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	689a      	ldr	r2, [r3, #8]
 800c64c:	4bb0      	ldr	r3, [pc, #704]	; (800c910 <UART_SetConfig+0x334>)
 800c64e:	4013      	ands	r3, r2
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c656:	430b      	orrs	r3, r1
 800c658:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	f023 010f 	bic.w	r1, r3, #15
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	430a      	orrs	r2, r1
 800c66e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4aa7      	ldr	r2, [pc, #668]	; (800c914 <UART_SetConfig+0x338>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d176      	bne.n	800c768 <UART_SetConfig+0x18c>
 800c67a:	4ba7      	ldr	r3, [pc, #668]	; (800c918 <UART_SetConfig+0x33c>)
 800c67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c682:	2b28      	cmp	r3, #40	; 0x28
 800c684:	d86c      	bhi.n	800c760 <UART_SetConfig+0x184>
 800c686:	a201      	add	r2, pc, #4	; (adr r2, 800c68c <UART_SetConfig+0xb0>)
 800c688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68c:	0800c731 	.word	0x0800c731
 800c690:	0800c761 	.word	0x0800c761
 800c694:	0800c761 	.word	0x0800c761
 800c698:	0800c761 	.word	0x0800c761
 800c69c:	0800c761 	.word	0x0800c761
 800c6a0:	0800c761 	.word	0x0800c761
 800c6a4:	0800c761 	.word	0x0800c761
 800c6a8:	0800c761 	.word	0x0800c761
 800c6ac:	0800c739 	.word	0x0800c739
 800c6b0:	0800c761 	.word	0x0800c761
 800c6b4:	0800c761 	.word	0x0800c761
 800c6b8:	0800c761 	.word	0x0800c761
 800c6bc:	0800c761 	.word	0x0800c761
 800c6c0:	0800c761 	.word	0x0800c761
 800c6c4:	0800c761 	.word	0x0800c761
 800c6c8:	0800c761 	.word	0x0800c761
 800c6cc:	0800c741 	.word	0x0800c741
 800c6d0:	0800c761 	.word	0x0800c761
 800c6d4:	0800c761 	.word	0x0800c761
 800c6d8:	0800c761 	.word	0x0800c761
 800c6dc:	0800c761 	.word	0x0800c761
 800c6e0:	0800c761 	.word	0x0800c761
 800c6e4:	0800c761 	.word	0x0800c761
 800c6e8:	0800c761 	.word	0x0800c761
 800c6ec:	0800c749 	.word	0x0800c749
 800c6f0:	0800c761 	.word	0x0800c761
 800c6f4:	0800c761 	.word	0x0800c761
 800c6f8:	0800c761 	.word	0x0800c761
 800c6fc:	0800c761 	.word	0x0800c761
 800c700:	0800c761 	.word	0x0800c761
 800c704:	0800c761 	.word	0x0800c761
 800c708:	0800c761 	.word	0x0800c761
 800c70c:	0800c751 	.word	0x0800c751
 800c710:	0800c761 	.word	0x0800c761
 800c714:	0800c761 	.word	0x0800c761
 800c718:	0800c761 	.word	0x0800c761
 800c71c:	0800c761 	.word	0x0800c761
 800c720:	0800c761 	.word	0x0800c761
 800c724:	0800c761 	.word	0x0800c761
 800c728:	0800c761 	.word	0x0800c761
 800c72c:	0800c759 	.word	0x0800c759
 800c730:	2301      	movs	r3, #1
 800c732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c736:	e222      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c738:	2304      	movs	r3, #4
 800c73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73e:	e21e      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c740:	2308      	movs	r3, #8
 800c742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c746:	e21a      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c748:	2310      	movs	r3, #16
 800c74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c74e:	e216      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c750:	2320      	movs	r3, #32
 800c752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c756:	e212      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c758:	2340      	movs	r3, #64	; 0x40
 800c75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c75e:	e20e      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c760:	2380      	movs	r3, #128	; 0x80
 800c762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c766:	e20a      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a6b      	ldr	r2, [pc, #428]	; (800c91c <UART_SetConfig+0x340>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d130      	bne.n	800c7d4 <UART_SetConfig+0x1f8>
 800c772:	4b69      	ldr	r3, [pc, #420]	; (800c918 <UART_SetConfig+0x33c>)
 800c774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c776:	f003 0307 	and.w	r3, r3, #7
 800c77a:	2b05      	cmp	r3, #5
 800c77c:	d826      	bhi.n	800c7cc <UART_SetConfig+0x1f0>
 800c77e:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <UART_SetConfig+0x1a8>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c79d 	.word	0x0800c79d
 800c788:	0800c7a5 	.word	0x0800c7a5
 800c78c:	0800c7ad 	.word	0x0800c7ad
 800c790:	0800c7b5 	.word	0x0800c7b5
 800c794:	0800c7bd 	.word	0x0800c7bd
 800c798:	0800c7c5 	.word	0x0800c7c5
 800c79c:	2300      	movs	r3, #0
 800c79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7a2:	e1ec      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c7a4:	2304      	movs	r3, #4
 800c7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7aa:	e1e8      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c7ac:	2308      	movs	r3, #8
 800c7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b2:	e1e4      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c7b4:	2310      	movs	r3, #16
 800c7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ba:	e1e0      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c7bc:	2320      	movs	r3, #32
 800c7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7c2:	e1dc      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c7c4:	2340      	movs	r3, #64	; 0x40
 800c7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ca:	e1d8      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c7cc:	2380      	movs	r3, #128	; 0x80
 800c7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7d2:	e1d4      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a51      	ldr	r2, [pc, #324]	; (800c920 <UART_SetConfig+0x344>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d130      	bne.n	800c840 <UART_SetConfig+0x264>
 800c7de:	4b4e      	ldr	r3, [pc, #312]	; (800c918 <UART_SetConfig+0x33c>)
 800c7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e2:	f003 0307 	and.w	r3, r3, #7
 800c7e6:	2b05      	cmp	r3, #5
 800c7e8:	d826      	bhi.n	800c838 <UART_SetConfig+0x25c>
 800c7ea:	a201      	add	r2, pc, #4	; (adr r2, 800c7f0 <UART_SetConfig+0x214>)
 800c7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f0:	0800c809 	.word	0x0800c809
 800c7f4:	0800c811 	.word	0x0800c811
 800c7f8:	0800c819 	.word	0x0800c819
 800c7fc:	0800c821 	.word	0x0800c821
 800c800:	0800c829 	.word	0x0800c829
 800c804:	0800c831 	.word	0x0800c831
 800c808:	2300      	movs	r3, #0
 800c80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c80e:	e1b6      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c810:	2304      	movs	r3, #4
 800c812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c816:	e1b2      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c818:	2308      	movs	r3, #8
 800c81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81e:	e1ae      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c820:	2310      	movs	r3, #16
 800c822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c826:	e1aa      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c828:	2320      	movs	r3, #32
 800c82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82e:	e1a6      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c830:	2340      	movs	r3, #64	; 0x40
 800c832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c836:	e1a2      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c838:	2380      	movs	r3, #128	; 0x80
 800c83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83e:	e19e      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a37      	ldr	r2, [pc, #220]	; (800c924 <UART_SetConfig+0x348>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d130      	bne.n	800c8ac <UART_SetConfig+0x2d0>
 800c84a:	4b33      	ldr	r3, [pc, #204]	; (800c918 <UART_SetConfig+0x33c>)
 800c84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84e:	f003 0307 	and.w	r3, r3, #7
 800c852:	2b05      	cmp	r3, #5
 800c854:	d826      	bhi.n	800c8a4 <UART_SetConfig+0x2c8>
 800c856:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <UART_SetConfig+0x280>)
 800c858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85c:	0800c875 	.word	0x0800c875
 800c860:	0800c87d 	.word	0x0800c87d
 800c864:	0800c885 	.word	0x0800c885
 800c868:	0800c88d 	.word	0x0800c88d
 800c86c:	0800c895 	.word	0x0800c895
 800c870:	0800c89d 	.word	0x0800c89d
 800c874:	2300      	movs	r3, #0
 800c876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87a:	e180      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c87c:	2304      	movs	r3, #4
 800c87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c882:	e17c      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c884:	2308      	movs	r3, #8
 800c886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88a:	e178      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c88c:	2310      	movs	r3, #16
 800c88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c892:	e174      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c894:	2320      	movs	r3, #32
 800c896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c89a:	e170      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c89c:	2340      	movs	r3, #64	; 0x40
 800c89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a2:	e16c      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c8a4:	2380      	movs	r3, #128	; 0x80
 800c8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8aa:	e168      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a1d      	ldr	r2, [pc, #116]	; (800c928 <UART_SetConfig+0x34c>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d142      	bne.n	800c93c <UART_SetConfig+0x360>
 800c8b6:	4b18      	ldr	r3, [pc, #96]	; (800c918 <UART_SetConfig+0x33c>)
 800c8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ba:	f003 0307 	and.w	r3, r3, #7
 800c8be:	2b05      	cmp	r3, #5
 800c8c0:	d838      	bhi.n	800c934 <UART_SetConfig+0x358>
 800c8c2:	a201      	add	r2, pc, #4	; (adr r2, 800c8c8 <UART_SetConfig+0x2ec>)
 800c8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c8:	0800c8e1 	.word	0x0800c8e1
 800c8cc:	0800c8e9 	.word	0x0800c8e9
 800c8d0:	0800c8f1 	.word	0x0800c8f1
 800c8d4:	0800c8f9 	.word	0x0800c8f9
 800c8d8:	0800c901 	.word	0x0800c901
 800c8dc:	0800c92d 	.word	0x0800c92d
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e6:	e14a      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ee:	e146      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c8f0:	2308      	movs	r3, #8
 800c8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8f6:	e142      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c8f8:	2310      	movs	r3, #16
 800c8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8fe:	e13e      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c900:	2320      	movs	r3, #32
 800c902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c906:	e13a      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c908:	cfff69f3 	.word	0xcfff69f3
 800c90c:	58000c00 	.word	0x58000c00
 800c910:	11fff4ff 	.word	0x11fff4ff
 800c914:	40011000 	.word	0x40011000
 800c918:	58024400 	.word	0x58024400
 800c91c:	40004400 	.word	0x40004400
 800c920:	40004800 	.word	0x40004800
 800c924:	40004c00 	.word	0x40004c00
 800c928:	40005000 	.word	0x40005000
 800c92c:	2340      	movs	r3, #64	; 0x40
 800c92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c932:	e124      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c934:	2380      	movs	r3, #128	; 0x80
 800c936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93a:	e120      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4acc      	ldr	r2, [pc, #816]	; (800cc74 <UART_SetConfig+0x698>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d176      	bne.n	800ca34 <UART_SetConfig+0x458>
 800c946:	4bcc      	ldr	r3, [pc, #816]	; (800cc78 <UART_SetConfig+0x69c>)
 800c948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c94a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c94e:	2b28      	cmp	r3, #40	; 0x28
 800c950:	d86c      	bhi.n	800ca2c <UART_SetConfig+0x450>
 800c952:	a201      	add	r2, pc, #4	; (adr r2, 800c958 <UART_SetConfig+0x37c>)
 800c954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c958:	0800c9fd 	.word	0x0800c9fd
 800c95c:	0800ca2d 	.word	0x0800ca2d
 800c960:	0800ca2d 	.word	0x0800ca2d
 800c964:	0800ca2d 	.word	0x0800ca2d
 800c968:	0800ca2d 	.word	0x0800ca2d
 800c96c:	0800ca2d 	.word	0x0800ca2d
 800c970:	0800ca2d 	.word	0x0800ca2d
 800c974:	0800ca2d 	.word	0x0800ca2d
 800c978:	0800ca05 	.word	0x0800ca05
 800c97c:	0800ca2d 	.word	0x0800ca2d
 800c980:	0800ca2d 	.word	0x0800ca2d
 800c984:	0800ca2d 	.word	0x0800ca2d
 800c988:	0800ca2d 	.word	0x0800ca2d
 800c98c:	0800ca2d 	.word	0x0800ca2d
 800c990:	0800ca2d 	.word	0x0800ca2d
 800c994:	0800ca2d 	.word	0x0800ca2d
 800c998:	0800ca0d 	.word	0x0800ca0d
 800c99c:	0800ca2d 	.word	0x0800ca2d
 800c9a0:	0800ca2d 	.word	0x0800ca2d
 800c9a4:	0800ca2d 	.word	0x0800ca2d
 800c9a8:	0800ca2d 	.word	0x0800ca2d
 800c9ac:	0800ca2d 	.word	0x0800ca2d
 800c9b0:	0800ca2d 	.word	0x0800ca2d
 800c9b4:	0800ca2d 	.word	0x0800ca2d
 800c9b8:	0800ca15 	.word	0x0800ca15
 800c9bc:	0800ca2d 	.word	0x0800ca2d
 800c9c0:	0800ca2d 	.word	0x0800ca2d
 800c9c4:	0800ca2d 	.word	0x0800ca2d
 800c9c8:	0800ca2d 	.word	0x0800ca2d
 800c9cc:	0800ca2d 	.word	0x0800ca2d
 800c9d0:	0800ca2d 	.word	0x0800ca2d
 800c9d4:	0800ca2d 	.word	0x0800ca2d
 800c9d8:	0800ca1d 	.word	0x0800ca1d
 800c9dc:	0800ca2d 	.word	0x0800ca2d
 800c9e0:	0800ca2d 	.word	0x0800ca2d
 800c9e4:	0800ca2d 	.word	0x0800ca2d
 800c9e8:	0800ca2d 	.word	0x0800ca2d
 800c9ec:	0800ca2d 	.word	0x0800ca2d
 800c9f0:	0800ca2d 	.word	0x0800ca2d
 800c9f4:	0800ca2d 	.word	0x0800ca2d
 800c9f8:	0800ca25 	.word	0x0800ca25
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca02:	e0bc      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca04:	2304      	movs	r3, #4
 800ca06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0a:	e0b8      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca0c:	2308      	movs	r3, #8
 800ca0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca12:	e0b4      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca14:	2310      	movs	r3, #16
 800ca16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1a:	e0b0      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca1c:	2320      	movs	r3, #32
 800ca1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca22:	e0ac      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca24:	2340      	movs	r3, #64	; 0x40
 800ca26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca2a:	e0a8      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca2c:	2380      	movs	r3, #128	; 0x80
 800ca2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca32:	e0a4      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a90      	ldr	r2, [pc, #576]	; (800cc7c <UART_SetConfig+0x6a0>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d130      	bne.n	800caa0 <UART_SetConfig+0x4c4>
 800ca3e:	4b8e      	ldr	r3, [pc, #568]	; (800cc78 <UART_SetConfig+0x69c>)
 800ca40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca42:	f003 0307 	and.w	r3, r3, #7
 800ca46:	2b05      	cmp	r3, #5
 800ca48:	d826      	bhi.n	800ca98 <UART_SetConfig+0x4bc>
 800ca4a:	a201      	add	r2, pc, #4	; (adr r2, 800ca50 <UART_SetConfig+0x474>)
 800ca4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca50:	0800ca69 	.word	0x0800ca69
 800ca54:	0800ca71 	.word	0x0800ca71
 800ca58:	0800ca79 	.word	0x0800ca79
 800ca5c:	0800ca81 	.word	0x0800ca81
 800ca60:	0800ca89 	.word	0x0800ca89
 800ca64:	0800ca91 	.word	0x0800ca91
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca6e:	e086      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca70:	2304      	movs	r3, #4
 800ca72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca76:	e082      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca78:	2308      	movs	r3, #8
 800ca7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca7e:	e07e      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca80:	2310      	movs	r3, #16
 800ca82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca86:	e07a      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca88:	2320      	movs	r3, #32
 800ca8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8e:	e076      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca90:	2340      	movs	r3, #64	; 0x40
 800ca92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca96:	e072      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800ca98:	2380      	movs	r3, #128	; 0x80
 800ca9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9e:	e06e      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a76      	ldr	r2, [pc, #472]	; (800cc80 <UART_SetConfig+0x6a4>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d130      	bne.n	800cb0c <UART_SetConfig+0x530>
 800caaa:	4b73      	ldr	r3, [pc, #460]	; (800cc78 <UART_SetConfig+0x69c>)
 800caac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caae:	f003 0307 	and.w	r3, r3, #7
 800cab2:	2b05      	cmp	r3, #5
 800cab4:	d826      	bhi.n	800cb04 <UART_SetConfig+0x528>
 800cab6:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <UART_SetConfig+0x4e0>)
 800cab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabc:	0800cad5 	.word	0x0800cad5
 800cac0:	0800cadd 	.word	0x0800cadd
 800cac4:	0800cae5 	.word	0x0800cae5
 800cac8:	0800caed 	.word	0x0800caed
 800cacc:	0800caf5 	.word	0x0800caf5
 800cad0:	0800cafd 	.word	0x0800cafd
 800cad4:	2300      	movs	r3, #0
 800cad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cada:	e050      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cadc:	2304      	movs	r3, #4
 800cade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae2:	e04c      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cae4:	2308      	movs	r3, #8
 800cae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caea:	e048      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800caec:	2310      	movs	r3, #16
 800caee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf2:	e044      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800caf4:	2320      	movs	r3, #32
 800caf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafa:	e040      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cafc:	2340      	movs	r3, #64	; 0x40
 800cafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb02:	e03c      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb04:	2380      	movs	r3, #128	; 0x80
 800cb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0a:	e038      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a5c      	ldr	r2, [pc, #368]	; (800cc84 <UART_SetConfig+0x6a8>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d130      	bne.n	800cb78 <UART_SetConfig+0x59c>
 800cb16:	4b58      	ldr	r3, [pc, #352]	; (800cc78 <UART_SetConfig+0x69c>)
 800cb18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb1a:	f003 0307 	and.w	r3, r3, #7
 800cb1e:	2b05      	cmp	r3, #5
 800cb20:	d826      	bhi.n	800cb70 <UART_SetConfig+0x594>
 800cb22:	a201      	add	r2, pc, #4	; (adr r2, 800cb28 <UART_SetConfig+0x54c>)
 800cb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb28:	0800cb41 	.word	0x0800cb41
 800cb2c:	0800cb49 	.word	0x0800cb49
 800cb30:	0800cb51 	.word	0x0800cb51
 800cb34:	0800cb59 	.word	0x0800cb59
 800cb38:	0800cb61 	.word	0x0800cb61
 800cb3c:	0800cb69 	.word	0x0800cb69
 800cb40:	2302      	movs	r3, #2
 800cb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb46:	e01a      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb48:	2304      	movs	r3, #4
 800cb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb4e:	e016      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb50:	2308      	movs	r3, #8
 800cb52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb56:	e012      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb58:	2310      	movs	r3, #16
 800cb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb5e:	e00e      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb60:	2320      	movs	r3, #32
 800cb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb66:	e00a      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb68:	2340      	movs	r3, #64	; 0x40
 800cb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6e:	e006      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb70:	2380      	movs	r3, #128	; 0x80
 800cb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb76:	e002      	b.n	800cb7e <UART_SetConfig+0x5a2>
 800cb78:	2380      	movs	r3, #128	; 0x80
 800cb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a40      	ldr	r2, [pc, #256]	; (800cc84 <UART_SetConfig+0x6a8>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	f040 80ef 	bne.w	800cd68 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cb8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb8e:	2b20      	cmp	r3, #32
 800cb90:	dc46      	bgt.n	800cc20 <UART_SetConfig+0x644>
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	f2c0 8081 	blt.w	800cc9a <UART_SetConfig+0x6be>
 800cb98:	3b02      	subs	r3, #2
 800cb9a:	2b1e      	cmp	r3, #30
 800cb9c:	d87d      	bhi.n	800cc9a <UART_SetConfig+0x6be>
 800cb9e:	a201      	add	r2, pc, #4	; (adr r2, 800cba4 <UART_SetConfig+0x5c8>)
 800cba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba4:	0800cc27 	.word	0x0800cc27
 800cba8:	0800cc9b 	.word	0x0800cc9b
 800cbac:	0800cc2f 	.word	0x0800cc2f
 800cbb0:	0800cc9b 	.word	0x0800cc9b
 800cbb4:	0800cc9b 	.word	0x0800cc9b
 800cbb8:	0800cc9b 	.word	0x0800cc9b
 800cbbc:	0800cc3f 	.word	0x0800cc3f
 800cbc0:	0800cc9b 	.word	0x0800cc9b
 800cbc4:	0800cc9b 	.word	0x0800cc9b
 800cbc8:	0800cc9b 	.word	0x0800cc9b
 800cbcc:	0800cc9b 	.word	0x0800cc9b
 800cbd0:	0800cc9b 	.word	0x0800cc9b
 800cbd4:	0800cc9b 	.word	0x0800cc9b
 800cbd8:	0800cc9b 	.word	0x0800cc9b
 800cbdc:	0800cc4f 	.word	0x0800cc4f
 800cbe0:	0800cc9b 	.word	0x0800cc9b
 800cbe4:	0800cc9b 	.word	0x0800cc9b
 800cbe8:	0800cc9b 	.word	0x0800cc9b
 800cbec:	0800cc9b 	.word	0x0800cc9b
 800cbf0:	0800cc9b 	.word	0x0800cc9b
 800cbf4:	0800cc9b 	.word	0x0800cc9b
 800cbf8:	0800cc9b 	.word	0x0800cc9b
 800cbfc:	0800cc9b 	.word	0x0800cc9b
 800cc00:	0800cc9b 	.word	0x0800cc9b
 800cc04:	0800cc9b 	.word	0x0800cc9b
 800cc08:	0800cc9b 	.word	0x0800cc9b
 800cc0c:	0800cc9b 	.word	0x0800cc9b
 800cc10:	0800cc9b 	.word	0x0800cc9b
 800cc14:	0800cc9b 	.word	0x0800cc9b
 800cc18:	0800cc9b 	.word	0x0800cc9b
 800cc1c:	0800cc8d 	.word	0x0800cc8d
 800cc20:	2b40      	cmp	r3, #64	; 0x40
 800cc22:	d036      	beq.n	800cc92 <UART_SetConfig+0x6b6>
 800cc24:	e039      	b.n	800cc9a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cc26:	f7fc fc8f 	bl	8009548 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc2a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc2c:	e03b      	b.n	800cca6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc2e:	f107 0314 	add.w	r3, r7, #20
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fc fc9e 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc3c:	e033      	b.n	800cca6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc3e:	f107 0308 	add.w	r3, r7, #8
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fc fdea 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc4c:	e02b      	b.n	800cca6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc4e:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <UART_SetConfig+0x69c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f003 0320 	and.w	r3, r3, #32
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d009      	beq.n	800cc6e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc5a:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <UART_SetConfig+0x69c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	08db      	lsrs	r3, r3, #3
 800cc60:	f003 0303 	and.w	r3, r3, #3
 800cc64:	4a08      	ldr	r2, [pc, #32]	; (800cc88 <UART_SetConfig+0x6ac>)
 800cc66:	fa22 f303 	lsr.w	r3, r2, r3
 800cc6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc6c:	e01b      	b.n	800cca6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800cc6e:	4b06      	ldr	r3, [pc, #24]	; (800cc88 <UART_SetConfig+0x6ac>)
 800cc70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc72:	e018      	b.n	800cca6 <UART_SetConfig+0x6ca>
 800cc74:	40011400 	.word	0x40011400
 800cc78:	58024400 	.word	0x58024400
 800cc7c:	40007800 	.word	0x40007800
 800cc80:	40007c00 	.word	0x40007c00
 800cc84:	58000c00 	.word	0x58000c00
 800cc88:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc8c:	4bc4      	ldr	r3, [pc, #784]	; (800cfa0 <UART_SetConfig+0x9c4>)
 800cc8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc90:	e009      	b.n	800cca6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc98:	e005      	b.n	800cca6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cca4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f000 81da 	beq.w	800d062 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb2:	4abc      	ldr	r2, [pc, #752]	; (800cfa4 <UART_SetConfig+0x9c8>)
 800ccb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccc0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685a      	ldr	r2, [r3, #4]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	4413      	add	r3, r2
 800cccc:	6a3a      	ldr	r2, [r7, #32]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d305      	bcc.n	800ccde <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccd8:	6a3a      	ldr	r2, [r7, #32]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d903      	bls.n	800cce6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cce4:	e1bd      	b.n	800d062 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	4618      	mov	r0, r3
 800ccea:	f04f 0100 	mov.w	r1, #0
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf2:	4aac      	ldr	r2, [pc, #688]	; (800cfa4 <UART_SetConfig+0x9c8>)
 800ccf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	f04f 0300 	mov.w	r3, #0
 800ccfe:	f7f3 fb3f 	bl	8000380 <__aeabi_uldivmod>
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	4610      	mov	r0, r2
 800cd08:	4619      	mov	r1, r3
 800cd0a:	f04f 0200 	mov.w	r2, #0
 800cd0e:	f04f 0300 	mov.w	r3, #0
 800cd12:	020b      	lsls	r3, r1, #8
 800cd14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cd18:	0202      	lsls	r2, r0, #8
 800cd1a:	6879      	ldr	r1, [r7, #4]
 800cd1c:	6849      	ldr	r1, [r1, #4]
 800cd1e:	0849      	lsrs	r1, r1, #1
 800cd20:	4608      	mov	r0, r1
 800cd22:	f04f 0100 	mov.w	r1, #0
 800cd26:	1814      	adds	r4, r2, r0
 800cd28:	eb43 0501 	adc.w	r5, r3, r1
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	461a      	mov	r2, r3
 800cd32:	f04f 0300 	mov.w	r3, #0
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 fb21 	bl	8000380 <__aeabi_uldivmod>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	4613      	mov	r3, r2
 800cd44:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd4c:	d308      	bcc.n	800cd60 <UART_SetConfig+0x784>
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd54:	d204      	bcs.n	800cd60 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd5c:	60da      	str	r2, [r3, #12]
 800cd5e:	e180      	b.n	800d062 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cd66:	e17c      	b.n	800d062 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	69db      	ldr	r3, [r3, #28]
 800cd6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd70:	f040 80bf 	bne.w	800cef2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800cd74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd78:	2b20      	cmp	r3, #32
 800cd7a:	dc49      	bgt.n	800ce10 <UART_SetConfig+0x834>
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	db7c      	blt.n	800ce7a <UART_SetConfig+0x89e>
 800cd80:	2b20      	cmp	r3, #32
 800cd82:	d87a      	bhi.n	800ce7a <UART_SetConfig+0x89e>
 800cd84:	a201      	add	r2, pc, #4	; (adr r2, 800cd8c <UART_SetConfig+0x7b0>)
 800cd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd8a:	bf00      	nop
 800cd8c:	0800ce17 	.word	0x0800ce17
 800cd90:	0800ce1f 	.word	0x0800ce1f
 800cd94:	0800ce7b 	.word	0x0800ce7b
 800cd98:	0800ce7b 	.word	0x0800ce7b
 800cd9c:	0800ce27 	.word	0x0800ce27
 800cda0:	0800ce7b 	.word	0x0800ce7b
 800cda4:	0800ce7b 	.word	0x0800ce7b
 800cda8:	0800ce7b 	.word	0x0800ce7b
 800cdac:	0800ce37 	.word	0x0800ce37
 800cdb0:	0800ce7b 	.word	0x0800ce7b
 800cdb4:	0800ce7b 	.word	0x0800ce7b
 800cdb8:	0800ce7b 	.word	0x0800ce7b
 800cdbc:	0800ce7b 	.word	0x0800ce7b
 800cdc0:	0800ce7b 	.word	0x0800ce7b
 800cdc4:	0800ce7b 	.word	0x0800ce7b
 800cdc8:	0800ce7b 	.word	0x0800ce7b
 800cdcc:	0800ce47 	.word	0x0800ce47
 800cdd0:	0800ce7b 	.word	0x0800ce7b
 800cdd4:	0800ce7b 	.word	0x0800ce7b
 800cdd8:	0800ce7b 	.word	0x0800ce7b
 800cddc:	0800ce7b 	.word	0x0800ce7b
 800cde0:	0800ce7b 	.word	0x0800ce7b
 800cde4:	0800ce7b 	.word	0x0800ce7b
 800cde8:	0800ce7b 	.word	0x0800ce7b
 800cdec:	0800ce7b 	.word	0x0800ce7b
 800cdf0:	0800ce7b 	.word	0x0800ce7b
 800cdf4:	0800ce7b 	.word	0x0800ce7b
 800cdf8:	0800ce7b 	.word	0x0800ce7b
 800cdfc:	0800ce7b 	.word	0x0800ce7b
 800ce00:	0800ce7b 	.word	0x0800ce7b
 800ce04:	0800ce7b 	.word	0x0800ce7b
 800ce08:	0800ce7b 	.word	0x0800ce7b
 800ce0c:	0800ce6d 	.word	0x0800ce6d
 800ce10:	2b40      	cmp	r3, #64	; 0x40
 800ce12:	d02e      	beq.n	800ce72 <UART_SetConfig+0x896>
 800ce14:	e031      	b.n	800ce7a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce16:	f7fa ff59 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 800ce1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce1c:	e033      	b.n	800ce86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce1e:	f7fa ff6b 	bl	8007cf8 <HAL_RCC_GetPCLK2Freq>
 800ce22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce24:	e02f      	b.n	800ce86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce26:	f107 0314 	add.w	r3, r7, #20
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fc fba2 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce34:	e027      	b.n	800ce86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce36:	f107 0308 	add.w	r3, r7, #8
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fc fcee 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce44:	e01f      	b.n	800ce86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce46:	4b58      	ldr	r3, [pc, #352]	; (800cfa8 <UART_SetConfig+0x9cc>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 0320 	and.w	r3, r3, #32
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d009      	beq.n	800ce66 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce52:	4b55      	ldr	r3, [pc, #340]	; (800cfa8 <UART_SetConfig+0x9cc>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	08db      	lsrs	r3, r3, #3
 800ce58:	f003 0303 	and.w	r3, r3, #3
 800ce5c:	4a53      	ldr	r2, [pc, #332]	; (800cfac <UART_SetConfig+0x9d0>)
 800ce5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce64:	e00f      	b.n	800ce86 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ce66:	4b51      	ldr	r3, [pc, #324]	; (800cfac <UART_SetConfig+0x9d0>)
 800ce68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce6a:	e00c      	b.n	800ce86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce6c:	4b4c      	ldr	r3, [pc, #304]	; (800cfa0 <UART_SetConfig+0x9c4>)
 800ce6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce70:	e009      	b.n	800ce86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce78:	e005      	b.n	800ce86 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f000 80ea 	beq.w	800d062 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce92:	4a44      	ldr	r2, [pc, #272]	; (800cfa4 <UART_SetConfig+0x9c8>)
 800ce94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cea0:	005a      	lsls	r2, r3, #1
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	085b      	lsrs	r3, r3, #1
 800cea8:	441a      	add	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb8:	2b0f      	cmp	r3, #15
 800ceba:	d916      	bls.n	800ceea <UART_SetConfig+0x90e>
 800cebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cec2:	d212      	bcs.n	800ceea <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	f023 030f 	bic.w	r3, r3, #15
 800cecc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced0:	085b      	lsrs	r3, r3, #1
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	f003 0307 	and.w	r3, r3, #7
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cedc:	4313      	orrs	r3, r2
 800cede:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cee6:	60da      	str	r2, [r3, #12]
 800cee8:	e0bb      	b.n	800d062 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cef0:	e0b7      	b.n	800d062 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cef2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cef6:	2b20      	cmp	r3, #32
 800cef8:	dc4a      	bgt.n	800cf90 <UART_SetConfig+0x9b4>
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f2c0 8086 	blt.w	800d00c <UART_SetConfig+0xa30>
 800cf00:	2b20      	cmp	r3, #32
 800cf02:	f200 8083 	bhi.w	800d00c <UART_SetConfig+0xa30>
 800cf06:	a201      	add	r2, pc, #4	; (adr r2, 800cf0c <UART_SetConfig+0x930>)
 800cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0c:	0800cf97 	.word	0x0800cf97
 800cf10:	0800cfb1 	.word	0x0800cfb1
 800cf14:	0800d00d 	.word	0x0800d00d
 800cf18:	0800d00d 	.word	0x0800d00d
 800cf1c:	0800cfb9 	.word	0x0800cfb9
 800cf20:	0800d00d 	.word	0x0800d00d
 800cf24:	0800d00d 	.word	0x0800d00d
 800cf28:	0800d00d 	.word	0x0800d00d
 800cf2c:	0800cfc9 	.word	0x0800cfc9
 800cf30:	0800d00d 	.word	0x0800d00d
 800cf34:	0800d00d 	.word	0x0800d00d
 800cf38:	0800d00d 	.word	0x0800d00d
 800cf3c:	0800d00d 	.word	0x0800d00d
 800cf40:	0800d00d 	.word	0x0800d00d
 800cf44:	0800d00d 	.word	0x0800d00d
 800cf48:	0800d00d 	.word	0x0800d00d
 800cf4c:	0800cfd9 	.word	0x0800cfd9
 800cf50:	0800d00d 	.word	0x0800d00d
 800cf54:	0800d00d 	.word	0x0800d00d
 800cf58:	0800d00d 	.word	0x0800d00d
 800cf5c:	0800d00d 	.word	0x0800d00d
 800cf60:	0800d00d 	.word	0x0800d00d
 800cf64:	0800d00d 	.word	0x0800d00d
 800cf68:	0800d00d 	.word	0x0800d00d
 800cf6c:	0800d00d 	.word	0x0800d00d
 800cf70:	0800d00d 	.word	0x0800d00d
 800cf74:	0800d00d 	.word	0x0800d00d
 800cf78:	0800d00d 	.word	0x0800d00d
 800cf7c:	0800d00d 	.word	0x0800d00d
 800cf80:	0800d00d 	.word	0x0800d00d
 800cf84:	0800d00d 	.word	0x0800d00d
 800cf88:	0800d00d 	.word	0x0800d00d
 800cf8c:	0800cfff 	.word	0x0800cfff
 800cf90:	2b40      	cmp	r3, #64	; 0x40
 800cf92:	d037      	beq.n	800d004 <UART_SetConfig+0xa28>
 800cf94:	e03a      	b.n	800d00c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf96:	f7fa fe99 	bl	8007ccc <HAL_RCC_GetPCLK1Freq>
 800cf9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cf9c:	e03c      	b.n	800d018 <UART_SetConfig+0xa3c>
 800cf9e:	bf00      	nop
 800cfa0:	003d0900 	.word	0x003d0900
 800cfa4:	0801e334 	.word	0x0801e334
 800cfa8:	58024400 	.word	0x58024400
 800cfac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfb0:	f7fa fea2 	bl	8007cf8 <HAL_RCC_GetPCLK2Freq>
 800cfb4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cfb6:	e02f      	b.n	800d018 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfb8:	f107 0314 	add.w	r3, r7, #20
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fc fad9 	bl	8009574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfc6:	e027      	b.n	800d018 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfc8:	f107 0308 	add.w	r3, r7, #8
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fc fc25 	bl	800981c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cfd6:	e01f      	b.n	800d018 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfd8:	4b2c      	ldr	r3, [pc, #176]	; (800d08c <UART_SetConfig+0xab0>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 0320 	and.w	r3, r3, #32
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d009      	beq.n	800cff8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfe4:	4b29      	ldr	r3, [pc, #164]	; (800d08c <UART_SetConfig+0xab0>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	08db      	lsrs	r3, r3, #3
 800cfea:	f003 0303 	and.w	r3, r3, #3
 800cfee:	4a28      	ldr	r2, [pc, #160]	; (800d090 <UART_SetConfig+0xab4>)
 800cff0:	fa22 f303 	lsr.w	r3, r2, r3
 800cff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cff6:	e00f      	b.n	800d018 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800cff8:	4b25      	ldr	r3, [pc, #148]	; (800d090 <UART_SetConfig+0xab4>)
 800cffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cffc:	e00c      	b.n	800d018 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cffe:	4b25      	ldr	r3, [pc, #148]	; (800d094 <UART_SetConfig+0xab8>)
 800d000:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d002:	e009      	b.n	800d018 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d00a:	e005      	b.n	800d018 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d00c:	2300      	movs	r3, #0
 800d00e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d016:	bf00      	nop
    }

    if (pclk != 0U)
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d021      	beq.n	800d062 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d022:	4a1d      	ldr	r2, [pc, #116]	; (800d098 <UART_SetConfig+0xabc>)
 800d024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d028:	461a      	mov	r2, r3
 800d02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	085b      	lsrs	r3, r3, #1
 800d036:	441a      	add	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d040:	b29b      	uxth	r3, r3
 800d042:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	2b0f      	cmp	r3, #15
 800d048:	d908      	bls.n	800d05c <UART_SetConfig+0xa80>
 800d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d050:	d204      	bcs.n	800d05c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d058:	60da      	str	r2, [r3, #12]
 800d05a:	e002      	b.n	800d062 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2201      	movs	r2, #1
 800d06e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d07e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d082:	4618      	mov	r0, r3
 800d084:	3738      	adds	r7, #56	; 0x38
 800d086:	46bd      	mov	sp, r7
 800d088:	bdb0      	pop	{r4, r5, r7, pc}
 800d08a:	bf00      	nop
 800d08c:	58024400 	.word	0x58024400
 800d090:	03d09000 	.word	0x03d09000
 800d094:	003d0900 	.word	0x003d0900
 800d098:	0801e334 	.word	0x0801e334

0800d09c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a8:	f003 0301 	and.w	r3, r3, #1
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00a      	beq.n	800d0c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	430a      	orrs	r2, r1
 800d0c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ca:	f003 0302 	and.w	r3, r3, #2
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00a      	beq.n	800d0e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	430a      	orrs	r2, r1
 800d0e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ec:	f003 0304 	and.w	r3, r3, #4
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00a      	beq.n	800d10a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	430a      	orrs	r2, r1
 800d108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10e:	f003 0308 	and.w	r3, r3, #8
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00a      	beq.n	800d12c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	430a      	orrs	r2, r1
 800d12a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d130:	f003 0310 	and.w	r3, r3, #16
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00a      	beq.n	800d14e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	430a      	orrs	r2, r1
 800d14c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d152:	f003 0320 	and.w	r3, r3, #32
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00a      	beq.n	800d170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	430a      	orrs	r2, r1
 800d16e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d01a      	beq.n	800d1b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	430a      	orrs	r2, r1
 800d190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d19a:	d10a      	bne.n	800d1b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	430a      	orrs	r2, r1
 800d1b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00a      	beq.n	800d1d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	605a      	str	r2, [r3, #4]
  }
}
 800d1d4:	bf00      	nop
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af02      	add	r7, sp, #8
 800d1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d1f0:	f7f6 fe7c 	bl	8003eec <HAL_GetTick>
 800d1f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0308 	and.w	r3, r3, #8
 800d200:	2b08      	cmp	r3, #8
 800d202:	d10e      	bne.n	800d222 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f82f 	bl	800d276 <UART_WaitOnFlagUntilTimeout>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d21e:	2303      	movs	r3, #3
 800d220:	e025      	b.n	800d26e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b04      	cmp	r3, #4
 800d22e:	d10e      	bne.n	800d24e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f819 	bl	800d276 <UART_WaitOnFlagUntilTimeout>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d24a:	2303      	movs	r3, #3
 800d24c:	e00f      	b.n	800d26e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2220      	movs	r2, #32
 800d252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2220      	movs	r2, #32
 800d25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b084      	sub	sp, #16
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	60f8      	str	r0, [r7, #12]
 800d27e:	60b9      	str	r1, [r7, #8]
 800d280:	603b      	str	r3, [r7, #0]
 800d282:	4613      	mov	r3, r2
 800d284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d286:	e062      	b.n	800d34e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d05e      	beq.n	800d34e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d290:	f7f6 fe2c 	bl	8003eec <HAL_GetTick>
 800d294:	4602      	mov	r2, r0
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	69ba      	ldr	r2, [r7, #24]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d302      	bcc.n	800d2a6 <UART_WaitOnFlagUntilTimeout+0x30>
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d11d      	bne.n	800d2e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d2b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	689a      	ldr	r2, [r3, #8]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f022 0201 	bic.w	r2, r2, #1
 800d2c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2220      	movs	r2, #32
 800d2ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2220      	movs	r2, #32
 800d2d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	e045      	b.n	800d36e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f003 0304 	and.w	r3, r3, #4
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d02e      	beq.n	800d34e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	69db      	ldr	r3, [r3, #28]
 800d2f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2fe:	d126      	bne.n	800d34e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d308:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d318:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	689a      	ldr	r2, [r3, #8]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f022 0201 	bic.w	r2, r2, #1
 800d328:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2220      	movs	r2, #32
 800d32e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2220      	movs	r2, #32
 800d336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2220      	movs	r2, #32
 800d33e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2200      	movs	r2, #0
 800d346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e00f      	b.n	800d36e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	69da      	ldr	r2, [r3, #28]
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	4013      	ands	r3, r2
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	bf0c      	ite	eq
 800d35e:	2301      	moveq	r3, #1
 800d360:	2300      	movne	r3, #0
 800d362:	b2db      	uxtb	r3, r3
 800d364:	461a      	mov	r2, r3
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d08d      	beq.n	800d288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d376:	b480      	push	{r7}
 800d378:	b085      	sub	sp, #20
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d384:	2b01      	cmp	r3, #1
 800d386:	d101      	bne.n	800d38c <HAL_UARTEx_DisableFifoMode+0x16>
 800d388:	2302      	movs	r3, #2
 800d38a:	e027      	b.n	800d3dc <HAL_UARTEx_DisableFifoMode+0x66>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2224      	movs	r2, #36	; 0x24
 800d398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f022 0201 	bic.w	r2, r2, #1
 800d3b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d3ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d101      	bne.n	800d400 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d3fc:	2302      	movs	r3, #2
 800d3fe:	e02d      	b.n	800d45c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2224      	movs	r2, #36	; 0x24
 800d40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f022 0201 	bic.w	r2, r2, #1
 800d426:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	430a      	orrs	r2, r1
 800d43a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f84f 	bl	800d4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2220      	movs	r2, #32
 800d44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d474:	2b01      	cmp	r3, #1
 800d476:	d101      	bne.n	800d47c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d478:	2302      	movs	r3, #2
 800d47a:	e02d      	b.n	800d4d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2224      	movs	r2, #36	; 0x24
 800d488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f022 0201 	bic.w	r2, r2, #1
 800d4a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	683a      	ldr	r2, [r7, #0]
 800d4b4:	430a      	orrs	r2, r1
 800d4b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 f811 	bl	800d4e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68fa      	ldr	r2, [r7, #12]
 800d4c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2220      	movs	r2, #32
 800d4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d108      	bne.n	800d502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d500:	e031      	b.n	800d566 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d502:	2310      	movs	r3, #16
 800d504:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d506:	2310      	movs	r3, #16
 800d508:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	0e5b      	lsrs	r3, r3, #25
 800d512:	b2db      	uxtb	r3, r3
 800d514:	f003 0307 	and.w	r3, r3, #7
 800d518:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	0f5b      	lsrs	r3, r3, #29
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f003 0307 	and.w	r3, r3, #7
 800d528:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d52a:	7bbb      	ldrb	r3, [r7, #14]
 800d52c:	7b3a      	ldrb	r2, [r7, #12]
 800d52e:	4911      	ldr	r1, [pc, #68]	; (800d574 <UARTEx_SetNbDataToProcess+0x94>)
 800d530:	5c8a      	ldrb	r2, [r1, r2]
 800d532:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d536:	7b3a      	ldrb	r2, [r7, #12]
 800d538:	490f      	ldr	r1, [pc, #60]	; (800d578 <UARTEx_SetNbDataToProcess+0x98>)
 800d53a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d53c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d540:	b29a      	uxth	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	7b7a      	ldrb	r2, [r7, #13]
 800d54c:	4909      	ldr	r1, [pc, #36]	; (800d574 <UARTEx_SetNbDataToProcess+0x94>)
 800d54e:	5c8a      	ldrb	r2, [r1, r2]
 800d550:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d554:	7b7a      	ldrb	r2, [r7, #13]
 800d556:	4908      	ldr	r1, [pc, #32]	; (800d578 <UARTEx_SetNbDataToProcess+0x98>)
 800d558:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d55a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d55e:	b29a      	uxth	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d566:	bf00      	nop
 800d568:	3714      	adds	r7, #20
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	0801e34c 	.word	0x0801e34c
 800d578:	0801e354 	.word	0x0801e354

0800d57c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d57c:	b084      	sub	sp, #16
 800d57e:	b580      	push	{r7, lr}
 800d580:	b084      	sub	sp, #16
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	f107 001c 	add.w	r0, r7, #28
 800d58a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d590:	2b01      	cmp	r3, #1
 800d592:	d120      	bne.n	800d5d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68da      	ldr	r2, [r3, #12]
 800d5a4:	4b2a      	ldr	r3, [pc, #168]	; (800d650 <USB_CoreInit+0xd4>)
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d105      	bne.n	800d5ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f001 fb14 	bl	800ebf8 <USB_CoreReset>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	73fb      	strb	r3, [r7, #15]
 800d5d4:	e01a      	b.n	800d60c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f001 fb08 	bl	800ebf8 <USB_CoreReset>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	639a      	str	r2, [r3, #56]	; 0x38
 800d5fe:	e005      	b.n	800d60c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d116      	bne.n	800d640 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d616:	b29a      	uxth	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d620:	4b0c      	ldr	r3, [pc, #48]	; (800d654 <USB_CoreInit+0xd8>)
 800d622:	4313      	orrs	r3, r2
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	f043 0206 	orr.w	r2, r3, #6
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	f043 0220 	orr.w	r2, r3, #32
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d640:	7bfb      	ldrb	r3, [r7, #15]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d64c:	b004      	add	sp, #16
 800d64e:	4770      	bx	lr
 800d650:	ffbdffbf 	.word	0xffbdffbf
 800d654:	03ee0000 	.word	0x03ee0000

0800d658 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d658:	b480      	push	{r7}
 800d65a:	b087      	sub	sp, #28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	4613      	mov	r3, r2
 800d664:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d666:	79fb      	ldrb	r3, [r7, #7]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d165      	bne.n	800d738 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	4a41      	ldr	r2, [pc, #260]	; (800d774 <USB_SetTurnaroundTime+0x11c>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d906      	bls.n	800d682 <USB_SetTurnaroundTime+0x2a>
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	4a40      	ldr	r2, [pc, #256]	; (800d778 <USB_SetTurnaroundTime+0x120>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d202      	bcs.n	800d682 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d67c:	230f      	movs	r3, #15
 800d67e:	617b      	str	r3, [r7, #20]
 800d680:	e062      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	4a3c      	ldr	r2, [pc, #240]	; (800d778 <USB_SetTurnaroundTime+0x120>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d306      	bcc.n	800d698 <USB_SetTurnaroundTime+0x40>
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	4a3b      	ldr	r2, [pc, #236]	; (800d77c <USB_SetTurnaroundTime+0x124>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d202      	bcs.n	800d698 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d692:	230e      	movs	r3, #14
 800d694:	617b      	str	r3, [r7, #20]
 800d696:	e057      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	4a38      	ldr	r2, [pc, #224]	; (800d77c <USB_SetTurnaroundTime+0x124>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d306      	bcc.n	800d6ae <USB_SetTurnaroundTime+0x56>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	4a37      	ldr	r2, [pc, #220]	; (800d780 <USB_SetTurnaroundTime+0x128>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d202      	bcs.n	800d6ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d6a8:	230d      	movs	r3, #13
 800d6aa:	617b      	str	r3, [r7, #20]
 800d6ac:	e04c      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	4a33      	ldr	r2, [pc, #204]	; (800d780 <USB_SetTurnaroundTime+0x128>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d306      	bcc.n	800d6c4 <USB_SetTurnaroundTime+0x6c>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	4a32      	ldr	r2, [pc, #200]	; (800d784 <USB_SetTurnaroundTime+0x12c>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d802      	bhi.n	800d6c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d6be:	230c      	movs	r3, #12
 800d6c0:	617b      	str	r3, [r7, #20]
 800d6c2:	e041      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	4a2f      	ldr	r2, [pc, #188]	; (800d784 <USB_SetTurnaroundTime+0x12c>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d906      	bls.n	800d6da <USB_SetTurnaroundTime+0x82>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4a2e      	ldr	r2, [pc, #184]	; (800d788 <USB_SetTurnaroundTime+0x130>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d802      	bhi.n	800d6da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d6d4:	230b      	movs	r3, #11
 800d6d6:	617b      	str	r3, [r7, #20]
 800d6d8:	e036      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	4a2a      	ldr	r2, [pc, #168]	; (800d788 <USB_SetTurnaroundTime+0x130>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d906      	bls.n	800d6f0 <USB_SetTurnaroundTime+0x98>
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	4a29      	ldr	r2, [pc, #164]	; (800d78c <USB_SetTurnaroundTime+0x134>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d802      	bhi.n	800d6f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d6ea:	230a      	movs	r3, #10
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	e02b      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	4a26      	ldr	r2, [pc, #152]	; (800d78c <USB_SetTurnaroundTime+0x134>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d906      	bls.n	800d706 <USB_SetTurnaroundTime+0xae>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	4a25      	ldr	r2, [pc, #148]	; (800d790 <USB_SetTurnaroundTime+0x138>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d202      	bcs.n	800d706 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d700:	2309      	movs	r3, #9
 800d702:	617b      	str	r3, [r7, #20]
 800d704:	e020      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	4a21      	ldr	r2, [pc, #132]	; (800d790 <USB_SetTurnaroundTime+0x138>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d306      	bcc.n	800d71c <USB_SetTurnaroundTime+0xc4>
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	4a20      	ldr	r2, [pc, #128]	; (800d794 <USB_SetTurnaroundTime+0x13c>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d802      	bhi.n	800d71c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d716:	2308      	movs	r3, #8
 800d718:	617b      	str	r3, [r7, #20]
 800d71a:	e015      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	4a1d      	ldr	r2, [pc, #116]	; (800d794 <USB_SetTurnaroundTime+0x13c>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d906      	bls.n	800d732 <USB_SetTurnaroundTime+0xda>
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	4a1c      	ldr	r2, [pc, #112]	; (800d798 <USB_SetTurnaroundTime+0x140>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d202      	bcs.n	800d732 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d72c:	2307      	movs	r3, #7
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	e00a      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d732:	2306      	movs	r3, #6
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	e007      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d738:	79fb      	ldrb	r3, [r7, #7]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d73e:	2309      	movs	r3, #9
 800d740:	617b      	str	r3, [r7, #20]
 800d742:	e001      	b.n	800d748 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d744:	2309      	movs	r3, #9
 800d746:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	68da      	ldr	r2, [r3, #12]
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	029b      	lsls	r3, r3, #10
 800d75c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d760:	431a      	orrs	r2, r3
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	371c      	adds	r7, #28
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr
 800d774:	00d8acbf 	.word	0x00d8acbf
 800d778:	00e4e1c0 	.word	0x00e4e1c0
 800d77c:	00f42400 	.word	0x00f42400
 800d780:	01067380 	.word	0x01067380
 800d784:	011a499f 	.word	0x011a499f
 800d788:	01312cff 	.word	0x01312cff
 800d78c:	014ca43f 	.word	0x014ca43f
 800d790:	016e3600 	.word	0x016e3600
 800d794:	01a6ab1f 	.word	0x01a6ab1f
 800d798:	01e84800 	.word	0x01e84800

0800d79c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	f043 0201 	orr.w	r2, r3, #1
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7be:	b480      	push	{r7}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	f023 0201 	bic.w	r2, r3, #1
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d7f8:	78fb      	ldrb	r3, [r7, #3]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d106      	bne.n	800d80c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	60da      	str	r2, [r3, #12]
 800d80a:	e00b      	b.n	800d824 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d80c:	78fb      	ldrb	r3, [r7, #3]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60da      	str	r2, [r3, #12]
 800d81e:	e001      	b.n	800d824 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	e003      	b.n	800d82c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d824:	2032      	movs	r0, #50	; 0x32
 800d826:	f7f6 fb6d 	bl	8003f04 <HAL_Delay>

  return HAL_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d834:	b084      	sub	sp, #16
 800d836:	b580      	push	{r7, lr}
 800d838:	b086      	sub	sp, #24
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d84e:	2300      	movs	r3, #0
 800d850:	613b      	str	r3, [r7, #16]
 800d852:	e009      	b.n	800d868 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	3340      	adds	r3, #64	; 0x40
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4413      	add	r3, r2
 800d85e:	2200      	movs	r2, #0
 800d860:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	3301      	adds	r3, #1
 800d866:	613b      	str	r3, [r7, #16]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	2b0e      	cmp	r3, #14
 800d86c:	d9f2      	bls.n	800d854 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d870:	2b00      	cmp	r3, #0
 800d872:	d11c      	bne.n	800d8ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d882:	f043 0302 	orr.w	r3, r3, #2
 800d886:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	e005      	b.n	800d8ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	680b      	ldr	r3, [r1, #0]
 800d8d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d10c      	bne.n	800d8fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d104      	bne.n	800d8f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 f949 	bl	800db80 <USB_SetDevSpeed>
 800d8ee:	e008      	b.n	800d902 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d8f0:	2101      	movs	r1, #1
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f944 	bl	800db80 <USB_SetDevSpeed>
 800d8f8:	e003      	b.n	800d902 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d8fa:	2103      	movs	r1, #3
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f93f 	bl	800db80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d902:	2110      	movs	r1, #16
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 f8f3 	bl	800daf0 <USB_FlushTxFifo>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d910:	2301      	movs	r3, #1
 800d912:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f911 	bl	800db3c <USB_FlushRxFifo>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d001      	beq.n	800d924 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d920:	2301      	movs	r3, #1
 800d922:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d92a:	461a      	mov	r2, r3
 800d92c:	2300      	movs	r3, #0
 800d92e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d936:	461a      	mov	r2, r3
 800d938:	2300      	movs	r3, #0
 800d93a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d942:	461a      	mov	r2, r3
 800d944:	2300      	movs	r3, #0
 800d946:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d948:	2300      	movs	r3, #0
 800d94a:	613b      	str	r3, [r7, #16]
 800d94c:	e043      	b.n	800d9d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	015a      	lsls	r2, r3, #5
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	4413      	add	r3, r2
 800d956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d964:	d118      	bne.n	800d998 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10a      	bne.n	800d982 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	015a      	lsls	r2, r3, #5
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4413      	add	r3, r2
 800d974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d978:	461a      	mov	r2, r3
 800d97a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d97e:	6013      	str	r3, [r2, #0]
 800d980:	e013      	b.n	800d9aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	015a      	lsls	r2, r3, #5
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	4413      	add	r3, r2
 800d98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98e:	461a      	mov	r2, r3
 800d990:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	e008      	b.n	800d9aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	015a      	lsls	r2, r3, #5
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	4413      	add	r3, r2
 800d9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	015a      	lsls	r2, r3, #5
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	015a      	lsls	r2, r3, #5
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d9ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	613b      	str	r3, [r7, #16]
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d3b7      	bcc.n	800d94e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9de:	2300      	movs	r3, #0
 800d9e0:	613b      	str	r3, [r7, #16]
 800d9e2:	e043      	b.n	800da6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	015a      	lsls	r2, r3, #5
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9fa:	d118      	bne.n	800da2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10a      	bne.n	800da18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	015a      	lsls	r2, r3, #5
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	4413      	add	r3, r2
 800da0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da0e:	461a      	mov	r2, r3
 800da10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da14:	6013      	str	r3, [r2, #0]
 800da16:	e013      	b.n	800da40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	015a      	lsls	r2, r3, #5
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	4413      	add	r3, r2
 800da20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da24:	461a      	mov	r2, r3
 800da26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da2a:	6013      	str	r3, [r2, #0]
 800da2c:	e008      	b.n	800da40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	015a      	lsls	r2, r3, #5
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4413      	add	r3, r2
 800da36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da3a:	461a      	mov	r2, r3
 800da3c:	2300      	movs	r3, #0
 800da3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	015a      	lsls	r2, r3, #5
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	4413      	add	r3, r2
 800da48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da4c:	461a      	mov	r2, r3
 800da4e:	2300      	movs	r3, #0
 800da50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	015a      	lsls	r2, r3, #5
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	4413      	add	r3, r2
 800da5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da5e:	461a      	mov	r2, r3
 800da60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	3301      	adds	r3, #1
 800da6a:	613b      	str	r3, [r7, #16]
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	429a      	cmp	r2, r3
 800da72:	d3b7      	bcc.n	800d9e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da7a:	691b      	ldr	r3, [r3, #16]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800da94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d105      	bne.n	800daa8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	f043 0210 	orr.w	r2, r3, #16
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	699a      	ldr	r2, [r3, #24]
 800daac:	4b0e      	ldr	r3, [pc, #56]	; (800dae8 <USB_DevInit+0x2b4>)
 800daae:	4313      	orrs	r3, r2
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d005      	beq.n	800dac6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	699b      	ldr	r3, [r3, #24]
 800dabe:	f043 0208 	orr.w	r2, r3, #8
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d105      	bne.n	800dad8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	699a      	ldr	r2, [r3, #24]
 800dad0:	4b06      	ldr	r3, [pc, #24]	; (800daec <USB_DevInit+0x2b8>)
 800dad2:	4313      	orrs	r3, r2
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3718      	adds	r7, #24
 800dade:	46bd      	mov	sp, r7
 800dae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dae4:	b004      	add	sp, #16
 800dae6:	4770      	bx	lr
 800dae8:	803c3800 	.word	0x803c3800
 800daec:	40000004 	.word	0x40000004

0800daf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dafa:	2300      	movs	r3, #0
 800dafc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	019b      	lsls	r3, r3, #6
 800db02:	f043 0220 	orr.w	r2, r3, #32
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	3301      	adds	r3, #1
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	4a09      	ldr	r2, [pc, #36]	; (800db38 <USB_FlushTxFifo+0x48>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d901      	bls.n	800db1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800db18:	2303      	movs	r3, #3
 800db1a:	e006      	b.n	800db2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	f003 0320 	and.w	r3, r3, #32
 800db24:	2b20      	cmp	r3, #32
 800db26:	d0f0      	beq.n	800db0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	00030d40 	.word	0x00030d40

0800db3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2210      	movs	r2, #16
 800db4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	3301      	adds	r3, #1
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	4a09      	ldr	r2, [pc, #36]	; (800db7c <USB_FlushRxFifo+0x40>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d901      	bls.n	800db60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800db5c:	2303      	movs	r3, #3
 800db5e:	e006      	b.n	800db6e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	f003 0310 	and.w	r3, r3, #16
 800db68:	2b10      	cmp	r3, #16
 800db6a:	d0f0      	beq.n	800db4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3714      	adds	r7, #20
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	00030d40 	.word	0x00030d40

0800db80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800db80:	b480      	push	{r7}
 800db82:	b085      	sub	sp, #20
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	460b      	mov	r3, r1
 800db8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	78fb      	ldrb	r3, [r7, #3]
 800db9a:	68f9      	ldr	r1, [r7, #12]
 800db9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dba0:	4313      	orrs	r3, r2
 800dba2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dba4:	2300      	movs	r3, #0
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b087      	sub	sp, #28
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	f003 0306 	and.w	r3, r3, #6
 800dbca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d102      	bne.n	800dbd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	75fb      	strb	r3, [r7, #23]
 800dbd6:	e00a      	b.n	800dbee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d002      	beq.n	800dbe4 <USB_GetDevSpeed+0x32>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b06      	cmp	r3, #6
 800dbe2:	d102      	bne.n	800dbea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	75fb      	strb	r3, [r7, #23]
 800dbe8:	e001      	b.n	800dbee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dbea:	230f      	movs	r3, #15
 800dbec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dbee:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	371c      	adds	r7, #28
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	785b      	ldrb	r3, [r3, #1]
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d139      	bne.n	800dc8c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc1e:	69da      	ldr	r2, [r3, #28]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	f003 030f 	and.w	r3, r3, #15
 800dc28:	2101      	movs	r1, #1
 800dc2a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	68f9      	ldr	r1, [r7, #12]
 800dc32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc36:	4313      	orrs	r3, r2
 800dc38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	015a      	lsls	r2, r3, #5
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	4413      	add	r3, r2
 800dc42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d153      	bne.n	800dcf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	015a      	lsls	r2, r3, #5
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	4413      	add	r3, r2
 800dc58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	78db      	ldrb	r3, [r3, #3]
 800dc6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	059b      	lsls	r3, r3, #22
 800dc72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc74:	431a      	orrs	r2, r3
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	0159      	lsls	r1, r3, #5
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	440b      	add	r3, r1
 800dc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc82:	4619      	mov	r1, r3
 800dc84:	4b20      	ldr	r3, [pc, #128]	; (800dd08 <USB_ActivateEndpoint+0x10c>)
 800dc86:	4313      	orrs	r3, r2
 800dc88:	600b      	str	r3, [r1, #0]
 800dc8a:	e035      	b.n	800dcf8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc92:	69da      	ldr	r2, [r3, #28]
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	f003 030f 	and.w	r3, r3, #15
 800dc9c:	2101      	movs	r1, #1
 800dc9e:	fa01 f303 	lsl.w	r3, r1, r3
 800dca2:	041b      	lsls	r3, r3, #16
 800dca4:	68f9      	ldr	r1, [r7, #12]
 800dca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	015a      	lsls	r2, r3, #5
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d119      	bne.n	800dcf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	015a      	lsls	r2, r3, #5
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	4413      	add	r3, r2
 800dccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	78db      	ldrb	r3, [r3, #3]
 800dcde:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dce0:	430b      	orrs	r3, r1
 800dce2:	431a      	orrs	r2, r3
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	0159      	lsls	r1, r3, #5
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	440b      	add	r3, r1
 800dcec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <USB_ActivateEndpoint+0x10c>)
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3714      	adds	r7, #20
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	10008000 	.word	0x10008000

0800dd0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	785b      	ldrb	r3, [r3, #1]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d161      	bne.n	800ddec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	015a      	lsls	r2, r3, #5
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd3e:	d11f      	bne.n	800dd80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	015a      	lsls	r2, r3, #5
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	4413      	add	r3, r2
 800dd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68ba      	ldr	r2, [r7, #8]
 800dd50:	0151      	lsls	r1, r2, #5
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	440a      	add	r2, r1
 800dd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	015a      	lsls	r2, r3, #5
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	4413      	add	r3, r2
 800dd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	0151      	lsls	r1, r2, #5
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	440a      	add	r2, r1
 800dd76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	2101      	movs	r1, #1
 800dd92:	fa01 f303 	lsl.w	r3, r1, r3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	43db      	mvns	r3, r3
 800dd9a:	68f9      	ldr	r1, [r7, #12]
 800dd9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dda0:	4013      	ands	r3, r2
 800dda2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddaa:	69da      	ldr	r2, [r3, #28]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	f003 030f 	and.w	r3, r3, #15
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	43db      	mvns	r3, r3
 800ddbe:	68f9      	ldr	r1, [r7, #12]
 800ddc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	015a      	lsls	r2, r3, #5
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	4413      	add	r3, r2
 800ddd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	0159      	lsls	r1, r3, #5
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	440b      	add	r3, r1
 800ddde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dde2:	4619      	mov	r1, r3
 800dde4:	4b35      	ldr	r3, [pc, #212]	; (800debc <USB_DeactivateEndpoint+0x1b0>)
 800dde6:	4013      	ands	r3, r2
 800dde8:	600b      	str	r3, [r1, #0]
 800ddea:	e060      	b.n	800deae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	015a      	lsls	r2, r3, #5
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de02:	d11f      	bne.n	800de44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	015a      	lsls	r2, r3, #5
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	4413      	add	r3, r2
 800de0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68ba      	ldr	r2, [r7, #8]
 800de14:	0151      	lsls	r1, r2, #5
 800de16:	68fa      	ldr	r2, [r7, #12]
 800de18:	440a      	add	r2, r1
 800de1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	015a      	lsls	r2, r3, #5
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	4413      	add	r3, r2
 800de2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	0151      	lsls	r1, r2, #5
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	440a      	add	r2, r1
 800de3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	f003 030f 	and.w	r3, r3, #15
 800de54:	2101      	movs	r1, #1
 800de56:	fa01 f303 	lsl.w	r3, r1, r3
 800de5a:	041b      	lsls	r3, r3, #16
 800de5c:	43db      	mvns	r3, r3
 800de5e:	68f9      	ldr	r1, [r7, #12]
 800de60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de64:	4013      	ands	r3, r2
 800de66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de6e:	69da      	ldr	r2, [r3, #28]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	f003 030f 	and.w	r3, r3, #15
 800de78:	2101      	movs	r1, #1
 800de7a:	fa01 f303 	lsl.w	r3, r1, r3
 800de7e:	041b      	lsls	r3, r3, #16
 800de80:	43db      	mvns	r3, r3
 800de82:	68f9      	ldr	r1, [r7, #12]
 800de84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de88:	4013      	ands	r3, r2
 800de8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	015a      	lsls	r2, r3, #5
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	4413      	add	r3, r2
 800de94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	0159      	lsls	r1, r3, #5
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	440b      	add	r3, r1
 800dea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea6:	4619      	mov	r1, r3
 800dea8:	4b05      	ldr	r3, [pc, #20]	; (800dec0 <USB_DeactivateEndpoint+0x1b4>)
 800deaa:	4013      	ands	r3, r2
 800deac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3714      	adds	r7, #20
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr
 800debc:	ec337800 	.word	0xec337800
 800dec0:	eff37800 	.word	0xeff37800

0800dec4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08a      	sub	sp, #40	; 0x28
 800dec8:	af02      	add	r7, sp, #8
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	4613      	mov	r3, r2
 800ded0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	785b      	ldrb	r3, [r3, #1]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	f040 8163 	bne.w	800e1ac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d132      	bne.n	800df54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	015a      	lsls	r2, r3, #5
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	4413      	add	r3, r2
 800def6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800defa:	691a      	ldr	r2, [r3, #16]
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	0159      	lsls	r1, r3, #5
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	440b      	add	r3, r1
 800df04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df08:	4619      	mov	r1, r3
 800df0a:	4ba5      	ldr	r3, [pc, #660]	; (800e1a0 <USB_EPStartXfer+0x2dc>)
 800df0c:	4013      	ands	r3, r2
 800df0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	015a      	lsls	r2, r3, #5
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	4413      	add	r3, r2
 800df18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1c:	691b      	ldr	r3, [r3, #16]
 800df1e:	69ba      	ldr	r2, [r7, #24]
 800df20:	0151      	lsls	r1, r2, #5
 800df22:	69fa      	ldr	r2, [r7, #28]
 800df24:	440a      	add	r2, r1
 800df26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	015a      	lsls	r2, r3, #5
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	4413      	add	r3, r2
 800df38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df3c:	691a      	ldr	r2, [r3, #16]
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	0159      	lsls	r1, r3, #5
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	440b      	add	r3, r1
 800df46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df4a:	4619      	mov	r1, r3
 800df4c:	4b95      	ldr	r3, [pc, #596]	; (800e1a4 <USB_EPStartXfer+0x2e0>)
 800df4e:	4013      	ands	r3, r2
 800df50:	610b      	str	r3, [r1, #16]
 800df52:	e074      	b.n	800e03e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df60:	691a      	ldr	r2, [r3, #16]
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	0159      	lsls	r1, r3, #5
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	440b      	add	r3, r1
 800df6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df6e:	4619      	mov	r1, r3
 800df70:	4b8c      	ldr	r3, [pc, #560]	; (800e1a4 <USB_EPStartXfer+0x2e0>)
 800df72:	4013      	ands	r3, r2
 800df74:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	015a      	lsls	r2, r3, #5
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df82:	691a      	ldr	r2, [r3, #16]
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	0159      	lsls	r1, r3, #5
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	440b      	add	r3, r1
 800df8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df90:	4619      	mov	r1, r3
 800df92:	4b83      	ldr	r3, [pc, #524]	; (800e1a0 <USB_EPStartXfer+0x2dc>)
 800df94:	4013      	ands	r3, r2
 800df96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	015a      	lsls	r2, r3, #5
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	4413      	add	r3, r2
 800dfa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfa4:	691a      	ldr	r2, [r3, #16]
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	6959      	ldr	r1, [r3, #20]
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	440b      	add	r3, r1
 800dfb0:	1e59      	subs	r1, r3, #1
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	fbb1 f3f3 	udiv	r3, r1, r3
 800dfba:	04d9      	lsls	r1, r3, #19
 800dfbc:	4b7a      	ldr	r3, [pc, #488]	; (800e1a8 <USB_EPStartXfer+0x2e4>)
 800dfbe:	400b      	ands	r3, r1
 800dfc0:	69b9      	ldr	r1, [r7, #24]
 800dfc2:	0148      	lsls	r0, r1, #5
 800dfc4:	69f9      	ldr	r1, [r7, #28]
 800dfc6:	4401      	add	r1, r0
 800dfc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	015a      	lsls	r2, r3, #5
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfdc:	691a      	ldr	r2, [r3, #16]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	695b      	ldr	r3, [r3, #20]
 800dfe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfe6:	69b9      	ldr	r1, [r7, #24]
 800dfe8:	0148      	lsls	r0, r1, #5
 800dfea:	69f9      	ldr	r1, [r7, #28]
 800dfec:	4401      	add	r1, r0
 800dfee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dff2:	4313      	orrs	r3, r2
 800dff4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	78db      	ldrb	r3, [r3, #3]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d11f      	bne.n	800e03e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	015a      	lsls	r2, r3, #5
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	4413      	add	r3, r2
 800e006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	69ba      	ldr	r2, [r7, #24]
 800e00e:	0151      	lsls	r1, r2, #5
 800e010:	69fa      	ldr	r2, [r7, #28]
 800e012:	440a      	add	r2, r1
 800e014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e018:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e01c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	015a      	lsls	r2, r3, #5
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	4413      	add	r3, r2
 800e026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	69ba      	ldr	r2, [r7, #24]
 800e02e:	0151      	lsls	r1, r2, #5
 800e030:	69fa      	ldr	r2, [r7, #28]
 800e032:	440a      	add	r2, r1
 800e034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e03c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d14b      	bne.n	800e0dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d009      	beq.n	800e060 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e058:	461a      	mov	r2, r3
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	78db      	ldrb	r3, [r3, #3]
 800e064:	2b01      	cmp	r3, #1
 800e066:	d128      	bne.n	800e0ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e074:	2b00      	cmp	r3, #0
 800e076:	d110      	bne.n	800e09a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	015a      	lsls	r2, r3, #5
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	4413      	add	r3, r2
 800e080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	69ba      	ldr	r2, [r7, #24]
 800e088:	0151      	lsls	r1, r2, #5
 800e08a:	69fa      	ldr	r2, [r7, #28]
 800e08c:	440a      	add	r2, r1
 800e08e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e092:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	e00f      	b.n	800e0ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	015a      	lsls	r2, r3, #5
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	0151      	lsls	r1, r2, #5
 800e0ac:	69fa      	ldr	r2, [r7, #28]
 800e0ae:	440a      	add	r2, r1
 800e0b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	015a      	lsls	r2, r3, #5
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	69ba      	ldr	r2, [r7, #24]
 800e0ca:	0151      	lsls	r1, r2, #5
 800e0cc:	69fa      	ldr	r2, [r7, #28]
 800e0ce:	440a      	add	r2, r1
 800e0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0d8:	6013      	str	r3, [r2, #0]
 800e0da:	e133      	b.n	800e344 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	015a      	lsls	r2, r3, #5
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	69ba      	ldr	r2, [r7, #24]
 800e0ec:	0151      	lsls	r1, r2, #5
 800e0ee:	69fa      	ldr	r2, [r7, #28]
 800e0f0:	440a      	add	r2, r1
 800e0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	78db      	ldrb	r3, [r3, #3]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d015      	beq.n	800e130 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	695b      	ldr	r3, [r3, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 811b 	beq.w	800e344 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	f003 030f 	and.w	r3, r3, #15
 800e11e:	2101      	movs	r1, #1
 800e120:	fa01 f303 	lsl.w	r3, r1, r3
 800e124:	69f9      	ldr	r1, [r7, #28]
 800e126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e12a:	4313      	orrs	r3, r2
 800e12c:	634b      	str	r3, [r1, #52]	; 0x34
 800e12e:	e109      	b.n	800e344 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d110      	bne.n	800e162 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	015a      	lsls	r2, r3, #5
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	4413      	add	r3, r2
 800e148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	69ba      	ldr	r2, [r7, #24]
 800e150:	0151      	lsls	r1, r2, #5
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	440a      	add	r2, r1
 800e156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e15a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e15e:	6013      	str	r3, [r2, #0]
 800e160:	e00f      	b.n	800e182 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	015a      	lsls	r2, r3, #5
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	4413      	add	r3, r2
 800e16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	69ba      	ldr	r2, [r7, #24]
 800e172:	0151      	lsls	r1, r2, #5
 800e174:	69fa      	ldr	r2, [r7, #28]
 800e176:	440a      	add	r2, r1
 800e178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e17c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e180:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	68d9      	ldr	r1, [r3, #12]
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	781a      	ldrb	r2, [r3, #0]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	695b      	ldr	r3, [r3, #20]
 800e18e:	b298      	uxth	r0, r3
 800e190:	79fb      	ldrb	r3, [r7, #7]
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	4603      	mov	r3, r0
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f000 fa38 	bl	800e60c <USB_WritePacket>
 800e19c:	e0d2      	b.n	800e344 <USB_EPStartXfer+0x480>
 800e19e:	bf00      	nop
 800e1a0:	e007ffff 	.word	0xe007ffff
 800e1a4:	fff80000 	.word	0xfff80000
 800e1a8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	015a      	lsls	r2, r3, #5
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b8:	691a      	ldr	r2, [r3, #16]
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	0159      	lsls	r1, r3, #5
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	440b      	add	r3, r1
 800e1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4b61      	ldr	r3, [pc, #388]	; (800e350 <USB_EPStartXfer+0x48c>)
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	015a      	lsls	r2, r3, #5
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1da:	691a      	ldr	r2, [r3, #16]
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	0159      	lsls	r1, r3, #5
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	440b      	add	r3, r1
 800e1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4b5a      	ldr	r3, [pc, #360]	; (800e354 <USB_EPStartXfer+0x490>)
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d123      	bne.n	800e240 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	015a      	lsls	r2, r3, #5
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e204:	691a      	ldr	r2, [r3, #16]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e20e:	69b9      	ldr	r1, [r7, #24]
 800e210:	0148      	lsls	r0, r1, #5
 800e212:	69f9      	ldr	r1, [r7, #28]
 800e214:	4401      	add	r1, r0
 800e216:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e21a:	4313      	orrs	r3, r2
 800e21c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	015a      	lsls	r2, r3, #5
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	4413      	add	r3, r2
 800e226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	0151      	lsls	r1, r2, #5
 800e230:	69fa      	ldr	r2, [r7, #28]
 800e232:	440a      	add	r2, r1
 800e234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e23c:	6113      	str	r3, [r2, #16]
 800e23e:	e033      	b.n	800e2a8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	695a      	ldr	r2, [r3, #20]
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	4413      	add	r3, r2
 800e24a:	1e5a      	subs	r2, r3, #1
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	fbb2 f3f3 	udiv	r3, r2, r3
 800e254:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	015a      	lsls	r2, r3, #5
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	4413      	add	r3, r2
 800e25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e262:	691a      	ldr	r2, [r3, #16]
 800e264:	8afb      	ldrh	r3, [r7, #22]
 800e266:	04d9      	lsls	r1, r3, #19
 800e268:	4b3b      	ldr	r3, [pc, #236]	; (800e358 <USB_EPStartXfer+0x494>)
 800e26a:	400b      	ands	r3, r1
 800e26c:	69b9      	ldr	r1, [r7, #24]
 800e26e:	0148      	lsls	r0, r1, #5
 800e270:	69f9      	ldr	r1, [r7, #28]
 800e272:	4401      	add	r1, r0
 800e274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e278:	4313      	orrs	r3, r2
 800e27a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	015a      	lsls	r2, r3, #5
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	4413      	add	r3, r2
 800e284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e288:	691a      	ldr	r2, [r3, #16]
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	8af9      	ldrh	r1, [r7, #22]
 800e290:	fb01 f303 	mul.w	r3, r1, r3
 800e294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e298:	69b9      	ldr	r1, [r7, #24]
 800e29a:	0148      	lsls	r0, r1, #5
 800e29c:	69f9      	ldr	r1, [r7, #28]
 800e29e:	4401      	add	r1, r0
 800e2a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e2a8:	79fb      	ldrb	r3, [r7, #7]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d10d      	bne.n	800e2ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d009      	beq.n	800e2ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	68d9      	ldr	r1, [r3, #12]
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	015a      	lsls	r2, r3, #5
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c6:	460a      	mov	r2, r1
 800e2c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	78db      	ldrb	r3, [r3, #3]
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d128      	bne.n	800e324 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d110      	bne.n	800e304 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	015a      	lsls	r2, r3, #5
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	69ba      	ldr	r2, [r7, #24]
 800e2f2:	0151      	lsls	r1, r2, #5
 800e2f4:	69fa      	ldr	r2, [r7, #28]
 800e2f6:	440a      	add	r2, r1
 800e2f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e300:	6013      	str	r3, [r2, #0]
 800e302:	e00f      	b.n	800e324 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	015a      	lsls	r2, r3, #5
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	4413      	add	r3, r2
 800e30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	69ba      	ldr	r2, [r7, #24]
 800e314:	0151      	lsls	r1, r2, #5
 800e316:	69fa      	ldr	r2, [r7, #28]
 800e318:	440a      	add	r2, r1
 800e31a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e31e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e322:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e324:	69bb      	ldr	r3, [r7, #24]
 800e326:	015a      	lsls	r2, r3, #5
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	4413      	add	r3, r2
 800e32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	69ba      	ldr	r2, [r7, #24]
 800e334:	0151      	lsls	r1, r2, #5
 800e336:	69fa      	ldr	r2, [r7, #28]
 800e338:	440a      	add	r2, r1
 800e33a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e33e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e342:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e344:	2300      	movs	r3, #0
}
 800e346:	4618      	mov	r0, r3
 800e348:	3720      	adds	r7, #32
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	fff80000 	.word	0xfff80000
 800e354:	e007ffff 	.word	0xe007ffff
 800e358:	1ff80000 	.word	0x1ff80000

0800e35c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b087      	sub	sp, #28
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	4613      	mov	r3, r2
 800e368:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	785b      	ldrb	r3, [r3, #1]
 800e378:	2b01      	cmp	r3, #1
 800e37a:	f040 80cd 	bne.w	800e518 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d132      	bne.n	800e3ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	015a      	lsls	r2, r3, #5
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	4413      	add	r3, r2
 800e38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e392:	691a      	ldr	r2, [r3, #16]
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	0159      	lsls	r1, r3, #5
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	440b      	add	r3, r1
 800e39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4b98      	ldr	r3, [pc, #608]	; (800e604 <USB_EP0StartXfer+0x2a8>)
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	015a      	lsls	r2, r3, #5
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	693a      	ldr	r2, [r7, #16]
 800e3b8:	0151      	lsls	r1, r2, #5
 800e3ba:	697a      	ldr	r2, [r7, #20]
 800e3bc:	440a      	add	r2, r1
 800e3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	015a      	lsls	r2, r3, #5
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d4:	691a      	ldr	r2, [r3, #16]
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	0159      	lsls	r1, r3, #5
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	440b      	add	r3, r1
 800e3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	4b88      	ldr	r3, [pc, #544]	; (800e608 <USB_EP0StartXfer+0x2ac>)
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	610b      	str	r3, [r1, #16]
 800e3ea:	e04e      	b.n	800e48a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	015a      	lsls	r2, r3, #5
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3f8:	691a      	ldr	r2, [r3, #16]
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	0159      	lsls	r1, r3, #5
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	440b      	add	r3, r1
 800e402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e406:	4619      	mov	r1, r3
 800e408:	4b7f      	ldr	r3, [pc, #508]	; (800e608 <USB_EP0StartXfer+0x2ac>)
 800e40a:	4013      	ands	r3, r2
 800e40c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	4413      	add	r3, r2
 800e416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e41a:	691a      	ldr	r2, [r3, #16]
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	0159      	lsls	r1, r3, #5
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	440b      	add	r3, r1
 800e424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e428:	4619      	mov	r1, r3
 800e42a:	4b76      	ldr	r3, [pc, #472]	; (800e604 <USB_EP0StartXfer+0x2a8>)
 800e42c:	4013      	ands	r3, r2
 800e42e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	695a      	ldr	r2, [r3, #20]
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d903      	bls.n	800e444 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	689a      	ldr	r2, [r3, #8]
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	015a      	lsls	r2, r3, #5
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	4413      	add	r3, r2
 800e44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e450:	691b      	ldr	r3, [r3, #16]
 800e452:	693a      	ldr	r2, [r7, #16]
 800e454:	0151      	lsls	r1, r2, #5
 800e456:	697a      	ldr	r2, [r7, #20]
 800e458:	440a      	add	r2, r1
 800e45a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e45e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e462:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	015a      	lsls	r2, r3, #5
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	4413      	add	r3, r2
 800e46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e470:	691a      	ldr	r2, [r3, #16]
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	695b      	ldr	r3, [r3, #20]
 800e476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e47a:	6939      	ldr	r1, [r7, #16]
 800e47c:	0148      	lsls	r0, r1, #5
 800e47e:	6979      	ldr	r1, [r7, #20]
 800e480:	4401      	add	r1, r0
 800e482:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e486:	4313      	orrs	r3, r2
 800e488:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e48a:	79fb      	ldrb	r3, [r7, #7]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d11e      	bne.n	800e4ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d009      	beq.n	800e4ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	015a      	lsls	r2, r3, #5
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	693a      	ldr	r2, [r7, #16]
 800e4bc:	0151      	lsls	r1, r2, #5
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	440a      	add	r2, r1
 800e4c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	e092      	b.n	800e5f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	015a      	lsls	r2, r3, #5
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	4413      	add	r3, r2
 800e4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	693a      	ldr	r2, [r7, #16]
 800e4de:	0151      	lsls	r1, r2, #5
 800e4e0:	697a      	ldr	r2, [r7, #20]
 800e4e2:	440a      	add	r2, r1
 800e4e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e4ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d07e      	beq.n	800e5f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	f003 030f 	and.w	r3, r3, #15
 800e506:	2101      	movs	r1, #1
 800e508:	fa01 f303 	lsl.w	r3, r1, r3
 800e50c:	6979      	ldr	r1, [r7, #20]
 800e50e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e512:	4313      	orrs	r3, r2
 800e514:	634b      	str	r3, [r1, #52]	; 0x34
 800e516:	e06d      	b.n	800e5f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e524:	691a      	ldr	r2, [r3, #16]
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	0159      	lsls	r1, r3, #5
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	440b      	add	r3, r1
 800e52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e532:	4619      	mov	r1, r3
 800e534:	4b34      	ldr	r3, [pc, #208]	; (800e608 <USB_EP0StartXfer+0x2ac>)
 800e536:	4013      	ands	r3, r2
 800e538:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	015a      	lsls	r2, r3, #5
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	4413      	add	r3, r2
 800e542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e546:	691a      	ldr	r2, [r3, #16]
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	0159      	lsls	r1, r3, #5
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	440b      	add	r3, r1
 800e550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e554:	4619      	mov	r1, r3
 800e556:	4b2b      	ldr	r3, [pc, #172]	; (800e604 <USB_EP0StartXfer+0x2a8>)
 800e558:	4013      	ands	r3, r2
 800e55a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d003      	beq.n	800e56c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	689a      	ldr	r2, [r3, #8]
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	015a      	lsls	r2, r3, #5
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	4413      	add	r3, r2
 800e574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e578:	691b      	ldr	r3, [r3, #16]
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	0151      	lsls	r1, r2, #5
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	440a      	add	r2, r1
 800e582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e58a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	015a      	lsls	r2, r3, #5
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	4413      	add	r3, r2
 800e594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e598:	691a      	ldr	r2, [r3, #16]
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5a2:	6939      	ldr	r1, [r7, #16]
 800e5a4:	0148      	lsls	r0, r1, #5
 800e5a6:	6979      	ldr	r1, [r7, #20]
 800e5a8:	4401      	add	r1, r0
 800e5aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e5b2:	79fb      	ldrb	r3, [r7, #7]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d10d      	bne.n	800e5d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d009      	beq.n	800e5d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	68d9      	ldr	r1, [r3, #12]
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	015a      	lsls	r2, r3, #5
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d0:	460a      	mov	r2, r1
 800e5d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	015a      	lsls	r2, r3, #5
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	4413      	add	r3, r2
 800e5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	0151      	lsls	r1, r2, #5
 800e5e6:	697a      	ldr	r2, [r7, #20]
 800e5e8:	440a      	add	r2, r1
 800e5ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e5f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	371c      	adds	r7, #28
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	e007ffff 	.word	0xe007ffff
 800e608:	fff80000 	.word	0xfff80000

0800e60c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b089      	sub	sp, #36	; 0x24
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	4611      	mov	r1, r2
 800e618:	461a      	mov	r2, r3
 800e61a:	460b      	mov	r3, r1
 800e61c:	71fb      	strb	r3, [r7, #7]
 800e61e:	4613      	mov	r3, r2
 800e620:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e62a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d123      	bne.n	800e67a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e632:	88bb      	ldrh	r3, [r7, #4]
 800e634:	3303      	adds	r3, #3
 800e636:	089b      	lsrs	r3, r3, #2
 800e638:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e63a:	2300      	movs	r3, #0
 800e63c:	61bb      	str	r3, [r7, #24]
 800e63e:	e018      	b.n	800e672 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	031a      	lsls	r2, r3, #12
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	4413      	add	r3, r2
 800e648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e64c:	461a      	mov	r2, r3
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	3301      	adds	r3, #1
 800e658:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	3301      	adds	r3, #1
 800e65e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	3301      	adds	r3, #1
 800e664:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	3301      	adds	r3, #1
 800e66a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	3301      	adds	r3, #1
 800e670:	61bb      	str	r3, [r7, #24]
 800e672:	69ba      	ldr	r2, [r7, #24]
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	429a      	cmp	r2, r3
 800e678:	d3e2      	bcc.n	800e640 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3724      	adds	r7, #36	; 0x24
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e688:	b480      	push	{r7}
 800e68a:	b08b      	sub	sp, #44	; 0x2c
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	4613      	mov	r3, r2
 800e694:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e69e:	88fb      	ldrh	r3, [r7, #6]
 800e6a0:	089b      	lsrs	r3, r3, #2
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e6a6:	88fb      	ldrh	r3, [r7, #6]
 800e6a8:	f003 0303 	and.w	r3, r3, #3
 800e6ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	623b      	str	r3, [r7, #32]
 800e6b2:	e014      	b.n	800e6de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6be:	601a      	str	r2, [r3, #0]
    pDest++;
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e6d8:	6a3b      	ldr	r3, [r7, #32]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	623b      	str	r3, [r7, #32]
 800e6de:	6a3a      	ldr	r2, [r7, #32]
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d3e6      	bcc.n	800e6b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e6e6:	8bfb      	ldrh	r3, [r7, #30]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d01e      	beq.n	800e72a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	f107 0310 	add.w	r3, r7, #16
 800e6fc:	6812      	ldr	r2, [r2, #0]
 800e6fe:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e700:	693a      	ldr	r2, [r7, #16]
 800e702:	6a3b      	ldr	r3, [r7, #32]
 800e704:	b2db      	uxtb	r3, r3
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	fa22 f303 	lsr.w	r3, r2, r3
 800e70c:	b2da      	uxtb	r2, r3
 800e70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e710:	701a      	strb	r2, [r3, #0]
      i++;
 800e712:	6a3b      	ldr	r3, [r7, #32]
 800e714:	3301      	adds	r3, #1
 800e716:	623b      	str	r3, [r7, #32]
      pDest++;
 800e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71a:	3301      	adds	r3, #1
 800e71c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e71e:	8bfb      	ldrh	r3, [r7, #30]
 800e720:	3b01      	subs	r3, #1
 800e722:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e724:	8bfb      	ldrh	r3, [r7, #30]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1ea      	bne.n	800e700 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	372c      	adds	r7, #44	; 0x2c
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	785b      	ldrb	r3, [r3, #1]
 800e750:	2b01      	cmp	r3, #1
 800e752:	d12c      	bne.n	800e7ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	015a      	lsls	r2, r3, #5
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	4413      	add	r3, r2
 800e75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	db12      	blt.n	800e78c <USB_EPSetStall+0x54>
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00f      	beq.n	800e78c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	015a      	lsls	r2, r3, #5
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	4413      	add	r3, r2
 800e774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	68ba      	ldr	r2, [r7, #8]
 800e77c:	0151      	lsls	r1, r2, #5
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	440a      	add	r2, r1
 800e782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e786:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e78a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	015a      	lsls	r2, r3, #5
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	4413      	add	r3, r2
 800e794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	0151      	lsls	r1, r2, #5
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	440a      	add	r2, r1
 800e7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e7aa:	6013      	str	r3, [r2, #0]
 800e7ac:	e02b      	b.n	800e806 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	015a      	lsls	r2, r3, #5
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	db12      	blt.n	800e7e6 <USB_EPSetStall+0xae>
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00f      	beq.n	800e7e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	015a      	lsls	r2, r3, #5
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	0151      	lsls	r1, r2, #5
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	440a      	add	r2, r1
 800e7dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	015a      	lsls	r2, r3, #5
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	0151      	lsls	r1, r2, #5
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	440a      	add	r2, r1
 800e7fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e804:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3714      	adds	r7, #20
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	785b      	ldrb	r3, [r3, #1]
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d128      	bne.n	800e882 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	015a      	lsls	r2, r3, #5
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	4413      	add	r3, r2
 800e838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	0151      	lsls	r1, r2, #5
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	440a      	add	r2, r1
 800e846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e84a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e84e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	78db      	ldrb	r3, [r3, #3]
 800e854:	2b03      	cmp	r3, #3
 800e856:	d003      	beq.n	800e860 <USB_EPClearStall+0x4c>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	78db      	ldrb	r3, [r3, #3]
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	d138      	bne.n	800e8d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	015a      	lsls	r2, r3, #5
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4413      	add	r3, r2
 800e868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	0151      	lsls	r1, r2, #5
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	440a      	add	r2, r1
 800e876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e87a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e87e:	6013      	str	r3, [r2, #0]
 800e880:	e027      	b.n	800e8d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	015a      	lsls	r2, r3, #5
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	4413      	add	r3, r2
 800e88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	0151      	lsls	r1, r2, #5
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	440a      	add	r2, r1
 800e898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e89c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	78db      	ldrb	r3, [r3, #3]
 800e8a6:	2b03      	cmp	r3, #3
 800e8a8:	d003      	beq.n	800e8b2 <USB_EPClearStall+0x9e>
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	78db      	ldrb	r3, [r3, #3]
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d10f      	bne.n	800e8d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	015a      	lsls	r2, r3, #5
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	0151      	lsls	r1, r2, #5
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	440a      	add	r2, r1
 800e8c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e902:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	78fb      	ldrb	r3, [r7, #3]
 800e90e:	011b      	lsls	r3, r3, #4
 800e910:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e914:	68f9      	ldr	r1, [r7, #12]
 800e916:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e91a:	4313      	orrs	r3, r2
 800e91c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	3714      	adds	r7, #20
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68fa      	ldr	r2, [r7, #12]
 800e942:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e946:	f023 0303 	bic.w	r3, r3, #3
 800e94a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e95a:	f023 0302 	bic.w	r3, r3, #2
 800e95e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3714      	adds	r7, #20
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr

0800e96e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e96e:	b480      	push	{r7}
 800e970:	b085      	sub	sp, #20
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e988:	f023 0303 	bic.w	r3, r3, #3
 800e98c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e99c:	f043 0302 	orr.w	r3, r3, #2
 800e9a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	695b      	ldr	r3, [r3, #20]
 800e9bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	4013      	ands	r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr

0800e9d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9d6:	b480      	push	{r7}
 800e9d8:	b085      	sub	sp, #20
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9e8:	699b      	ldr	r3, [r3, #24]
 800e9ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f2:	69db      	ldr	r3, [r3, #28]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	0c1b      	lsrs	r3, r3, #16
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b085      	sub	sp, #20
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea1c:	699b      	ldr	r3, [r3, #24]
 800ea1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea26:	69db      	ldr	r3, [r3, #28]
 800ea28:	68ba      	ldr	r2, [r7, #8]
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	b29b      	uxth	r3, r3
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3714      	adds	r7, #20
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea3e:	b480      	push	{r7}
 800ea40:	b085      	sub	sp, #20
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	460b      	mov	r3, r1
 800ea48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ea4e:	78fb      	ldrb	r3, [r7, #3]
 800ea50:	015a      	lsls	r2, r3, #5
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	4413      	add	r3, r2
 800ea56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea5a:	689b      	ldr	r3, [r3, #8]
 800ea5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	4013      	ands	r3, r2
 800ea6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ea6c:	68bb      	ldr	r3, [r7, #8]
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3714      	adds	r7, #20
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr

0800ea7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea7a:	b480      	push	{r7}
 800ea7c:	b087      	sub	sp, #28
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
 800ea82:	460b      	mov	r3, r1
 800ea84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ea9e:	78fb      	ldrb	r3, [r7, #3]
 800eaa0:	f003 030f 	and.w	r3, r3, #15
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	fa22 f303 	lsr.w	r3, r2, r3
 800eaaa:	01db      	lsls	r3, r3, #7
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	693a      	ldr	r2, [r7, #16]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eab4:	78fb      	ldrb	r3, [r7, #3]
 800eab6:	015a      	lsls	r2, r3, #5
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	4413      	add	r3, r2
 800eabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	693a      	ldr	r2, [r7, #16]
 800eac4:	4013      	ands	r3, r2
 800eac6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eac8:	68bb      	ldr	r3, [r7, #8]
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	371c      	adds	r7, #28
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ead6:	b480      	push	{r7}
 800ead8:	b083      	sub	sp, #12
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	695b      	ldr	r3, [r3, #20]
 800eae2:	f003 0301 	and.w	r3, r3, #1
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	370c      	adds	r7, #12
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
	...

0800eaf4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b085      	sub	sp, #20
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4b09      	ldr	r3, [pc, #36]	; (800eb38 <USB_ActivateSetup+0x44>)
 800eb12:	4013      	ands	r3, r2
 800eb14:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb2a:	2300      	movs	r3, #0
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3714      	adds	r7, #20
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	fffff800 	.word	0xfffff800

0800eb3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b087      	sub	sp, #28
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	460b      	mov	r3, r1
 800eb46:	607a      	str	r2, [r7, #4]
 800eb48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	333c      	adds	r3, #60	; 0x3c
 800eb52:	3304      	adds	r3, #4
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	4a26      	ldr	r2, [pc, #152]	; (800ebf4 <USB_EP0_OutStart+0xb8>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d90a      	bls.n	800eb76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb70:	d101      	bne.n	800eb76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800eb72:	2300      	movs	r3, #0
 800eb74:	e037      	b.n	800ebe6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	2300      	movs	r3, #0
 800eb80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb88:	691b      	ldr	r3, [r3, #16]
 800eb8a:	697a      	ldr	r2, [r7, #20]
 800eb8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb9c:	691b      	ldr	r3, [r3, #16]
 800eb9e:	697a      	ldr	r2, [r7, #20]
 800eba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eba4:	f043 0318 	orr.w	r3, r3, #24
 800eba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebb0:	691b      	ldr	r3, [r3, #16]
 800ebb2:	697a      	ldr	r2, [r7, #20]
 800ebb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ebbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ebbe:	7afb      	ldrb	r3, [r7, #11]
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d10f      	bne.n	800ebe4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebca:	461a      	mov	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	697a      	ldr	r2, [r7, #20]
 800ebda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ebe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	371c      	adds	r7, #28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	4f54300a 	.word	0x4f54300a

0800ebf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ec00:	2300      	movs	r3, #0
 800ec02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	3301      	adds	r3, #1
 800ec08:	60fb      	str	r3, [r7, #12]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	4a13      	ldr	r2, [pc, #76]	; (800ec5c <USB_CoreReset+0x64>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d901      	bls.n	800ec16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ec12:	2303      	movs	r3, #3
 800ec14:	e01b      	b.n	800ec4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	daf2      	bge.n	800ec04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	f043 0201 	orr.w	r2, r3, #1
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	3301      	adds	r3, #1
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	4a09      	ldr	r2, [pc, #36]	; (800ec5c <USB_CoreReset+0x64>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d901      	bls.n	800ec40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ec3c:	2303      	movs	r3, #3
 800ec3e:	e006      	b.n	800ec4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	691b      	ldr	r3, [r3, #16]
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d0f0      	beq.n	800ec2e <USB_CoreReset+0x36>

  return HAL_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3714      	adds	r7, #20
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr
 800ec5a:	bf00      	nop
 800ec5c:	00030d40 	.word	0x00030d40

0800ec60 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800ec6c:	f241 0074 	movw	r0, #4212	; 0x1074
 800ec70:	f003 fcfc 	bl	801266c <USBD_static_malloc>
 800ec74:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d105      	bne.n	800ec88 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ec84:	2302      	movs	r3, #2
 800ec86:	e034      	b.n	800ecf2 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	7c1b      	ldrb	r3, [r3, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d115      	bne.n	800ecc4 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ec98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec9c:	2202      	movs	r2, #2
 800ec9e:	2101      	movs	r1, #1
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f003 fba0 	bl	80123e6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ecae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecb2:	2202      	movs	r2, #2
 800ecb4:	2181      	movs	r1, #129	; 0x81
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f003 fb95 	bl	80123e6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	871a      	strh	r2, [r3, #56]	; 0x38
 800ecc2:	e012      	b.n	800ecea <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ecc4:	2340      	movs	r3, #64	; 0x40
 800ecc6:	2202      	movs	r2, #2
 800ecc8:	2101      	movs	r1, #1
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f003 fb8b 	bl	80123e6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ecd8:	2340      	movs	r3, #64	; 0x40
 800ecda:	2202      	movs	r2, #2
 800ecdc:	2181      	movs	r1, #129	; 0x81
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f003 fb81 	bl	80123e6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f999 	bl	800f022 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b082      	sub	sp, #8
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	460b      	mov	r3, r1
 800ed04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ed06:	2101      	movs	r1, #1
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f003 fb92 	bl	8012432 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ed16:	2181      	movs	r1, #129	; 0x81
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f003 fb8a 	bl	8012432 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00c      	beq.n	800ed48 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f9dc 	bl	800f0ec <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f003 fca4 	bl	8012688 <USBD_static_free>
    pdev->pClassData = NULL;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
	...

0800ed54 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed64:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed66:	2300      	movs	r3, #0
 800ed68:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d101      	bne.n	800ed78 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ed74:	2303      	movs	r3, #3
 800ed76:	e0db      	b.n	800ef30 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d04e      	beq.n	800ee22 <USBD_MSC_Setup+0xce>
 800ed84:	2b20      	cmp	r3, #32
 800ed86:	f040 80cb 	bne.w	800ef20 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	785b      	ldrb	r3, [r3, #1]
 800ed8e:	2bfe      	cmp	r3, #254	; 0xfe
 800ed90:	d002      	beq.n	800ed98 <USBD_MSC_Setup+0x44>
 800ed92:	2bff      	cmp	r3, #255	; 0xff
 800ed94:	d025      	beq.n	800ede2 <USBD_MSC_Setup+0x8e>
 800ed96:	e03c      	b.n	800ee12 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	885b      	ldrh	r3, [r3, #2]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d119      	bne.n	800edd4 <USBD_MSC_Setup+0x80>
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	88db      	ldrh	r3, [r3, #6]
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d115      	bne.n	800edd4 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800edae:	2b00      	cmp	r3, #0
 800edb0:	da10      	bge.n	800edd4 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edb8:	699b      	ldr	r3, [r3, #24]
 800edba:	4798      	blx	r3
 800edbc:	4603      	mov	r3, r0
 800edbe:	461a      	mov	r2, r3
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	2201      	movs	r2, #1
 800edc8:	4619      	mov	r1, r3
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f002 ff51 	bl	8011c72 <USBD_CtlSendData>
 800edd0:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800edd2:	e025      	b.n	800ee20 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f002 feda 	bl	8011b90 <USBD_CtlError>
            ret = USBD_FAIL;
 800eddc:	2303      	movs	r3, #3
 800edde:	75fb      	strb	r3, [r7, #23]
          break;
 800ede0:	e01e      	b.n	800ee20 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	885b      	ldrh	r3, [r3, #2]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10c      	bne.n	800ee04 <USBD_MSC_Setup+0xb0>
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	88db      	ldrh	r3, [r3, #6]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d108      	bne.n	800ee04 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	db03      	blt.n	800ee04 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f94e 	bl	800f09e <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ee02:	e00d      	b.n	800ee20 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f002 fec2 	bl	8011b90 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	75fb      	strb	r3, [r7, #23]
          break;
 800ee10:	e006      	b.n	800ee20 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f002 febb 	bl	8011b90 <USBD_CtlError>
          ret = USBD_FAIL;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ee1e:	bf00      	nop
      }
      break;
 800ee20:	e085      	b.n	800ef2e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	785b      	ldrb	r3, [r3, #1]
 800ee26:	2b0b      	cmp	r3, #11
 800ee28:	d871      	bhi.n	800ef0e <USBD_MSC_Setup+0x1ba>
 800ee2a:	a201      	add	r2, pc, #4	; (adr r2, 800ee30 <USBD_MSC_Setup+0xdc>)
 800ee2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee30:	0800ee61 	.word	0x0800ee61
 800ee34:	0800eedd 	.word	0x0800eedd
 800ee38:	0800ef0f 	.word	0x0800ef0f
 800ee3c:	0800ef0f 	.word	0x0800ef0f
 800ee40:	0800ef0f 	.word	0x0800ef0f
 800ee44:	0800ef0f 	.word	0x0800ef0f
 800ee48:	0800ef0f 	.word	0x0800ef0f
 800ee4c:	0800ef0f 	.word	0x0800ef0f
 800ee50:	0800ef0f 	.word	0x0800ef0f
 800ee54:	0800ef0f 	.word	0x0800ef0f
 800ee58:	0800ee8b 	.word	0x0800ee8b
 800ee5c:	0800eeb5 	.word	0x0800eeb5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d107      	bne.n	800ee7c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ee6c:	f107 030e 	add.w	r3, r7, #14
 800ee70:	2202      	movs	r2, #2
 800ee72:	4619      	mov	r1, r3
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f002 fefc 	bl	8011c72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ee7a:	e050      	b.n	800ef1e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f002 fe86 	bl	8011b90 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee84:	2303      	movs	r3, #3
 800ee86:	75fb      	strb	r3, [r7, #23]
          break;
 800ee88:	e049      	b.n	800ef1e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b03      	cmp	r3, #3
 800ee94:	d107      	bne.n	800eea6 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	3304      	adds	r3, #4
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f002 fee7 	bl	8011c72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eea4:	e03b      	b.n	800ef1e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800eea6:	6839      	ldr	r1, [r7, #0]
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f002 fe71 	bl	8011b90 <USBD_CtlError>
            ret = USBD_FAIL;
 800eeae:	2303      	movs	r3, #3
 800eeb0:	75fb      	strb	r3, [r7, #23]
          break;
 800eeb2:	e034      	b.n	800ef1e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	2b03      	cmp	r3, #3
 800eebe:	d106      	bne.n	800eece <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	885b      	ldrh	r3, [r3, #2]
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	461a      	mov	r2, r3
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eecc:	e027      	b.n	800ef1e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f002 fe5d 	bl	8011b90 <USBD_CtlError>
            ret = USBD_FAIL;
 800eed6:	2303      	movs	r3, #3
 800eed8:	75fb      	strb	r3, [r7, #23]
          break;
 800eeda:	e020      	b.n	800ef1e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	2b03      	cmp	r3, #3
 800eee6:	d119      	bne.n	800ef1c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	885b      	ldrh	r3, [r3, #2]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d115      	bne.n	800ef1c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	889b      	ldrh	r3, [r3, #4]
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	4619      	mov	r1, r3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f003 fab9 	bl	8012470 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	889b      	ldrh	r3, [r3, #4]
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	4619      	mov	r1, r3
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fab6 	bl	800f478 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800ef0c:	e006      	b.n	800ef1c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f002 fe3d 	bl	8011b90 <USBD_CtlError>
          ret = USBD_FAIL;
 800ef16:	2303      	movs	r3, #3
 800ef18:	75fb      	strb	r3, [r7, #23]
          break;
 800ef1a:	e000      	b.n	800ef1e <USBD_MSC_Setup+0x1ca>
          break;
 800ef1c:	bf00      	nop
      }
      break;
 800ef1e:	e006      	b.n	800ef2e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 800ef20:	6839      	ldr	r1, [r7, #0]
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f002 fe34 	bl	8011b90 <USBD_CtlError>
      ret = USBD_FAIL;
 800ef28:	2303      	movs	r3, #3
 800ef2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ef2c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ef2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3718      	adds	r7, #24
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	460b      	mov	r3, r1
 800ef42:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	4619      	mov	r1, r3
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 f8e3 	bl	800f114 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	460b      	mov	r3, r1
 800ef62:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800ef64:	78fb      	ldrb	r3, [r7, #3]
 800ef66:	4619      	mov	r1, r3
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f90c 	bl	800f186 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2220      	movs	r2, #32
 800ef84:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800ef86:	4b03      	ldr	r3, [pc, #12]	; (800ef94 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	240000d8 	.word	0x240000d8

0800ef98 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2220      	movs	r2, #32
 800efa4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800efa6:	4b03      	ldr	r3, [pc, #12]	; (800efb4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	240000f8 	.word	0x240000f8

0800efb8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2220      	movs	r2, #32
 800efc4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800efc6:	4b03      	ldr	r3, [pc, #12]	; (800efd4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800efc8:	4618      	mov	r0, r3
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	24000118 	.word	0x24000118

0800efd8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	220a      	movs	r2, #10
 800efe4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800efe6:	4b03      	ldr	r3, [pc, #12]	; (800eff4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800efe8:	4618      	mov	r0, r3
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	24000138 	.word	0x24000138

0800eff8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d101      	bne.n	800f00c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f008:	2303      	movs	r3, #3
 800f00a:	e004      	b.n	800f016 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	683a      	ldr	r2, [r7, #0]
 800f010:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	370c      	adds	r7, #12
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b084      	sub	sp, #16
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f030:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d02e      	beq.n	800f096 <MSC_BOT_Init+0x74>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2200      	movs	r2, #0
 800f03c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	f241 0361 	movw	r3, #4193	; 0x1061
 800f04a:	4413      	add	r3, r2
 800f04c:	2200      	movs	r2, #0
 800f04e:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800f056:	2200      	movs	r2, #0
 800f058:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	f241 0362 	movw	r3, #4194	; 0x1062
 800f060:	4413      	add	r3, r2
 800f062:	2200      	movs	r2, #0
 800f064:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2000      	movs	r0, #0
 800f070:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800f072:	2101      	movs	r1, #1
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f003 f9fb 	bl	8012470 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800f07a:	2181      	movs	r1, #129	; 0x81
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f003 f9f7 	bl	8012470 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f241 0210 	movw	r2, #4112	; 0x1010
 800f088:	441a      	add	r2, r3
 800f08a:	231f      	movs	r3, #31
 800f08c:	2101      	movs	r1, #1
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f003 fab7 	bl	8012602 <USBD_LL_PrepareReceive>
 800f094:	e000      	b.n	800f098 <MSC_BOT_Init+0x76>
    return;
 800f096:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800f098:	3710      	adds	r7, #16
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}

0800f09e <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b084      	sub	sp, #16
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0ac:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d017      	beq.n	800f0e4 <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800f0c0:	2181      	movs	r1, #129	; 0x81
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f003 fa12 	bl	80124ec <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800f0c8:	2101      	movs	r1, #1
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f003 fa0e 	bl	80124ec <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f241 0210 	movw	r2, #4112	; 0x1010
 800f0d6:	441a      	add	r2, r3
 800f0d8:	231f      	movs	r3, #31
 800f0da:	2101      	movs	r1, #1
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f003 fa90 	bl	8012602 <USBD_LL_PrepareReceive>
 800f0e2:	e000      	b.n	800f0e6 <MSC_BOT_Reset+0x48>
    return;
 800f0e4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0fa:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d002      	beq.n	800f108 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2200      	movs	r2, #0
 800f106:	721a      	strb	r2, [r3, #8]
  }
}
 800f108:	bf00      	nop
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f126:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d023      	beq.n	800f176 <MSC_BOT_DataIn+0x62>
  {
    return;
  }

  switch (hmsc->bot_state)
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	7a1b      	ldrb	r3, [r3, #8]
 800f132:	2b02      	cmp	r3, #2
 800f134:	d005      	beq.n	800f142 <MSC_BOT_DataIn+0x2e>
 800f136:	2b02      	cmp	r3, #2
 800f138:	db1f      	blt.n	800f17a <MSC_BOT_DataIn+0x66>
 800f13a:	3b03      	subs	r3, #3
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d81c      	bhi.n	800f17a <MSC_BOT_DataIn+0x66>
 800f140:	e014      	b.n	800f16c <MSC_BOT_DataIn+0x58>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	f241 031d 	movw	r3, #4125	; 0x101d
 800f148:	4413      	add	r3, r2
 800f14a:	7819      	ldrb	r1, [r3, #0]
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	f241 031f 	movw	r3, #4127	; 0x101f
 800f152:	4413      	add	r3, r2
 800f154:	461a      	mov	r2, r3
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 f9bc 	bl	800f4d4 <SCSI_ProcessCmd>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	da0d      	bge.n	800f17e <MSC_BOT_DataIn+0x6a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f162:	2101      	movs	r1, #1
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 f91b 	bl	800f3a0 <MSC_BOT_SendCSW>
      }
      break;
 800f16a:	e008      	b.n	800f17e <MSC_BOT_DataIn+0x6a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f16c:	2100      	movs	r1, #0
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 f916 	bl	800f3a0 <MSC_BOT_SendCSW>
      break;
 800f174:	e004      	b.n	800f180 <MSC_BOT_DataIn+0x6c>
    return;
 800f176:	bf00      	nop
 800f178:	e002      	b.n	800f180 <MSC_BOT_DataIn+0x6c>

    default:
      break;
 800f17a:	bf00      	nop
 800f17c:	e000      	b.n	800f180 <MSC_BOT_DataIn+0x6c>
      break;
 800f17e:	bf00      	nop
  }
}
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b084      	sub	sp, #16
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	460b      	mov	r3, r1
 800f190:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f198:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d01f      	beq.n	800f1e0 <MSC_BOT_DataOut+0x5a>
  {
    return;
  }

  switch (hmsc->bot_state)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	7a1b      	ldrb	r3, [r3, #8]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d002      	beq.n	800f1ae <MSC_BOT_DataOut+0x28>
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d004      	beq.n	800f1b6 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800f1ac:	e01b      	b.n	800f1e6 <MSC_BOT_DataOut+0x60>
      MSC_BOT_CBW_Decode(pdev);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 f81c 	bl	800f1ec <MSC_BOT_CBW_Decode>
      break;
 800f1b4:	e017      	b.n	800f1e6 <MSC_BOT_DataOut+0x60>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	f241 031d 	movw	r3, #4125	; 0x101d
 800f1bc:	4413      	add	r3, r2
 800f1be:	7819      	ldrb	r1, [r3, #0]
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	f241 031f 	movw	r3, #4127	; 0x101f
 800f1c6:	4413      	add	r3, r2
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 f982 	bl	800f4d4 <SCSI_ProcessCmd>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	da06      	bge.n	800f1e4 <MSC_BOT_DataOut+0x5e>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f1d6:	2101      	movs	r1, #1
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 f8e1 	bl	800f3a0 <MSC_BOT_SendCSW>
      break;
 800f1de:	e001      	b.n	800f1e4 <MSC_BOT_DataOut+0x5e>
    return;
 800f1e0:	bf00      	nop
 800f1e2:	e000      	b.n	800f1e6 <MSC_BOT_DataOut+0x60>
      break;
 800f1e4:	bf00      	nop
  }
}
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1fa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f000 808d 	beq.w	800f31e <MSC_BOT_CBW_Decode+0x132>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	f241 0314 	movw	r3, #4116	; 0x1014
 800f20a:	4413      	add	r3, r2
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	68f9      	ldr	r1, [r7, #12]
 800f210:	f241 0334 	movw	r3, #4148	; 0x1034
 800f214:	440b      	add	r3, r1
 800f216:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	f241 0318 	movw	r3, #4120	; 0x1018
 800f21e:	4413      	add	r3, r2
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68f9      	ldr	r1, [r7, #12]
 800f224:	f241 0338 	movw	r3, #4152	; 0x1038
 800f228:	440b      	add	r3, r1
 800f22a:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800f22c:	2101      	movs	r1, #1
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f003 fa08 	bl	8012644 <USBD_LL_GetRxDataSize>
 800f234:	4603      	mov	r3, r0
 800f236:	2b1f      	cmp	r3, #31
 800f238:	d11c      	bne.n	800f274 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f23a:	68fa      	ldr	r2, [r7, #12]
 800f23c:	f241 0310 	movw	r3, #4112	; 0x1010
 800f240:	4413      	add	r3, r2
 800f242:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800f244:	4a39      	ldr	r2, [pc, #228]	; (800f32c <MSC_BOT_CBW_Decode+0x140>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d114      	bne.n	800f274 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	f241 031d 	movw	r3, #4125	; 0x101d
 800f250:	4413      	add	r3, r2
 800f252:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f254:	2b01      	cmp	r3, #1
 800f256:	d80d      	bhi.n	800f274 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	f241 031e 	movw	r3, #4126	; 0x101e
 800f25e:	4413      	add	r3, r2
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d006      	beq.n	800f274 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bCBLength > 16U))
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	f241 031e 	movw	r3, #4126	; 0x101e
 800f26c:	4413      	add	r3, r2
 800f26e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800f270:	2b10      	cmp	r3, #16
 800f272:	d910      	bls.n	800f296 <MSC_BOT_CBW_Decode+0xaa>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	f241 031d 	movw	r3, #4125	; 0x101d
 800f27a:	4413      	add	r3, r2
 800f27c:	7819      	ldrb	r1, [r3, #0]
 800f27e:	2320      	movs	r3, #32
 800f280:	2205      	movs	r2, #5
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 fe1a 	bl	800febc <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2202      	movs	r2, #2
 800f28c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f8bc 	bl	800f40c <MSC_BOT_Abort>
 800f294:	e046      	b.n	800f324 <MSC_BOT_CBW_Decode+0x138>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	f241 031d 	movw	r3, #4125	; 0x101d
 800f29c:	4413      	add	r3, r2
 800f29e:	7819      	ldrb	r1, [r3, #0]
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	f241 031f 	movw	r3, #4127	; 0x101f
 800f2a6:	4413      	add	r3, r2
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f912 	bl	800f4d4 <SCSI_ProcessCmd>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	da0c      	bge.n	800f2d0 <MSC_BOT_CBW_Decode+0xe4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	7a1b      	ldrb	r3, [r3, #8]
 800f2ba:	2b05      	cmp	r3, #5
 800f2bc:	d104      	bne.n	800f2c8 <MSC_BOT_CBW_Decode+0xdc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f2be:	2101      	movs	r1, #1
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 f86d 	bl	800f3a0 <MSC_BOT_SendCSW>
 800f2c6:	e02d      	b.n	800f324 <MSC_BOT_CBW_Decode+0x138>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 f89f 	bl	800f40c <MSC_BOT_Abort>
 800f2ce:	e029      	b.n	800f324 <MSC_BOT_CBW_Decode+0x138>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	7a1b      	ldrb	r3, [r3, #8]
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d024      	beq.n	800f322 <MSC_BOT_CBW_Decode+0x136>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d020      	beq.n	800f322 <MSC_BOT_CBW_Decode+0x136>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f2e4:	2b03      	cmp	r3, #3
 800f2e6:	d01c      	beq.n	800f322 <MSC_BOT_CBW_Decode+0x136>
    {
      if (hmsc->bot_data_length > 0U)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d009      	beq.n	800f304 <MSC_BOT_CBW_Decode+0x118>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f103 0110 	add.w	r1, r3, #16
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f817 	bl	800f330 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800f302:	e00f      	b.n	800f324 <MSC_BOT_CBW_Decode+0x138>
      }
      else if (hmsc->bot_data_length == 0U)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d104      	bne.n	800f316 <MSC_BOT_CBW_Decode+0x12a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f30c:	2100      	movs	r1, #0
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f846 	bl	800f3a0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800f314:	e006      	b.n	800f324 <MSC_BOT_CBW_Decode+0x138>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f878 	bl	800f40c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800f31c:	e002      	b.n	800f324 <MSC_BOT_CBW_Decode+0x138>
    return;
 800f31e:	bf00      	nop
 800f320:	e000      	b.n	800f324 <MSC_BOT_CBW_Decode+0x138>
      }
    }
    else
    {
      return;
 800f322:	bf00      	nop
    }
  }
}
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	43425355 	.word	0x43425355

0800f330 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f342:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800f344:	697a      	ldr	r2, [r7, #20]
 800f346:	f241 0318 	movw	r3, #4120	; 0x1018
 800f34a:	4413      	add	r3, r2
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	4293      	cmp	r3, r2
 800f352:	bf28      	it	cs
 800f354:	4613      	movcs	r3, r2
 800f356:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d01b      	beq.n	800f396 <MSC_BOT_SendData+0x66>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 800f35e:	697a      	ldr	r2, [r7, #20]
 800f360:	f241 0338 	movw	r3, #4152	; 0x1038
 800f364:	4413      	add	r3, r2
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	1ad2      	subs	r2, r2, r3
 800f36c:	6979      	ldr	r1, [r7, #20]
 800f36e:	f241 0338 	movw	r3, #4152	; 0x1038
 800f372:	440b      	add	r3, r1
 800f374:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800f376:	697a      	ldr	r2, [r7, #20]
 800f378:	f241 033c 	movw	r3, #4156	; 0x103c
 800f37c:	4413      	add	r3, r2
 800f37e:	2200      	movs	r2, #0
 800f380:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	2204      	movs	r2, #4
 800f386:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	2181      	movs	r1, #129	; 0x81
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f003 f916 	bl	80125c0 <USBD_LL_Transmit>
 800f394:	e000      	b.n	800f398 <MSC_BOT_SendData+0x68>
    return;
 800f396:	bf00      	nop
}
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
	...

0800f3a0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3b2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d021      	beq.n	800f3fe <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	f241 0330 	movw	r3, #4144	; 0x1030
 800f3c0:	4413      	add	r3, r2
 800f3c2:	4a11      	ldr	r2, [pc, #68]	; (800f408 <MSC_BOT_SendCSW+0x68>)
 800f3c4:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	f241 033c 	movw	r3, #4156	; 0x103c
 800f3cc:	4413      	add	r3, r2
 800f3ce:	78fa      	ldrb	r2, [r7, #3]
 800f3d0:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f241 0230 	movw	r2, #4144	; 0x1030
 800f3de:	441a      	add	r2, r3
 800f3e0:	230d      	movs	r3, #13
 800f3e2:	2181      	movs	r1, #129	; 0x81
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f003 f8eb 	bl	80125c0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f241 0210 	movw	r2, #4112	; 0x1010
 800f3f0:	441a      	add	r2, r3
 800f3f2:	231f      	movs	r3, #31
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f003 f903 	bl	8012602 <USBD_LL_PrepareReceive>
 800f3fc:	e000      	b.n	800f400 <MSC_BOT_SendCSW+0x60>
    return;
 800f3fe:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800f400:	3710      	adds	r7, #16
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	53425355 	.word	0x53425355

0800f40c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f41a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d026      	beq.n	800f470 <MSC_BOT_Abort+0x64>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	f241 031c 	movw	r3, #4124	; 0x101c
 800f428:	4413      	add	r3, r2
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10e      	bne.n	800f44e <MSC_BOT_Abort+0x42>
      (hmsc->cbw.dDataLength != 0U) &&
 800f430:	68fa      	ldr	r2, [r7, #12]
 800f432:	f241 0318 	movw	r3, #4120	; 0x1018
 800f436:	4413      	add	r3, r2
 800f438:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d007      	beq.n	800f44e <MSC_BOT_Abort+0x42>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800f442:	2b00      	cmp	r3, #0
 800f444:	d103      	bne.n	800f44e <MSC_BOT_Abort+0x42>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800f446:	2101      	movs	r1, #1
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f003 f830 	bl	80124ae <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f44e:	2181      	movs	r1, #129	; 0x81
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f003 f82c 	bl	80124ae <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	7a5b      	ldrb	r3, [r3, #9]
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	d109      	bne.n	800f472 <MSC_BOT_Abort+0x66>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f45e:	2181      	movs	r1, #129	; 0x81
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f003 f824 	bl	80124ae <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800f466:	2101      	movs	r1, #1
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f003 f820 	bl	80124ae <USBD_LL_StallEP>
 800f46e:	e000      	b.n	800f472 <MSC_BOT_Abort+0x66>
    return;
 800f470:	bf00      	nop
  }
}
 800f472:	3710      	adds	r7, #16
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	460b      	mov	r3, r1
 800f482:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f48a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d019      	beq.n	800f4c6 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	7a5b      	ldrb	r3, [r3, #9]
 800f496:	2b02      	cmp	r3, #2
 800f498:	d108      	bne.n	800f4ac <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f49a:	2181      	movs	r1, #129	; 0x81
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f003 f806 	bl	80124ae <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800f4a2:	2101      	movs	r1, #1
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f003 f802 	bl	80124ae <USBD_LL_StallEP>
 800f4aa:	e00f      	b.n	800f4cc <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800f4ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	da0a      	bge.n	800f4ca <MSC_BOT_CplClrFeature+0x52>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	7a5b      	ldrb	r3, [r3, #9]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d006      	beq.n	800f4ca <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f4bc:	2101      	movs	r1, #1
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7ff ff6e 	bl	800f3a0 <MSC_BOT_SendCSW>
 800f4c4:	e002      	b.n	800f4cc <MSC_BOT_CplClrFeature+0x54>
    return;
 800f4c6:	bf00      	nop
 800f4c8:	e000      	b.n	800f4cc <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800f4ca:	bf00      	nop
  }
}
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
	...

0800f4d4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b086      	sub	sp, #24
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	607a      	str	r2, [r7, #4]
 800f4e0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4e8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d102      	bne.n	800f4f6 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 800f4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f4:	e168      	b.n	800f7c8 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	2baa      	cmp	r3, #170	; 0xaa
 800f4fc:	f000 8144 	beq.w	800f788 <SCSI_ProcessCmd+0x2b4>
 800f500:	2baa      	cmp	r3, #170	; 0xaa
 800f502:	f300 8153 	bgt.w	800f7ac <SCSI_ProcessCmd+0x2d8>
 800f506:	2ba8      	cmp	r3, #168	; 0xa8
 800f508:	f000 812c 	beq.w	800f764 <SCSI_ProcessCmd+0x290>
 800f50c:	2ba8      	cmp	r3, #168	; 0xa8
 800f50e:	f300 814d 	bgt.w	800f7ac <SCSI_ProcessCmd+0x2d8>
 800f512:	2b5a      	cmp	r3, #90	; 0x5a
 800f514:	f300 80c0 	bgt.w	800f698 <SCSI_ProcessCmd+0x1c4>
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f2c0 8147 	blt.w	800f7ac <SCSI_ProcessCmd+0x2d8>
 800f51e:	2b5a      	cmp	r3, #90	; 0x5a
 800f520:	f200 8144 	bhi.w	800f7ac <SCSI_ProcessCmd+0x2d8>
 800f524:	a201      	add	r2, pc, #4	; (adr r2, 800f52c <SCSI_ProcessCmd+0x58>)
 800f526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f52a:	bf00      	nop
 800f52c:	0800f69f 	.word	0x0800f69f
 800f530:	0800f7ad 	.word	0x0800f7ad
 800f534:	0800f7ad 	.word	0x0800f7ad
 800f538:	0800f6b1 	.word	0x0800f6b1
 800f53c:	0800f7ad 	.word	0x0800f7ad
 800f540:	0800f7ad 	.word	0x0800f7ad
 800f544:	0800f7ad 	.word	0x0800f7ad
 800f548:	0800f7ad 	.word	0x0800f7ad
 800f54c:	0800f7ad 	.word	0x0800f7ad
 800f550:	0800f7ad 	.word	0x0800f7ad
 800f554:	0800f7ad 	.word	0x0800f7ad
 800f558:	0800f7ad 	.word	0x0800f7ad
 800f55c:	0800f7ad 	.word	0x0800f7ad
 800f560:	0800f7ad 	.word	0x0800f7ad
 800f564:	0800f7ad 	.word	0x0800f7ad
 800f568:	0800f7ad 	.word	0x0800f7ad
 800f56c:	0800f7ad 	.word	0x0800f7ad
 800f570:	0800f7ad 	.word	0x0800f7ad
 800f574:	0800f6c3 	.word	0x0800f6c3
 800f578:	0800f7ad 	.word	0x0800f7ad
 800f57c:	0800f7ad 	.word	0x0800f7ad
 800f580:	0800f7ad 	.word	0x0800f7ad
 800f584:	0800f7ad 	.word	0x0800f7ad
 800f588:	0800f7ad 	.word	0x0800f7ad
 800f58c:	0800f7ad 	.word	0x0800f7ad
 800f590:	0800f7ad 	.word	0x0800f7ad
 800f594:	0800f6f9 	.word	0x0800f6f9
 800f598:	0800f6d5 	.word	0x0800f6d5
 800f59c:	0800f7ad 	.word	0x0800f7ad
 800f5a0:	0800f7ad 	.word	0x0800f7ad
 800f5a4:	0800f6e7 	.word	0x0800f6e7
 800f5a8:	0800f7ad 	.word	0x0800f7ad
 800f5ac:	0800f7ad 	.word	0x0800f7ad
 800f5b0:	0800f7ad 	.word	0x0800f7ad
 800f5b4:	0800f7ad 	.word	0x0800f7ad
 800f5b8:	0800f71d 	.word	0x0800f71d
 800f5bc:	0800f7ad 	.word	0x0800f7ad
 800f5c0:	0800f72f 	.word	0x0800f72f
 800f5c4:	0800f7ad 	.word	0x0800f7ad
 800f5c8:	0800f7ad 	.word	0x0800f7ad
 800f5cc:	0800f753 	.word	0x0800f753
 800f5d0:	0800f7ad 	.word	0x0800f7ad
 800f5d4:	0800f777 	.word	0x0800f777
 800f5d8:	0800f7ad 	.word	0x0800f7ad
 800f5dc:	0800f7ad 	.word	0x0800f7ad
 800f5e0:	0800f7ad 	.word	0x0800f7ad
 800f5e4:	0800f7ad 	.word	0x0800f7ad
 800f5e8:	0800f79b 	.word	0x0800f79b
 800f5ec:	0800f7ad 	.word	0x0800f7ad
 800f5f0:	0800f7ad 	.word	0x0800f7ad
 800f5f4:	0800f7ad 	.word	0x0800f7ad
 800f5f8:	0800f7ad 	.word	0x0800f7ad
 800f5fc:	0800f7ad 	.word	0x0800f7ad
 800f600:	0800f7ad 	.word	0x0800f7ad
 800f604:	0800f7ad 	.word	0x0800f7ad
 800f608:	0800f7ad 	.word	0x0800f7ad
 800f60c:	0800f7ad 	.word	0x0800f7ad
 800f610:	0800f7ad 	.word	0x0800f7ad
 800f614:	0800f7ad 	.word	0x0800f7ad
 800f618:	0800f7ad 	.word	0x0800f7ad
 800f61c:	0800f7ad 	.word	0x0800f7ad
 800f620:	0800f7ad 	.word	0x0800f7ad
 800f624:	0800f7ad 	.word	0x0800f7ad
 800f628:	0800f7ad 	.word	0x0800f7ad
 800f62c:	0800f7ad 	.word	0x0800f7ad
 800f630:	0800f7ad 	.word	0x0800f7ad
 800f634:	0800f7ad 	.word	0x0800f7ad
 800f638:	0800f7ad 	.word	0x0800f7ad
 800f63c:	0800f7ad 	.word	0x0800f7ad
 800f640:	0800f7ad 	.word	0x0800f7ad
 800f644:	0800f7ad 	.word	0x0800f7ad
 800f648:	0800f7ad 	.word	0x0800f7ad
 800f64c:	0800f7ad 	.word	0x0800f7ad
 800f650:	0800f7ad 	.word	0x0800f7ad
 800f654:	0800f7ad 	.word	0x0800f7ad
 800f658:	0800f7ad 	.word	0x0800f7ad
 800f65c:	0800f7ad 	.word	0x0800f7ad
 800f660:	0800f7ad 	.word	0x0800f7ad
 800f664:	0800f7ad 	.word	0x0800f7ad
 800f668:	0800f7ad 	.word	0x0800f7ad
 800f66c:	0800f7ad 	.word	0x0800f7ad
 800f670:	0800f7ad 	.word	0x0800f7ad
 800f674:	0800f7ad 	.word	0x0800f7ad
 800f678:	0800f7ad 	.word	0x0800f7ad
 800f67c:	0800f7ad 	.word	0x0800f7ad
 800f680:	0800f7ad 	.word	0x0800f7ad
 800f684:	0800f7ad 	.word	0x0800f7ad
 800f688:	0800f7ad 	.word	0x0800f7ad
 800f68c:	0800f7ad 	.word	0x0800f7ad
 800f690:	0800f7ad 	.word	0x0800f7ad
 800f694:	0800f70b 	.word	0x0800f70b
 800f698:	2b9e      	cmp	r3, #158	; 0x9e
 800f69a:	d051      	beq.n	800f740 <SCSI_ProcessCmd+0x26c>
 800f69c:	e086      	b.n	800f7ac <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800f69e:	7afb      	ldrb	r3, [r7, #11]
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f000 f893 	bl	800f7d0 <SCSI_TestUnitReady>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	75fb      	strb	r3, [r7, #23]
      break;
 800f6ae:	e089      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800f6b0:	7afb      	ldrb	r3, [r7, #11]
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f000 fb70 	bl	800fd9c <SCSI_RequestSense>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	75fb      	strb	r3, [r7, #23]
      break;
 800f6c0:	e080      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800f6c2:	7afb      	ldrb	r3, [r7, #11]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f000 f8d7 	bl	800f87c <SCSI_Inquiry>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	75fb      	strb	r3, [r7, #23]
      break;
 800f6d2:	e077      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800f6d4:	7afb      	ldrb	r3, [r7, #11]
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	4619      	mov	r1, r3
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f000 fc47 	bl	800ff6e <SCSI_StartStopUnit>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	75fb      	strb	r3, [r7, #23]
      break;
 800f6e4:	e06e      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800f6e6:	7afb      	ldrb	r3, [r7, #11]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	68f8      	ldr	r0, [r7, #12]
 800f6ee:	f000 fc97 	bl	8010020 <SCSI_AllowPreventRemovable>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	75fb      	strb	r3, [r7, #23]
      break;
 800f6f6:	e065      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800f6f8:	7afb      	ldrb	r3, [r7, #11]
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f000 faf4 	bl	800fcec <SCSI_ModeSense6>
 800f704:	4603      	mov	r3, r0
 800f706:	75fb      	strb	r3, [r7, #23]
      break;
 800f708:	e05c      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800f70a:	7afb      	ldrb	r3, [r7, #11]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	4619      	mov	r1, r3
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f000 fb17 	bl	800fd44 <SCSI_ModeSense10>
 800f716:	4603      	mov	r3, r0
 800f718:	75fb      	strb	r3, [r7, #23]
      break;
 800f71a:	e053      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800f71c:	7afb      	ldrb	r3, [r7, #11]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	4619      	mov	r1, r3
 800f722:	68f8      	ldr	r0, [r7, #12]
 800f724:	f000 fa6d 	bl	800fc02 <SCSI_ReadFormatCapacity>
 800f728:	4603      	mov	r3, r0
 800f72a:	75fb      	strb	r3, [r7, #23]
      break;
 800f72c:	e04a      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800f72e:	7afb      	ldrb	r3, [r7, #11]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	4619      	mov	r1, r3
 800f734:	68f8      	ldr	r0, [r7, #12]
 800f736:	f000 f91b 	bl	800f970 <SCSI_ReadCapacity10>
 800f73a:	4603      	mov	r3, r0
 800f73c:	75fb      	strb	r3, [r7, #23]
      break;
 800f73e:	e041      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800f740:	7afb      	ldrb	r3, [r7, #11]
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	4619      	mov	r1, r3
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f000 f99c 	bl	800fa84 <SCSI_ReadCapacity16>
 800f74c:	4603      	mov	r3, r0
 800f74e:	75fb      	strb	r3, [r7, #23]
      break;
 800f750:	e038      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800f752:	7afb      	ldrb	r3, [r7, #11]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	4619      	mov	r1, r3
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f000 fc8e 	bl	801007a <SCSI_Read10>
 800f75e:	4603      	mov	r3, r0
 800f760:	75fb      	strb	r3, [r7, #23]
      break;
 800f762:	e02f      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800f764:	7afb      	ldrb	r3, [r7, #11]
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	4619      	mov	r1, r3
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f000 fd3d 	bl	80101ea <SCSI_Read12>
 800f770:	4603      	mov	r3, r0
 800f772:	75fb      	strb	r3, [r7, #23]
      break;
 800f774:	e026      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800f776:	7afb      	ldrb	r3, [r7, #11]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	4619      	mov	r1, r3
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f000 fdf6 	bl	801036e <SCSI_Write10>
 800f782:	4603      	mov	r3, r0
 800f784:	75fb      	strb	r3, [r7, #23]
      break;
 800f786:	e01d      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800f788:	7afb      	ldrb	r3, [r7, #11]
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	4619      	mov	r1, r3
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f000 fecb 	bl	801052a <SCSI_Write12>
 800f794:	4603      	mov	r3, r0
 800f796:	75fb      	strb	r3, [r7, #23]
      break;
 800f798:	e014      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800f79a:	7afb      	ldrb	r3, [r7, #11]
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	f000 ffb0 	bl	8010706 <SCSI_Verify10>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	75fb      	strb	r3, [r7, #23]
      break;
 800f7aa:	e00b      	b.n	800f7c4 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800f7ac:	7af9      	ldrb	r1, [r7, #11]
 800f7ae:	2320      	movs	r3, #32
 800f7b0:	2205      	movs	r2, #5
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f000 fb82 	bl	800febc <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	2202      	movs	r2, #2
 800f7bc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800f7be:	23ff      	movs	r3, #255	; 0xff
 800f7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800f7c2:	bf00      	nop
  }

  return ret;
 800f7c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3718      	adds	r7, #24
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b086      	sub	sp, #24
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	460b      	mov	r3, r1
 800f7da:	607a      	str	r2, [r7, #4]
 800f7dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d102      	bne.n	800f7f2 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 800f7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f0:	e040      	b.n	800f874 <SCSI_TestUnitReady+0xa4>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	f241 0318 	movw	r3, #4120	; 0x1018
 800f7f8:	4413      	add	r3, r2
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00c      	beq.n	800f81a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f800:	697a      	ldr	r2, [r7, #20]
 800f802:	f241 031d 	movw	r3, #4125	; 0x101d
 800f806:	4413      	add	r3, r2
 800f808:	7819      	ldrb	r1, [r3, #0]
 800f80a:	2320      	movs	r3, #32
 800f80c:	2205      	movs	r2, #5
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f000 fb54 	bl	800febc <SCSI_SenseCode>

    return -1;
 800f814:	f04f 33ff 	mov.w	r3, #4294967295
 800f818:	e02c      	b.n	800f874 <SCSI_TestUnitReady+0xa4>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800f81a:	697a      	ldr	r2, [r7, #20]
 800f81c:	f241 0362 	movw	r3, #4194	; 0x1062
 800f820:	4413      	add	r3, r2
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b02      	cmp	r3, #2
 800f826:	d10b      	bne.n	800f840 <SCSI_TestUnitReady+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f828:	7af9      	ldrb	r1, [r7, #11]
 800f82a:	233a      	movs	r3, #58	; 0x3a
 800f82c:	2202      	movs	r2, #2
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f000 fb44 	bl	800febc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	2205      	movs	r2, #5
 800f838:	721a      	strb	r2, [r3, #8]
    return -1;
 800f83a:	f04f 33ff 	mov.w	r3, #4294967295
 800f83e:	e019      	b.n	800f874 <SCSI_TestUnitReady+0xa4>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	7afa      	ldrb	r2, [r7, #11]
 800f84a:	4610      	mov	r0, r2
 800f84c:	4798      	blx	r3
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00b      	beq.n	800f86c <SCSI_TestUnitReady+0x9c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f854:	7af9      	ldrb	r1, [r7, #11]
 800f856:	233a      	movs	r3, #58	; 0x3a
 800f858:	2202      	movs	r2, #2
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	f000 fb2e 	bl	800febc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	2205      	movs	r2, #5
 800f864:	721a      	strb	r2, [r3, #8]

    return -1;
 800f866:	f04f 33ff 	mov.w	r3, #4294967295
 800f86a:	e003      	b.n	800f874 <SCSI_TestUnitReady+0xa4>
  }
  hmsc->bot_data_length = 0U;
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	2200      	movs	r2, #0
 800f870:	60da      	str	r2, [r3, #12]

  return 0;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3718      	adds	r7, #24
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b088      	sub	sp, #32
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	460b      	mov	r3, r1
 800f886:	607a      	str	r2, [r7, #4]
 800f888:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f890:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d102      	bne.n	800f89e <SCSI_Inquiry+0x22>
  {
    return -1;
 800f898:	f04f 33ff 	mov.w	r3, #4294967295
 800f89c:	e060      	b.n	800f960 <SCSI_Inquiry+0xe4>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800f89e:	69ba      	ldr	r2, [r7, #24]
 800f8a0:	f241 0318 	movw	r3, #4120	; 0x1018
 800f8a4:	4413      	add	r3, r2
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10c      	bne.n	800f8c6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f8ac:	69ba      	ldr	r2, [r7, #24]
 800f8ae:	f241 031d 	movw	r3, #4125	; 0x101d
 800f8b2:	4413      	add	r3, r2
 800f8b4:	7819      	ldrb	r1, [r3, #0]
 800f8b6:	2320      	movs	r3, #32
 800f8b8:	2205      	movs	r2, #5
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f000 fafe 	bl	800febc <SCSI_SenseCode>
    return -1;
 800f8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c4:	e04c      	b.n	800f960 <SCSI_Inquiry+0xe4>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	f003 0301 	and.w	r3, r3, #1
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d022      	beq.n	800f91a <SCSI_Inquiry+0x9e>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	3302      	adds	r3, #2
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d105      	bne.n	800f8ea <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800f8de:	2206      	movs	r2, #6
 800f8e0:	4921      	ldr	r1, [pc, #132]	; (800f968 <SCSI_Inquiry+0xec>)
 800f8e2:	69b8      	ldr	r0, [r7, #24]
 800f8e4:	f001 f8b3 	bl	8010a4e <SCSI_UpdateBotData>
 800f8e8:	e039      	b.n	800f95e <SCSI_Inquiry+0xe2>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	3302      	adds	r3, #2
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	2b80      	cmp	r3, #128	; 0x80
 800f8f2:	d105      	bne.n	800f900 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800f8f4:	2208      	movs	r2, #8
 800f8f6:	491d      	ldr	r1, [pc, #116]	; (800f96c <SCSI_Inquiry+0xf0>)
 800f8f8:	69b8      	ldr	r0, [r7, #24]
 800f8fa:	f001 f8a8 	bl	8010a4e <SCSI_UpdateBotData>
 800f8fe:	e02e      	b.n	800f95e <SCSI_Inquiry+0xe2>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800f900:	69ba      	ldr	r2, [r7, #24]
 800f902:	f241 031d 	movw	r3, #4125	; 0x101d
 800f906:	4413      	add	r3, r2
 800f908:	7819      	ldrb	r1, [r3, #0]
 800f90a:	2324      	movs	r3, #36	; 0x24
 800f90c:	2205      	movs	r2, #5
 800f90e:	68f8      	ldr	r0, [r7, #12]
 800f910:	f000 fad4 	bl	800febc <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800f914:	f04f 33ff 	mov.w	r3, #4294967295
 800f918:	e022      	b.n	800f960 <SCSI_Inquiry+0xe4>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f920:	69d9      	ldr	r1, [r3, #28]
 800f922:	7afa      	ldrb	r2, [r7, #11]
 800f924:	4613      	mov	r3, r2
 800f926:	00db      	lsls	r3, r3, #3
 800f928:	4413      	add	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	440b      	add	r3, r1
 800f92e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	3304      	adds	r3, #4
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	b29b      	uxth	r3, r3
 800f938:	3305      	adds	r3, #5
 800f93a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3304      	adds	r3, #4
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	b29b      	uxth	r3, r3
 800f944:	8bfa      	ldrh	r2, [r7, #30]
 800f946:	429a      	cmp	r2, r3
 800f948:	d303      	bcc.n	800f952 <SCSI_Inquiry+0xd6>
    {
      len = params[4];
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	3304      	adds	r3, #4
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800f952:	8bfb      	ldrh	r3, [r7, #30]
 800f954:	461a      	mov	r2, r3
 800f956:	6979      	ldr	r1, [r7, #20]
 800f958:	69b8      	ldr	r0, [r7, #24]
 800f95a:	f001 f878 	bl	8010a4e <SCSI_UpdateBotData>
  }

  return 0;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	4618      	mov	r0, r3
 800f962:	3720      	adds	r7, #32
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	24000144 	.word	0x24000144
 800f96c:	2400014c 	.word	0x2400014c

0800f970 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f970:	b590      	push	{r4, r7, lr}
 800f972:	b087      	sub	sp, #28
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	460b      	mov	r3, r1
 800f97a:	607a      	str	r2, [r7, #4]
 800f97c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f984:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d102      	bne.n	800f992 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 800f98c:	f04f 33ff 	mov.w	r3, #4294967295
 800f990:	e074      	b.n	800fa7c <SCSI_ReadCapacity10+0x10c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f998:	685c      	ldr	r4, [r3, #4]
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	f241 0368 	movw	r3, #4200	; 0x1068
 800f9a0:	4413      	add	r3, r2
 800f9a2:	6979      	ldr	r1, [r7, #20]
 800f9a4:	f241 0264 	movw	r2, #4196	; 0x1064
 800f9a8:	440a      	add	r2, r1
 800f9aa:	7af8      	ldrb	r0, [r7, #11]
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	47a0      	blx	r4
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800f9b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d106      	bne.n	800f9ca <SCSI_ReadCapacity10+0x5a>
 800f9bc:	697a      	ldr	r2, [r7, #20]
 800f9be:	f241 0362 	movw	r3, #4194	; 0x1062
 800f9c2:	4413      	add	r3, r2
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b02      	cmp	r3, #2
 800f9c8:	d108      	bne.n	800f9dc <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f9ca:	7af9      	ldrb	r1, [r7, #11]
 800f9cc:	233a      	movs	r3, #58	; 0x3a
 800f9ce:	2202      	movs	r2, #2
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f000 fa73 	bl	800febc <SCSI_SenseCode>
    return -1;
 800f9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9da:	e04f      	b.n	800fa7c <SCSI_ReadCapacity10+0x10c>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f9dc:	697a      	ldr	r2, [r7, #20]
 800f9de:	f241 0368 	movw	r3, #4200	; 0x1068
 800f9e2:	4413      	add	r3, r2
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	3b01      	subs	r3, #1
 800f9e8:	0e1b      	lsrs	r3, r3, #24
 800f9ea:	b2da      	uxtb	r2, r3
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	f241 0368 	movw	r3, #4200	; 0x1068
 800f9f6:	4413      	add	r3, r2
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	0c1b      	lsrs	r3, r3, #16
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800fa04:	697a      	ldr	r2, [r7, #20]
 800fa06:	f241 0368 	movw	r3, #4200	; 0x1068
 800fa0a:	4413      	add	r3, r2
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	0a1b      	lsrs	r3, r3, #8
 800fa12:	b2da      	uxtb	r2, r3
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	f241 0368 	movw	r3, #4200	; 0x1068
 800fa1e:	4413      	add	r3, r2
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	3b01      	subs	r3, #1
 800fa26:	b2da      	uxtb	r2, r3
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	f241 0364 	movw	r3, #4196	; 0x1064
 800fa32:	4413      	add	r3, r2
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	161b      	asrs	r3, r3, #24
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	f241 0364 	movw	r3, #4196	; 0x1064
 800fa44:	4413      	add	r3, r2
 800fa46:	881b      	ldrh	r3, [r3, #0]
 800fa48:	141b      	asrs	r3, r3, #16
 800fa4a:	b2da      	uxtb	r2, r3
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800fa50:	697a      	ldr	r2, [r7, #20]
 800fa52:	f241 0364 	movw	r3, #4196	; 0x1064
 800fa56:	4413      	add	r3, r2
 800fa58:	881b      	ldrh	r3, [r3, #0]
 800fa5a:	0a1b      	lsrs	r3, r3, #8
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	b2da      	uxtb	r2, r3
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	f241 0364 	movw	r3, #4196	; 0x1064
 800fa6a:	4413      	add	r3, r2
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	2208      	movs	r2, #8
 800fa78:	60da      	str	r2, [r3, #12]

  return 0;
 800fa7a:	2300      	movs	r3, #0

}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	371c      	adds	r7, #28
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd90      	pop	{r4, r7, pc}

0800fa84 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fa84:	b590      	push	{r4, r7, lr}
 800fa86:	b089      	sub	sp, #36	; 0x24
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	607a      	str	r2, [r7, #4]
 800fa90:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa98:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d102      	bne.n	800faa6 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800faa0:	f04f 33ff 	mov.w	r3, #4294967295
 800faa4:	e0a9      	b.n	800fbfa <SCSI_ReadCapacity16+0x176>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800faac:	685c      	ldr	r4, [r3, #4]
 800faae:	69ba      	ldr	r2, [r7, #24]
 800fab0:	f241 0368 	movw	r3, #4200	; 0x1068
 800fab4:	4413      	add	r3, r2
 800fab6:	69b9      	ldr	r1, [r7, #24]
 800fab8:	f241 0264 	movw	r2, #4196	; 0x1064
 800fabc:	440a      	add	r2, r1
 800fabe:	7af8      	ldrb	r0, [r7, #11]
 800fac0:	4619      	mov	r1, r3
 800fac2:	47a0      	blx	r4
 800fac4:	4603      	mov	r3, r0
 800fac6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800fac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800facc:	2b00      	cmp	r3, #0
 800face:	d106      	bne.n	800fade <SCSI_ReadCapacity16+0x5a>
 800fad0:	69ba      	ldr	r2, [r7, #24]
 800fad2:	f241 0362 	movw	r3, #4194	; 0x1062
 800fad6:	4413      	add	r3, r2
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	2b02      	cmp	r3, #2
 800fadc:	d108      	bne.n	800faf0 <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fade:	7af9      	ldrb	r1, [r7, #11]
 800fae0:	233a      	movs	r3, #58	; 0x3a
 800fae2:	2202      	movs	r2, #2
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	f000 f9e9 	bl	800febc <SCSI_SenseCode>
    return -1;
 800faea:	f04f 33ff 	mov.w	r3, #4294967295
 800faee:	e084      	b.n	800fbfa <SCSI_ReadCapacity16+0x176>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	330a      	adds	r3, #10
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	330b      	adds	r3, #11
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800fb00:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	330c      	adds	r3, #12
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800fb0a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	320d      	adds	r2, #13
 800fb10:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800fb12:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800fb14:	69bb      	ldr	r3, [r7, #24]
 800fb16:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800fb18:	2300      	movs	r3, #0
 800fb1a:	77fb      	strb	r3, [r7, #31]
 800fb1c:	e007      	b.n	800fb2e <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 800fb1e:	7ffb      	ldrb	r3, [r7, #31]
 800fb20:	69ba      	ldr	r2, [r7, #24]
 800fb22:	4413      	add	r3, r2
 800fb24:	2200      	movs	r2, #0
 800fb26:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800fb28:	7ffb      	ldrb	r3, [r7, #31]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	77fb      	strb	r3, [r7, #31]
 800fb2e:	7ffa      	ldrb	r2, [r7, #31]
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d3f2      	bcc.n	800fb1e <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800fb38:	69ba      	ldr	r2, [r7, #24]
 800fb3a:	f241 0368 	movw	r3, #4200	; 0x1068
 800fb3e:	4413      	add	r3, r2
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3b01      	subs	r3, #1
 800fb44:	0e1b      	lsrs	r3, r3, #24
 800fb46:	b2da      	uxtb	r2, r3
 800fb48:	69bb      	ldr	r3, [r7, #24]
 800fb4a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800fb4c:	69ba      	ldr	r2, [r7, #24]
 800fb4e:	f241 0368 	movw	r3, #4200	; 0x1068
 800fb52:	4413      	add	r3, r2
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	3b01      	subs	r3, #1
 800fb58:	0c1b      	lsrs	r3, r3, #16
 800fb5a:	b2da      	uxtb	r2, r3
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800fb60:	69ba      	ldr	r2, [r7, #24]
 800fb62:	f241 0368 	movw	r3, #4200	; 0x1068
 800fb66:	4413      	add	r3, r2
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	0a1b      	lsrs	r3, r3, #8
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800fb74:	69ba      	ldr	r2, [r7, #24]
 800fb76:	f241 0368 	movw	r3, #4200	; 0x1068
 800fb7a:	4413      	add	r3, r2
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	3b01      	subs	r3, #1
 800fb82:	b2da      	uxtb	r2, r3
 800fb84:	69bb      	ldr	r3, [r7, #24]
 800fb86:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800fb88:	69ba      	ldr	r2, [r7, #24]
 800fb8a:	f241 0364 	movw	r3, #4196	; 0x1064
 800fb8e:	4413      	add	r3, r2
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	161b      	asrs	r3, r3, #24
 800fb94:	b2da      	uxtb	r2, r3
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800fb9a:	69ba      	ldr	r2, [r7, #24]
 800fb9c:	f241 0364 	movw	r3, #4196	; 0x1064
 800fba0:	4413      	add	r3, r2
 800fba2:	881b      	ldrh	r3, [r3, #0]
 800fba4:	141b      	asrs	r3, r3, #16
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800fbac:	69ba      	ldr	r2, [r7, #24]
 800fbae:	f241 0364 	movw	r3, #4196	; 0x1064
 800fbb2:	4413      	add	r3, r2
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	0a1b      	lsrs	r3, r3, #8
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	b2da      	uxtb	r2, r3
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800fbc0:	69ba      	ldr	r2, [r7, #24]
 800fbc2:	f241 0364 	movw	r3, #4196	; 0x1064
 800fbc6:	4413      	add	r3, r2
 800fbc8:	881b      	ldrh	r3, [r3, #0]
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	330a      	adds	r3, #10
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	330b      	adds	r3, #11
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800fbe0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	330c      	adds	r3, #12
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800fbea:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	320d      	adds	r2, #13
 800fbf0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800fbf2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	60da      	str	r2, [r3, #12]

  return 0;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3724      	adds	r7, #36	; 0x24
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd90      	pop	{r4, r7, pc}

0800fc02 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b088      	sub	sp, #32
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	60f8      	str	r0, [r7, #12]
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	607a      	str	r2, [r7, #4]
 800fc0e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc16:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d102      	bne.n	800fc24 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800fc1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc22:	e05e      	b.n	800fce2 <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	f107 0214 	add.w	r2, r7, #20
 800fc30:	f107 0110 	add.w	r1, r7, #16
 800fc34:	7af8      	ldrb	r0, [r7, #11]
 800fc36:	4798      	blx	r3
 800fc38:	4603      	mov	r3, r0
 800fc3a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800fc3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d106      	bne.n	800fc52 <SCSI_ReadFormatCapacity+0x50>
 800fc44:	69ba      	ldr	r2, [r7, #24]
 800fc46:	f241 0362 	movw	r3, #4194	; 0x1062
 800fc4a:	4413      	add	r3, r2
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	d108      	bne.n	800fc64 <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fc52:	7af9      	ldrb	r1, [r7, #11]
 800fc54:	233a      	movs	r3, #58	; 0x3a
 800fc56:	2202      	movs	r2, #2
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f000 f92f 	bl	800febc <SCSI_SenseCode>
    return -1;
 800fc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc62:	e03e      	b.n	800fce2 <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 800fc64:	2300      	movs	r3, #0
 800fc66:	83fb      	strh	r3, [r7, #30]
 800fc68:	e007      	b.n	800fc7a <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 800fc6a:	8bfb      	ldrh	r3, [r7, #30]
 800fc6c:	69ba      	ldr	r2, [r7, #24]
 800fc6e:	4413      	add	r3, r2
 800fc70:	2200      	movs	r2, #0
 800fc72:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800fc74:	8bfb      	ldrh	r3, [r7, #30]
 800fc76:	3301      	adds	r3, #1
 800fc78:	83fb      	strh	r3, [r7, #30]
 800fc7a:	8bfb      	ldrh	r3, [r7, #30]
 800fc7c:	2b0b      	cmp	r3, #11
 800fc7e:	d9f4      	bls.n	800fc6a <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	2208      	movs	r2, #8
 800fc84:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	0e1b      	lsrs	r3, r3, #24
 800fc8c:	b2da      	uxtb	r2, r3
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	3b01      	subs	r3, #1
 800fc96:	0c1b      	lsrs	r3, r3, #16
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	3b01      	subs	r3, #1
 800fca2:	0a1b      	lsrs	r3, r3, #8
 800fca4:	b2da      	uxtb	r2, r3
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	3b01      	subs	r3, #1
 800fcb0:	b2da      	uxtb	r2, r3
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	2202      	movs	r2, #2
 800fcba:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800fcbc:	8abb      	ldrh	r3, [r7, #20]
 800fcbe:	141b      	asrs	r3, r3, #16
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800fcc6:	8abb      	ldrh	r3, [r7, #20]
 800fcc8:	0a1b      	lsrs	r3, r3, #8
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	b2da      	uxtb	r2, r3
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800fcd2:	8abb      	ldrh	r3, [r7, #20]
 800fcd4:	b2da      	uxtb	r2, r3
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	220c      	movs	r2, #12
 800fcde:	60da      	str	r2, [r3, #12]

  return 0;
 800fce0:	2300      	movs	r3, #0
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3720      	adds	r7, #32
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b086      	sub	sp, #24
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	607a      	str	r2, [r7, #4]
 800fcf8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd00:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800fd02:	2317      	movs	r3, #23
 800fd04:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d102      	bne.n	800fd12 <SCSI_ModeSense6+0x26>
  {
    return -1;
 800fd0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd10:	e011      	b.n	800fd36 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	3304      	adds	r3, #4
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	8afa      	ldrh	r2, [r7, #22]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d303      	bcc.n	800fd28 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	3304      	adds	r3, #4
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800fd28:	8afb      	ldrh	r3, [r7, #22]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	4904      	ldr	r1, [pc, #16]	; (800fd40 <SCSI_ModeSense6+0x54>)
 800fd2e:	6938      	ldr	r0, [r7, #16]
 800fd30:	f000 fe8d 	bl	8010a4e <SCSI_UpdateBotData>

  return 0;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	24000154 	.word	0x24000154

0800fd44 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	607a      	str	r2, [r7, #4]
 800fd50:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd58:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800fd5a:	231b      	movs	r3, #27
 800fd5c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d102      	bne.n	800fd6a <SCSI_ModeSense10+0x26>
  {
    return -1;
 800fd64:	f04f 33ff 	mov.w	r3, #4294967295
 800fd68:	e011      	b.n	800fd8e <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	3308      	adds	r3, #8
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	8afa      	ldrh	r2, [r7, #22]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d303      	bcc.n	800fd80 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	3308      	adds	r3, #8
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800fd80:	8afb      	ldrh	r3, [r7, #22]
 800fd82:	461a      	mov	r2, r3
 800fd84:	4904      	ldr	r1, [pc, #16]	; (800fd98 <SCSI_ModeSense10+0x54>)
 800fd86:	6938      	ldr	r0, [r7, #16]
 800fd88:	f000 fe61 	bl	8010a4e <SCSI_UpdateBotData>

  return 0;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3718      	adds	r7, #24
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	bf00      	nop
 800fd98:	2400016c 	.word	0x2400016c

0800fd9c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	460b      	mov	r3, r1
 800fda6:	607a      	str	r2, [r7, #4]
 800fda8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdb0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d102      	bne.n	800fdbe <SCSI_RequestSense+0x22>
  {
    return -1;
 800fdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdbc:	e07a      	b.n	800feb4 <SCSI_RequestSense+0x118>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	f241 0318 	movw	r3, #4120	; 0x1018
 800fdc4:	4413      	add	r3, r2
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d10c      	bne.n	800fde6 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	f241 031d 	movw	r3, #4125	; 0x101d
 800fdd2:	4413      	add	r3, r2
 800fdd4:	7819      	ldrb	r1, [r3, #0]
 800fdd6:	2320      	movs	r3, #32
 800fdd8:	2205      	movs	r2, #5
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f000 f86e 	bl	800febc <SCSI_SenseCode>
    return -1;
 800fde0:	f04f 33ff 	mov.w	r3, #4294967295
 800fde4:	e066      	b.n	800feb4 <SCSI_RequestSense+0x118>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800fde6:	2300      	movs	r3, #0
 800fde8:	75fb      	strb	r3, [r7, #23]
 800fdea:	e007      	b.n	800fdfc <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800fdec:	7dfb      	ldrb	r3, [r7, #23]
 800fdee:	693a      	ldr	r2, [r7, #16]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800fdf6:	7dfb      	ldrb	r3, [r7, #23]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	75fb      	strb	r3, [r7, #23]
 800fdfc:	7dfb      	ldrb	r3, [r7, #23]
 800fdfe:	2b11      	cmp	r3, #17
 800fe00:	d9f4      	bls.n	800fdec <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	2270      	movs	r2, #112	; 0x70
 800fe06:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	220c      	movs	r2, #12
 800fe0c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800fe14:	781a      	ldrb	r2, [r3, #0]
 800fe16:	6939      	ldr	r1, [r7, #16]
 800fe18:	f241 0361 	movw	r3, #4193	; 0x1061
 800fe1c:	440b      	add	r3, r1
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d038      	beq.n	800fe96 <SCSI_RequestSense+0xfa>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800fe34:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fe4a:	00db      	lsls	r3, r3, #3
 800fe4c:	4413      	add	r3, r2
 800fe4e:	791a      	ldrb	r2, [r3, #4]
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	693a      	ldr	r2, [r7, #16]
 800fe5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fe62:	00db      	lsls	r3, r3, #3
 800fe64:	4413      	add	r3, r2
 800fe66:	795a      	ldrb	r2, [r3, #5]
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	3301      	adds	r3, #1
 800fe76:	b2da      	uxtb	r2, r3
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800fe7e:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	2b04      	cmp	r3, #4
 800fe8a:	d104      	bne.n	800fe96 <SCSI_RequestSense+0xfa>
    {
      hmsc->scsi_sense_head = 0U;
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800fe92:	2200      	movs	r2, #0
 800fe94:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	2212      	movs	r2, #18
 800fe9a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	3304      	adds	r3, #4
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	2b12      	cmp	r3, #18
 800fea4:	d805      	bhi.n	800feb2 <SCSI_RequestSense+0x116>
  {
    hmsc->bot_data_length = params[4];
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	3304      	adds	r3, #4
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	461a      	mov	r2, r3
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3718      	adds	r7, #24
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	4608      	mov	r0, r1
 800fec6:	4611      	mov	r1, r2
 800fec8:	461a      	mov	r2, r3
 800feca:	4603      	mov	r3, r0
 800fecc:	70fb      	strb	r3, [r7, #3]
 800fece:	460b      	mov	r3, r1
 800fed0:	70bb      	strb	r3, [r7, #2]
 800fed2:	4613      	mov	r3, r2
 800fed4:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fedc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d03e      	beq.n	800ff62 <SCSI_SenseCode+0xa6>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	f241 0361 	movw	r3, #4193	; 0x1061
 800feea:	4413      	add	r3, r2
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	461a      	mov	r2, r3
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800fef6:	78b9      	ldrb	r1, [r7, #2]
 800fef8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800fefc:	68fa      	ldr	r2, [r7, #12]
 800fefe:	f241 0361 	movw	r3, #4193	; 0x1061
 800ff02:	4413      	add	r3, r2
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ff0c:	00db      	lsls	r3, r3, #3
 800ff0e:	4413      	add	r3, r2
 800ff10:	787a      	ldrb	r2, [r7, #1]
 800ff12:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	f241 0361 	movw	r3, #4193	; 0x1061
 800ff1a:	4413      	add	r3, r2
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	68fa      	ldr	r2, [r7, #12]
 800ff20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ff24:	00db      	lsls	r3, r3, #3
 800ff26:	4413      	add	r3, r2
 800ff28:	2200      	movs	r2, #0
 800ff2a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	f241 0361 	movw	r3, #4193	; 0x1061
 800ff32:	4413      	add	r3, r2
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	3301      	adds	r3, #1
 800ff38:	b2d9      	uxtb	r1, r3
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	f241 0361 	movw	r3, #4193	; 0x1061
 800ff40:	4413      	add	r3, r2
 800ff42:	460a      	mov	r2, r1
 800ff44:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ff46:	68fa      	ldr	r2, [r7, #12]
 800ff48:	f241 0361 	movw	r3, #4193	; 0x1061
 800ff4c:	4413      	add	r3, r2
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	2b04      	cmp	r3, #4
 800ff52:	d107      	bne.n	800ff64 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	f241 0361 	movw	r3, #4193	; 0x1061
 800ff5a:	4413      	add	r3, r2
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	701a      	strb	r2, [r3, #0]
 800ff60:	e000      	b.n	800ff64 <SCSI_SenseCode+0xa8>
    return;
 800ff62:	bf00      	nop
  }
}
 800ff64:	3714      	adds	r7, #20
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr

0800ff6e <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b086      	sub	sp, #24
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	60f8      	str	r0, [r7, #12]
 800ff76:	460b      	mov	r3, r1
 800ff78:	607a      	str	r2, [r7, #4]
 800ff7a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff82:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d102      	bne.n	800ff90 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800ff8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8e:	e043      	b.n	8010018 <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800ff90:	697a      	ldr	r2, [r7, #20]
 800ff92:	f241 0362 	movw	r3, #4194	; 0x1062
 800ff96:	4413      	add	r3, r2
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d10f      	bne.n	800ffbe <SCSI_StartStopUnit+0x50>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	f003 0303 	and.w	r3, r3, #3
 800ffa8:	2b02      	cmp	r3, #2
 800ffaa:	d108      	bne.n	800ffbe <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ffac:	7af9      	ldrb	r1, [r7, #11]
 800ffae:	2324      	movs	r3, #36	; 0x24
 800ffb0:	2205      	movs	r2, #5
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f7ff ff82 	bl	800febc <SCSI_SenseCode>

    return -1;
 800ffb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffbc:	e02c      	b.n	8010018 <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	f003 0303 	and.w	r3, r3, #3
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d106      	bne.n	800ffda <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ffcc:	697a      	ldr	r2, [r7, #20]
 800ffce:	f241 0362 	movw	r3, #4194	; 0x1062
 800ffd2:	4413      	add	r3, r2
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	701a      	strb	r2, [r3, #0]
 800ffd8:	e01a      	b.n	8010010 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	3304      	adds	r3, #4
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	f003 0303 	and.w	r3, r3, #3
 800ffe4:	2b02      	cmp	r3, #2
 800ffe6:	d106      	bne.n	800fff6 <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ffe8:	697a      	ldr	r2, [r7, #20]
 800ffea:	f241 0362 	movw	r3, #4194	; 0x1062
 800ffee:	4413      	add	r3, r2
 800fff0:	2202      	movs	r2, #2
 800fff2:	701a      	strb	r2, [r3, #0]
 800fff4:	e00c      	b.n	8010010 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	3304      	adds	r3, #4
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	f003 0303 	and.w	r3, r3, #3
 8010000:	2b03      	cmp	r3, #3
 8010002:	d105      	bne.n	8010010 <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	f241 0362 	movw	r3, #4194	; 0x1062
 801000a:	4413      	add	r3, r2
 801000c:	2200      	movs	r2, #0
 801000e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	2200      	movs	r2, #0
 8010014:	60da      	str	r2, [r3, #12]

  return 0;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3718      	adds	r7, #24
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010020:	b480      	push	{r7}
 8010022:	b087      	sub	sp, #28
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	460b      	mov	r3, r1
 801002a:	607a      	str	r2, [r7, #4]
 801002c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010034:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d102      	bne.n	8010042 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801003c:	f04f 33ff 	mov.w	r3, #4294967295
 8010040:	e015      	b.n	801006e <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	3304      	adds	r3, #4
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d106      	bne.n	801005a <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801004c:	697a      	ldr	r2, [r7, #20]
 801004e:	f241 0362 	movw	r3, #4194	; 0x1062
 8010052:	4413      	add	r3, r2
 8010054:	2200      	movs	r2, #0
 8010056:	701a      	strb	r2, [r3, #0]
 8010058:	e005      	b.n	8010066 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801005a:	697a      	ldr	r2, [r7, #20]
 801005c:	f241 0362 	movw	r3, #4194	; 0x1062
 8010060:	4413      	add	r3, r2
 8010062:	2201      	movs	r2, #1
 8010064:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	2200      	movs	r2, #0
 801006a:	60da      	str	r2, [r3, #12]

  return 0;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	371c      	adds	r7, #28
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801007a:	b580      	push	{r7, lr}
 801007c:	b086      	sub	sp, #24
 801007e:	af00      	add	r7, sp, #0
 8010080:	60f8      	str	r0, [r7, #12]
 8010082:	460b      	mov	r3, r1
 8010084:	607a      	str	r2, [r7, #4]
 8010086:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801008e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d102      	bne.n	801009c <SCSI_Read10+0x22>
  {
    return -1;
 8010096:	f04f 33ff 	mov.w	r3, #4294967295
 801009a:	e0a2      	b.n	80101e2 <SCSI_Read10+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	7a1b      	ldrb	r3, [r3, #8]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	f040 8094 	bne.w	80101ce <SCSI_Read10+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	f241 031c 	movw	r3, #4124	; 0x101c
 80100ac:	4413      	add	r3, r2
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	b25b      	sxtb	r3, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	db0c      	blt.n	80100d0 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80100b6:	697a      	ldr	r2, [r7, #20]
 80100b8:	f241 031d 	movw	r3, #4125	; 0x101d
 80100bc:	4413      	add	r3, r2
 80100be:	7819      	ldrb	r1, [r3, #0]
 80100c0:	2320      	movs	r3, #32
 80100c2:	2205      	movs	r2, #5
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f7ff fef9 	bl	800febc <SCSI_SenseCode>
      return -1;
 80100ca:	f04f 33ff 	mov.w	r3, #4294967295
 80100ce:	e088      	b.n	80101e2 <SCSI_Read10+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80100d0:	697a      	ldr	r2, [r7, #20]
 80100d2:	f241 0362 	movw	r3, #4194	; 0x1062
 80100d6:	4413      	add	r3, r2
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d108      	bne.n	80100f0 <SCSI_Read10+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80100de:	7af9      	ldrb	r1, [r7, #11]
 80100e0:	233a      	movs	r3, #58	; 0x3a
 80100e2:	2202      	movs	r2, #2
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f7ff fee9 	bl	800febc <SCSI_SenseCode>

      return -1;
 80100ea:	f04f 33ff 	mov.w	r3, #4294967295
 80100ee:	e078      	b.n	80101e2 <SCSI_Read10+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100f6:	689b      	ldr	r3, [r3, #8]
 80100f8:	7afa      	ldrb	r2, [r7, #11]
 80100fa:	4610      	mov	r0, r2
 80100fc:	4798      	blx	r3
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d008      	beq.n	8010116 <SCSI_Read10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010104:	7af9      	ldrb	r1, [r7, #11]
 8010106:	233a      	movs	r3, #58	; 0x3a
 8010108:	2202      	movs	r2, #2
 801010a:	68f8      	ldr	r0, [r7, #12]
 801010c:	f7ff fed6 	bl	800febc <SCSI_SenseCode>
      return -1;
 8010110:	f04f 33ff 	mov.w	r3, #4294967295
 8010114:	e065      	b.n	80101e2 <SCSI_Read10+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	3302      	adds	r3, #2
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3303      	adds	r3, #3
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010126:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	3304      	adds	r3, #4
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010130:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010132:	687a      	ldr	r2, [r7, #4]
 8010134:	3205      	adds	r2, #5
 8010136:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8010138:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801013a:	6979      	ldr	r1, [r7, #20]
 801013c:	f241 036c 	movw	r3, #4204	; 0x106c
 8010140:	440b      	add	r3, r1
 8010142:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	3307      	adds	r3, #7
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	021b      	lsls	r3, r3, #8
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	3208      	adds	r2, #8
 8010150:	7812      	ldrb	r2, [r2, #0]
 8010152:	431a      	orrs	r2, r3
 8010154:	6979      	ldr	r1, [r7, #20]
 8010156:	f241 0370 	movw	r3, #4208	; 0x1070
 801015a:	440b      	add	r3, r1
 801015c:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801015e:	697a      	ldr	r2, [r7, #20]
 8010160:	f241 036c 	movw	r3, #4204	; 0x106c
 8010164:	4413      	add	r3, r2
 8010166:	6818      	ldr	r0, [r3, #0]
 8010168:	697a      	ldr	r2, [r7, #20]
 801016a:	f241 0370 	movw	r3, #4208	; 0x1070
 801016e:	4413      	add	r3, r2
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	7af9      	ldrb	r1, [r7, #11]
 8010174:	4602      	mov	r2, r0
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f000 fb03 	bl	8010782 <SCSI_CheckAddressRange>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	da02      	bge.n	8010188 <SCSI_Read10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010182:	f04f 33ff 	mov.w	r3, #4294967295
 8010186:	e02c      	b.n	80101e2 <SCSI_Read10+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8010188:	697a      	ldr	r2, [r7, #20]
 801018a:	f241 0318 	movw	r3, #4120	; 0x1018
 801018e:	4413      	add	r3, r2
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	6979      	ldr	r1, [r7, #20]
 8010194:	f241 0370 	movw	r3, #4208	; 0x1070
 8010198:	440b      	add	r3, r1
 801019a:	6819      	ldr	r1, [r3, #0]
 801019c:	6978      	ldr	r0, [r7, #20]
 801019e:	f241 0364 	movw	r3, #4196	; 0x1064
 80101a2:	4403      	add	r3, r0
 80101a4:	881b      	ldrh	r3, [r3, #0]
 80101a6:	fb03 f301 	mul.w	r3, r3, r1
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d00c      	beq.n	80101c8 <SCSI_Read10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80101ae:	697a      	ldr	r2, [r7, #20]
 80101b0:	f241 031d 	movw	r3, #4125	; 0x101d
 80101b4:	4413      	add	r3, r2
 80101b6:	7819      	ldrb	r1, [r3, #0]
 80101b8:	2320      	movs	r3, #32
 80101ba:	2205      	movs	r2, #5
 80101bc:	68f8      	ldr	r0, [r7, #12]
 80101be:	f7ff fe7d 	bl	800febc <SCSI_SenseCode>
      return -1;
 80101c2:	f04f 33ff 	mov.w	r3, #4294967295
 80101c6:	e00c      	b.n	80101e2 <SCSI_Read10+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	2202      	movs	r2, #2
 80101cc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101d4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80101d6:	7afb      	ldrb	r3, [r7, #11]
 80101d8:	4619      	mov	r1, r3
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f000 fafb 	bl	80107d6 <SCSI_ProcessRead>
 80101e0:	4603      	mov	r3, r0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3718      	adds	r7, #24
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b086      	sub	sp, #24
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	60f8      	str	r0, [r7, #12]
 80101f2:	460b      	mov	r3, r1
 80101f4:	607a      	str	r2, [r7, #4]
 80101f6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101fe:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d102      	bne.n	801020c <SCSI_Read12+0x22>
  {
    return -1;
 8010206:	f04f 33ff 	mov.w	r3, #4294967295
 801020a:	e0ac      	b.n	8010366 <SCSI_Read12+0x17c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	7a1b      	ldrb	r3, [r3, #8]
 8010210:	2b00      	cmp	r3, #0
 8010212:	f040 809e 	bne.w	8010352 <SCSI_Read12+0x168>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8010216:	697a      	ldr	r2, [r7, #20]
 8010218:	f241 031c 	movw	r3, #4124	; 0x101c
 801021c:	4413      	add	r3, r2
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	b25b      	sxtb	r3, r3
 8010222:	2b00      	cmp	r3, #0
 8010224:	db0c      	blt.n	8010240 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010226:	697a      	ldr	r2, [r7, #20]
 8010228:	f241 031d 	movw	r3, #4125	; 0x101d
 801022c:	4413      	add	r3, r2
 801022e:	7819      	ldrb	r1, [r3, #0]
 8010230:	2320      	movs	r3, #32
 8010232:	2205      	movs	r2, #5
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f7ff fe41 	bl	800febc <SCSI_SenseCode>
      return -1;
 801023a:	f04f 33ff 	mov.w	r3, #4294967295
 801023e:	e092      	b.n	8010366 <SCSI_Read12+0x17c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010240:	697a      	ldr	r2, [r7, #20]
 8010242:	f241 0362 	movw	r3, #4194	; 0x1062
 8010246:	4413      	add	r3, r2
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b02      	cmp	r3, #2
 801024c:	d108      	bne.n	8010260 <SCSI_Read12+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801024e:	7af9      	ldrb	r1, [r7, #11]
 8010250:	233a      	movs	r3, #58	; 0x3a
 8010252:	2202      	movs	r2, #2
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	f7ff fe31 	bl	800febc <SCSI_SenseCode>
      return -1;
 801025a:	f04f 33ff 	mov.w	r3, #4294967295
 801025e:	e082      	b.n	8010366 <SCSI_Read12+0x17c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010266:	689b      	ldr	r3, [r3, #8]
 8010268:	7afa      	ldrb	r2, [r7, #11]
 801026a:	4610      	mov	r0, r2
 801026c:	4798      	blx	r3
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	d008      	beq.n	8010286 <SCSI_Read12+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010274:	7af9      	ldrb	r1, [r7, #11]
 8010276:	233a      	movs	r3, #58	; 0x3a
 8010278:	2202      	movs	r2, #2
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f7ff fe1e 	bl	800febc <SCSI_SenseCode>
      return -1;
 8010280:	f04f 33ff 	mov.w	r3, #4294967295
 8010284:	e06f      	b.n	8010366 <SCSI_Read12+0x17c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	3302      	adds	r3, #2
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	3303      	adds	r3, #3
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010296:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	3304      	adds	r3, #4
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80102a0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	3205      	adds	r2, #5
 80102a6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80102a8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80102aa:	6979      	ldr	r1, [r7, #20]
 80102ac:	f241 036c 	movw	r3, #4204	; 0x106c
 80102b0:	440b      	add	r3, r1
 80102b2:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	3306      	adds	r3, #6
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	3307      	adds	r3, #7
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80102c4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	3308      	adds	r3, #8
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80102ce:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	3209      	adds	r2, #9
 80102d4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80102d6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80102d8:	6979      	ldr	r1, [r7, #20]
 80102da:	f241 0370 	movw	r3, #4208	; 0x1070
 80102de:	440b      	add	r3, r1
 80102e0:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80102e2:	697a      	ldr	r2, [r7, #20]
 80102e4:	f241 036c 	movw	r3, #4204	; 0x106c
 80102e8:	4413      	add	r3, r2
 80102ea:	6818      	ldr	r0, [r3, #0]
 80102ec:	697a      	ldr	r2, [r7, #20]
 80102ee:	f241 0370 	movw	r3, #4208	; 0x1070
 80102f2:	4413      	add	r3, r2
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	7af9      	ldrb	r1, [r7, #11]
 80102f8:	4602      	mov	r2, r0
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	f000 fa41 	bl	8010782 <SCSI_CheckAddressRange>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	da02      	bge.n	801030c <SCSI_Read12+0x122>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010306:	f04f 33ff 	mov.w	r3, #4294967295
 801030a:	e02c      	b.n	8010366 <SCSI_Read12+0x17c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	f241 0318 	movw	r3, #4120	; 0x1018
 8010312:	4413      	add	r3, r2
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	6979      	ldr	r1, [r7, #20]
 8010318:	f241 0370 	movw	r3, #4208	; 0x1070
 801031c:	440b      	add	r3, r1
 801031e:	6819      	ldr	r1, [r3, #0]
 8010320:	6978      	ldr	r0, [r7, #20]
 8010322:	f241 0364 	movw	r3, #4196	; 0x1064
 8010326:	4403      	add	r3, r0
 8010328:	881b      	ldrh	r3, [r3, #0]
 801032a:	fb03 f301 	mul.w	r3, r3, r1
 801032e:	429a      	cmp	r2, r3
 8010330:	d00c      	beq.n	801034c <SCSI_Read12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010332:	697a      	ldr	r2, [r7, #20]
 8010334:	f241 031d 	movw	r3, #4125	; 0x101d
 8010338:	4413      	add	r3, r2
 801033a:	7819      	ldrb	r1, [r3, #0]
 801033c:	2320      	movs	r3, #32
 801033e:	2205      	movs	r2, #5
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f7ff fdbb 	bl	800febc <SCSI_SenseCode>
      return -1;
 8010346:	f04f 33ff 	mov.w	r3, #4294967295
 801034a:	e00c      	b.n	8010366 <SCSI_Read12+0x17c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	2202      	movs	r2, #2
 8010350:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010358:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801035a:	7afb      	ldrb	r3, [r7, #11]
 801035c:	4619      	mov	r1, r3
 801035e:	68f8      	ldr	r0, [r7, #12]
 8010360:	f000 fa39 	bl	80107d6 <SCSI_ProcessRead>
 8010364:	4603      	mov	r3, r0
}
 8010366:	4618      	mov	r0, r3
 8010368:	3718      	adds	r7, #24
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b086      	sub	sp, #24
 8010372:	af00      	add	r7, sp, #0
 8010374:	60f8      	str	r0, [r7, #12]
 8010376:	460b      	mov	r3, r1
 8010378:	607a      	str	r2, [r7, #4]
 801037a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010382:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d102      	bne.n	8010390 <SCSI_Write10+0x22>
  {
    return -1;
 801038a:	f04f 33ff 	mov.w	r3, #4294967295
 801038e:	e0c8      	b.n	8010522 <SCSI_Write10+0x1b4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	7a1b      	ldrb	r3, [r3, #8]
 8010394:	2b00      	cmp	r3, #0
 8010396:	f040 80be 	bne.w	8010516 <SCSI_Write10+0x1a8>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801039a:	697a      	ldr	r2, [r7, #20]
 801039c:	f241 0318 	movw	r3, #4120	; 0x1018
 80103a0:	4413      	add	r3, r2
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10c      	bne.n	80103c2 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80103a8:	697a      	ldr	r2, [r7, #20]
 80103aa:	f241 031d 	movw	r3, #4125	; 0x101d
 80103ae:	4413      	add	r3, r2
 80103b0:	7819      	ldrb	r1, [r3, #0]
 80103b2:	2320      	movs	r3, #32
 80103b4:	2205      	movs	r2, #5
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f7ff fd80 	bl	800febc <SCSI_SenseCode>
      return -1;
 80103bc:	f04f 33ff 	mov.w	r3, #4294967295
 80103c0:	e0af      	b.n	8010522 <SCSI_Write10+0x1b4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	f241 031c 	movw	r3, #4124	; 0x101c
 80103c8:	4413      	add	r3, r2
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	b25b      	sxtb	r3, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	da0c      	bge.n	80103ec <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80103d2:	697a      	ldr	r2, [r7, #20]
 80103d4:	f241 031d 	movw	r3, #4125	; 0x101d
 80103d8:	4413      	add	r3, r2
 80103da:	7819      	ldrb	r1, [r3, #0]
 80103dc:	2320      	movs	r3, #32
 80103de:	2205      	movs	r2, #5
 80103e0:	68f8      	ldr	r0, [r7, #12]
 80103e2:	f7ff fd6b 	bl	800febc <SCSI_SenseCode>
      return -1;
 80103e6:	f04f 33ff 	mov.w	r3, #4294967295
 80103ea:	e09a      	b.n	8010522 <SCSI_Write10+0x1b4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	7afa      	ldrb	r2, [r7, #11]
 80103f6:	4610      	mov	r0, r2
 80103f8:	4798      	blx	r3
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d008      	beq.n	8010412 <SCSI_Write10+0xa4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010400:	7af9      	ldrb	r1, [r7, #11]
 8010402:	233a      	movs	r3, #58	; 0x3a
 8010404:	2202      	movs	r2, #2
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	f7ff fd58 	bl	800febc <SCSI_SenseCode>
      return -1;
 801040c:	f04f 33ff 	mov.w	r3, #4294967295
 8010410:	e087      	b.n	8010522 <SCSI_Write10+0x1b4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	7afa      	ldrb	r2, [r7, #11]
 801041c:	4610      	mov	r0, r2
 801041e:	4798      	blx	r3
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d008      	beq.n	8010438 <SCSI_Write10+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010426:	7af9      	ldrb	r1, [r7, #11]
 8010428:	2327      	movs	r3, #39	; 0x27
 801042a:	2202      	movs	r2, #2
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	f7ff fd45 	bl	800febc <SCSI_SenseCode>
      return -1;
 8010432:	f04f 33ff 	mov.w	r3, #4294967295
 8010436:	e074      	b.n	8010522 <SCSI_Write10+0x1b4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	3302      	adds	r3, #2
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	3303      	adds	r3, #3
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010448:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	3304      	adds	r3, #4
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010452:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	3205      	adds	r2, #5
 8010458:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801045a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801045c:	6979      	ldr	r1, [r7, #20]
 801045e:	f241 036c 	movw	r3, #4204	; 0x106c
 8010462:	440b      	add	r3, r1
 8010464:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	3307      	adds	r3, #7
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	3208      	adds	r2, #8
 8010472:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010474:	431a      	orrs	r2, r3
 8010476:	6979      	ldr	r1, [r7, #20]
 8010478:	f241 0370 	movw	r3, #4208	; 0x1070
 801047c:	440b      	add	r3, r1
 801047e:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010480:	697a      	ldr	r2, [r7, #20]
 8010482:	f241 036c 	movw	r3, #4204	; 0x106c
 8010486:	4413      	add	r3, r2
 8010488:	6818      	ldr	r0, [r3, #0]
 801048a:	697a      	ldr	r2, [r7, #20]
 801048c:	f241 0370 	movw	r3, #4208	; 0x1070
 8010490:	4413      	add	r3, r2
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	7af9      	ldrb	r1, [r7, #11]
 8010496:	4602      	mov	r2, r0
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f000 f972 	bl	8010782 <SCSI_CheckAddressRange>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	da02      	bge.n	80104aa <SCSI_Write10+0x13c>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80104a4:	f04f 33ff 	mov.w	r3, #4294967295
 80104a8:	e03b      	b.n	8010522 <SCSI_Write10+0x1b4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80104aa:	697a      	ldr	r2, [r7, #20]
 80104ac:	f241 0370 	movw	r3, #4208	; 0x1070
 80104b0:	4413      	add	r3, r2
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	6979      	ldr	r1, [r7, #20]
 80104b6:	f241 0364 	movw	r3, #4196	; 0x1064
 80104ba:	440b      	add	r3, r1
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	fb03 f302 	mul.w	r3, r3, r2
 80104c2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80104c4:	697a      	ldr	r2, [r7, #20]
 80104c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80104ca:	4413      	add	r3, r2
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	693a      	ldr	r2, [r7, #16]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d00c      	beq.n	80104ee <SCSI_Write10+0x180>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80104d4:	697a      	ldr	r2, [r7, #20]
 80104d6:	f241 031d 	movw	r3, #4125	; 0x101d
 80104da:	4413      	add	r3, r2
 80104dc:	7819      	ldrb	r1, [r3, #0]
 80104de:	2320      	movs	r3, #32
 80104e0:	2205      	movs	r2, #5
 80104e2:	68f8      	ldr	r0, [r7, #12]
 80104e4:	f7ff fcea 	bl	800febc <SCSI_SenseCode>
      return -1;
 80104e8:	f04f 33ff 	mov.w	r3, #4294967295
 80104ec:	e019      	b.n	8010522 <SCSI_Write10+0x1b4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104f4:	bf28      	it	cs
 80104f6:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80104fa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	2201      	movs	r2, #1
 8010500:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	f103 0210 	add.w	r2, r3, #16
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	2101      	movs	r1, #1
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f002 f878 	bl	8012602 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010512:	2300      	movs	r3, #0
 8010514:	e005      	b.n	8010522 <SCSI_Write10+0x1b4>
    return SCSI_ProcessWrite(pdev, lun);
 8010516:	7afb      	ldrb	r3, [r7, #11]
 8010518:	4619      	mov	r1, r3
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f000 f9ef 	bl	80108fe <SCSI_ProcessWrite>
 8010520:	4603      	mov	r3, r0
}
 8010522:	4618      	mov	r0, r3
 8010524:	3718      	adds	r7, #24
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}

0801052a <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801052a:	b580      	push	{r7, lr}
 801052c:	b086      	sub	sp, #24
 801052e:	af00      	add	r7, sp, #0
 8010530:	60f8      	str	r0, [r7, #12]
 8010532:	460b      	mov	r3, r1
 8010534:	607a      	str	r2, [r7, #4]
 8010536:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801053e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d102      	bne.n	801054c <SCSI_Write12+0x22>
  {
    return -1;
 8010546:	f04f 33ff 	mov.w	r3, #4294967295
 801054a:	e0d8      	b.n	80106fe <SCSI_Write12+0x1d4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	7a1b      	ldrb	r3, [r3, #8]
 8010550:	2b00      	cmp	r3, #0
 8010552:	f040 80ce 	bne.w	80106f2 <SCSI_Write12+0x1c8>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010556:	697a      	ldr	r2, [r7, #20]
 8010558:	f241 0318 	movw	r3, #4120	; 0x1018
 801055c:	4413      	add	r3, r2
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d10c      	bne.n	801057e <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010564:	697a      	ldr	r2, [r7, #20]
 8010566:	f241 031d 	movw	r3, #4125	; 0x101d
 801056a:	4413      	add	r3, r2
 801056c:	7819      	ldrb	r1, [r3, #0]
 801056e:	2320      	movs	r3, #32
 8010570:	2205      	movs	r2, #5
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f7ff fca2 	bl	800febc <SCSI_SenseCode>
      return -1;
 8010578:	f04f 33ff 	mov.w	r3, #4294967295
 801057c:	e0bf      	b.n	80106fe <SCSI_Write12+0x1d4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801057e:	697a      	ldr	r2, [r7, #20]
 8010580:	f241 031c 	movw	r3, #4124	; 0x101c
 8010584:	4413      	add	r3, r2
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	b25b      	sxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	da0c      	bge.n	80105a8 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801058e:	697a      	ldr	r2, [r7, #20]
 8010590:	f241 031d 	movw	r3, #4125	; 0x101d
 8010594:	4413      	add	r3, r2
 8010596:	7819      	ldrb	r1, [r3, #0]
 8010598:	2320      	movs	r3, #32
 801059a:	2205      	movs	r2, #5
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	f7ff fc8d 	bl	800febc <SCSI_SenseCode>
      return -1;
 80105a2:	f04f 33ff 	mov.w	r3, #4294967295
 80105a6:	e0aa      	b.n	80106fe <SCSI_Write12+0x1d4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	7afa      	ldrb	r2, [r7, #11]
 80105b2:	4610      	mov	r0, r2
 80105b4:	4798      	blx	r3
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00b      	beq.n	80105d4 <SCSI_Write12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80105bc:	7af9      	ldrb	r1, [r7, #11]
 80105be:	233a      	movs	r3, #58	; 0x3a
 80105c0:	2202      	movs	r2, #2
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7ff fc7a 	bl	800febc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	2205      	movs	r2, #5
 80105cc:	721a      	strb	r2, [r3, #8]
      return -1;
 80105ce:	f04f 33ff 	mov.w	r3, #4294967295
 80105d2:	e094      	b.n	80106fe <SCSI_Write12+0x1d4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	7afa      	ldrb	r2, [r7, #11]
 80105de:	4610      	mov	r0, r2
 80105e0:	4798      	blx	r3
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00b      	beq.n	8010600 <SCSI_Write12+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80105e8:	7af9      	ldrb	r1, [r7, #11]
 80105ea:	2327      	movs	r3, #39	; 0x27
 80105ec:	2202      	movs	r2, #2
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f7ff fc64 	bl	800febc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	2205      	movs	r2, #5
 80105f8:	721a      	strb	r2, [r3, #8]
      return -1;
 80105fa:	f04f 33ff 	mov.w	r3, #4294967295
 80105fe:	e07e      	b.n	80106fe <SCSI_Write12+0x1d4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	3302      	adds	r3, #2
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	3303      	adds	r3, #3
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010610:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	3304      	adds	r3, #4
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801061a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	3205      	adds	r2, #5
 8010620:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010622:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010624:	6979      	ldr	r1, [r7, #20]
 8010626:	f241 036c 	movw	r3, #4204	; 0x106c
 801062a:	440b      	add	r3, r1
 801062c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	3306      	adds	r3, #6
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	3307      	adds	r3, #7
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801063e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	3308      	adds	r3, #8
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8010648:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	3209      	adds	r2, #9
 801064e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010650:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010652:	6979      	ldr	r1, [r7, #20]
 8010654:	f241 0370 	movw	r3, #4208	; 0x1070
 8010658:	440b      	add	r3, r1
 801065a:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801065c:	697a      	ldr	r2, [r7, #20]
 801065e:	f241 036c 	movw	r3, #4204	; 0x106c
 8010662:	4413      	add	r3, r2
 8010664:	6818      	ldr	r0, [r3, #0]
 8010666:	697a      	ldr	r2, [r7, #20]
 8010668:	f241 0370 	movw	r3, #4208	; 0x1070
 801066c:	4413      	add	r3, r2
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	7af9      	ldrb	r1, [r7, #11]
 8010672:	4602      	mov	r2, r0
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f000 f884 	bl	8010782 <SCSI_CheckAddressRange>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	da02      	bge.n	8010686 <SCSI_Write12+0x15c>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010680:	f04f 33ff 	mov.w	r3, #4294967295
 8010684:	e03b      	b.n	80106fe <SCSI_Write12+0x1d4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	f241 0370 	movw	r3, #4208	; 0x1070
 801068c:	4413      	add	r3, r2
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	6979      	ldr	r1, [r7, #20]
 8010692:	f241 0364 	movw	r3, #4196	; 0x1064
 8010696:	440b      	add	r3, r1
 8010698:	881b      	ldrh	r3, [r3, #0]
 801069a:	fb03 f302 	mul.w	r3, r3, r2
 801069e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80106a0:	697a      	ldr	r2, [r7, #20]
 80106a2:	f241 0318 	movw	r3, #4120	; 0x1018
 80106a6:	4413      	add	r3, r2
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	693a      	ldr	r2, [r7, #16]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d00c      	beq.n	80106ca <SCSI_Write12+0x1a0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80106b0:	697a      	ldr	r2, [r7, #20]
 80106b2:	f241 031d 	movw	r3, #4125	; 0x101d
 80106b6:	4413      	add	r3, r2
 80106b8:	7819      	ldrb	r1, [r3, #0]
 80106ba:	2320      	movs	r3, #32
 80106bc:	2205      	movs	r2, #5
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f7ff fbfc 	bl	800febc <SCSI_SenseCode>
      return -1;
 80106c4:	f04f 33ff 	mov.w	r3, #4294967295
 80106c8:	e019      	b.n	80106fe <SCSI_Write12+0x1d4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106d0:	bf28      	it	cs
 80106d2:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80106d6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	2201      	movs	r2, #1
 80106dc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f103 0210 	add.w	r2, r3, #16
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	2101      	movs	r1, #1
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f001 ff8a 	bl	8012602 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	e005      	b.n	80106fe <SCSI_Write12+0x1d4>
    return SCSI_ProcessWrite(pdev, lun);
 80106f2:	7afb      	ldrb	r3, [r7, #11]
 80106f4:	4619      	mov	r1, r3
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f000 f901 	bl	80108fe <SCSI_ProcessWrite>
 80106fc:	4603      	mov	r3, r0
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3718      	adds	r7, #24
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}

08010706 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010706:	b580      	push	{r7, lr}
 8010708:	b086      	sub	sp, #24
 801070a:	af00      	add	r7, sp, #0
 801070c:	60f8      	str	r0, [r7, #12]
 801070e:	460b      	mov	r3, r1
 8010710:	607a      	str	r2, [r7, #4]
 8010712:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801071a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d102      	bne.n	8010728 <SCSI_Verify10+0x22>
  {
    return -1;
 8010722:	f04f 33ff 	mov.w	r3, #4294967295
 8010726:	e028      	b.n	801077a <SCSI_Verify10+0x74>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3301      	adds	r3, #1
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	f003 0302 	and.w	r3, r3, #2
 8010732:	2b00      	cmp	r3, #0
 8010734:	d008      	beq.n	8010748 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010736:	7af9      	ldrb	r1, [r7, #11]
 8010738:	2324      	movs	r3, #36	; 0x24
 801073a:	2205      	movs	r2, #5
 801073c:	68f8      	ldr	r0, [r7, #12]
 801073e:	f7ff fbbd 	bl	800febc <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8010742:	f04f 33ff 	mov.w	r3, #4294967295
 8010746:	e018      	b.n	801077a <SCSI_Verify10+0x74>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8010748:	697a      	ldr	r2, [r7, #20]
 801074a:	f241 036c 	movw	r3, #4204	; 0x106c
 801074e:	4413      	add	r3, r2
 8010750:	6818      	ldr	r0, [r3, #0]
 8010752:	697a      	ldr	r2, [r7, #20]
 8010754:	f241 0370 	movw	r3, #4208	; 0x1070
 8010758:	4413      	add	r3, r2
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	7af9      	ldrb	r1, [r7, #11]
 801075e:	4602      	mov	r2, r0
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f000 f80e 	bl	8010782 <SCSI_CheckAddressRange>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	da02      	bge.n	8010772 <SCSI_Verify10+0x6c>
  {
    return -1; /* error */
 801076c:	f04f 33ff 	mov.w	r3, #4294967295
 8010770:	e003      	b.n	801077a <SCSI_Verify10+0x74>
  }

  hmsc->bot_data_length = 0U;
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	2200      	movs	r2, #0
 8010776:	60da      	str	r2, [r3, #12]

  return 0;
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3718      	adds	r7, #24
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b086      	sub	sp, #24
 8010786:	af00      	add	r7, sp, #0
 8010788:	60f8      	str	r0, [r7, #12]
 801078a:	607a      	str	r2, [r7, #4]
 801078c:	603b      	str	r3, [r7, #0]
 801078e:	460b      	mov	r3, r1
 8010790:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010798:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d102      	bne.n	80107a6 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 80107a0:	f04f 33ff 	mov.w	r3, #4294967295
 80107a4:	e013      	b.n	80107ce <SCSI_CheckAddressRange+0x4c>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	441a      	add	r2, r3
 80107ac:	6979      	ldr	r1, [r7, #20]
 80107ae:	f241 0368 	movw	r3, #4200	; 0x1068
 80107b2:	440b      	add	r3, r1
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d908      	bls.n	80107cc <SCSI_CheckAddressRange+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80107ba:	7af9      	ldrb	r1, [r7, #11]
 80107bc:	2321      	movs	r3, #33	; 0x21
 80107be:	2205      	movs	r2, #5
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f7ff fb7b 	bl	800febc <SCSI_SenseCode>
    return -1;
 80107c6:	f04f 33ff 	mov.w	r3, #4294967295
 80107ca:	e000      	b.n	80107ce <SCSI_CheckAddressRange+0x4c>
  }

  return 0;
 80107cc:	2300      	movs	r3, #0
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3718      	adds	r7, #24
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80107d6:	b5b0      	push	{r4, r5, r7, lr}
 80107d8:	b084      	sub	sp, #16
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	460b      	mov	r3, r1
 80107e0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107e8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	f241 0370 	movw	r3, #4208	; 0x1070
 80107f0:	4413      	add	r3, r2
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	68f9      	ldr	r1, [r7, #12]
 80107f6:	f241 0364 	movw	r3, #4196	; 0x1064
 80107fa:	440b      	add	r3, r1
 80107fc:	881b      	ldrh	r3, [r3, #0]
 80107fe:	fb03 f302 	mul.w	r3, r3, r2
 8010802:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d102      	bne.n	8010810 <SCSI_ProcessRead+0x3a>
  {
    return -1;
 801080a:	f04f 33ff 	mov.w	r3, #4294967295
 801080e:	e072      	b.n	80108f6 <SCSI_ProcessRead+0x120>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010816:	bf28      	it	cs
 8010818:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 801081c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010824:	691c      	ldr	r4, [r3, #16]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f103 0110 	add.w	r1, r3, #16
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	f241 036c 	movw	r3, #4204	; 0x106c
 8010832:	4413      	add	r3, r2
 8010834:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	f241 0364 	movw	r3, #4196	; 0x1064
 801083c:	4413      	add	r3, r2
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	461a      	mov	r2, r3
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8010848:	b29b      	uxth	r3, r3
 801084a:	78f8      	ldrb	r0, [r7, #3]
 801084c:	462a      	mov	r2, r5
 801084e:	47a0      	blx	r4
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	da08      	bge.n	8010868 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8010856:	78f9      	ldrb	r1, [r7, #3]
 8010858:	2311      	movs	r3, #17
 801085a:	2204      	movs	r2, #4
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f7ff fb2d 	bl	800febc <SCSI_SenseCode>
    return -1;
 8010862:	f04f 33ff 	mov.w	r3, #4294967295
 8010866:	e046      	b.n	80108f6 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f103 0210 	add.w	r2, r3, #16
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2181      	movs	r1, #129	; 0x81
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f001 fea4 	bl	80125c0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	f241 036c 	movw	r3, #4204	; 0x106c
 801087e:	4413      	add	r3, r2
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	68f9      	ldr	r1, [r7, #12]
 8010884:	f241 0364 	movw	r3, #4196	; 0x1064
 8010888:	440b      	add	r3, r1
 801088a:	881b      	ldrh	r3, [r3, #0]
 801088c:	4619      	mov	r1, r3
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	fbb3 f3f1 	udiv	r3, r3, r1
 8010894:	441a      	add	r2, r3
 8010896:	68f9      	ldr	r1, [r7, #12]
 8010898:	f241 036c 	movw	r3, #4204	; 0x106c
 801089c:	440b      	add	r3, r1
 801089e:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80108a0:	68fa      	ldr	r2, [r7, #12]
 80108a2:	f241 0370 	movw	r3, #4208	; 0x1070
 80108a6:	4413      	add	r3, r2
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	68f9      	ldr	r1, [r7, #12]
 80108ac:	f241 0364 	movw	r3, #4196	; 0x1064
 80108b0:	440b      	add	r3, r1
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	4619      	mov	r1, r3
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80108bc:	1ad2      	subs	r2, r2, r3
 80108be:	68f9      	ldr	r1, [r7, #12]
 80108c0:	f241 0370 	movw	r3, #4208	; 0x1070
 80108c4:	440b      	add	r3, r1
 80108c6:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	f241 0338 	movw	r3, #4152	; 0x1038
 80108ce:	4413      	add	r3, r2
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	1ad2      	subs	r2, r2, r3
 80108d6:	68f9      	ldr	r1, [r7, #12]
 80108d8:	f241 0338 	movw	r3, #4152	; 0x1038
 80108dc:	440b      	add	r3, r1
 80108de:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	f241 0370 	movw	r3, #4208	; 0x1070
 80108e6:	4413      	add	r3, r2
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d102      	bne.n	80108f4 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2203      	movs	r2, #3
 80108f2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3710      	adds	r7, #16
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bdb0      	pop	{r4, r5, r7, pc}

080108fe <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80108fe:	b5b0      	push	{r4, r5, r7, lr}
 8010900:	b084      	sub	sp, #16
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	460b      	mov	r3, r1
 8010908:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010910:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010912:	68fa      	ldr	r2, [r7, #12]
 8010914:	f241 0370 	movw	r3, #4208	; 0x1070
 8010918:	4413      	add	r3, r2
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	68f9      	ldr	r1, [r7, #12]
 801091e:	f241 0364 	movw	r3, #4196	; 0x1064
 8010922:	440b      	add	r3, r1
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	fb03 f302 	mul.w	r3, r3, r2
 801092a:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d102      	bne.n	8010938 <SCSI_ProcessWrite+0x3a>
  {
    return -1;
 8010932:	f04f 33ff 	mov.w	r3, #4294967295
 8010936:	e086      	b.n	8010a46 <SCSI_ProcessWrite+0x148>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801093e:	bf28      	it	cs
 8010940:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8010944:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801094c:	695c      	ldr	r4, [r3, #20]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f103 0110 	add.w	r1, r3, #16
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	f241 036c 	movw	r3, #4204	; 0x106c
 801095a:	4413      	add	r3, r2
 801095c:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	f241 0364 	movw	r3, #4196	; 0x1064
 8010964:	4413      	add	r3, r2
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	461a      	mov	r2, r3
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8010970:	b29b      	uxth	r3, r3
 8010972:	78f8      	ldrb	r0, [r7, #3]
 8010974:	462a      	mov	r2, r5
 8010976:	47a0      	blx	r4
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	da08      	bge.n	8010990 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801097e:	78f9      	ldrb	r1, [r7, #3]
 8010980:	2303      	movs	r3, #3
 8010982:	2204      	movs	r2, #4
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff fa99 	bl	800febc <SCSI_SenseCode>
    return -1;
 801098a:	f04f 33ff 	mov.w	r3, #4294967295
 801098e:	e05a      	b.n	8010a46 <SCSI_ProcessWrite+0x148>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	f241 036c 	movw	r3, #4204	; 0x106c
 8010996:	4413      	add	r3, r2
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	68f9      	ldr	r1, [r7, #12]
 801099c:	f241 0364 	movw	r3, #4196	; 0x1064
 80109a0:	440b      	add	r3, r1
 80109a2:	881b      	ldrh	r3, [r3, #0]
 80109a4:	4619      	mov	r1, r3
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80109ac:	441a      	add	r2, r3
 80109ae:	68f9      	ldr	r1, [r7, #12]
 80109b0:	f241 036c 	movw	r3, #4204	; 0x106c
 80109b4:	440b      	add	r3, r1
 80109b6:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80109b8:	68fa      	ldr	r2, [r7, #12]
 80109ba:	f241 0370 	movw	r3, #4208	; 0x1070
 80109be:	4413      	add	r3, r2
 80109c0:	681a      	ldr	r2, [r3, #0]
 80109c2:	68f9      	ldr	r1, [r7, #12]
 80109c4:	f241 0364 	movw	r3, #4196	; 0x1064
 80109c8:	440b      	add	r3, r1
 80109ca:	881b      	ldrh	r3, [r3, #0]
 80109cc:	4619      	mov	r1, r3
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80109d4:	1ad2      	subs	r2, r2, r3
 80109d6:	68f9      	ldr	r1, [r7, #12]
 80109d8:	f241 0370 	movw	r3, #4208	; 0x1070
 80109dc:	440b      	add	r3, r1
 80109de:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80109e0:	68fa      	ldr	r2, [r7, #12]
 80109e2:	f241 0338 	movw	r3, #4152	; 0x1038
 80109e6:	4413      	add	r3, r2
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	1ad2      	subs	r2, r2, r3
 80109ee:	68f9      	ldr	r1, [r7, #12]
 80109f0:	f241 0338 	movw	r3, #4152	; 0x1038
 80109f4:	440b      	add	r3, r1
 80109f6:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80109f8:	68fa      	ldr	r2, [r7, #12]
 80109fa:	f241 0370 	movw	r3, #4208	; 0x1070
 80109fe:	4413      	add	r3, r2
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d104      	bne.n	8010a10 <SCSI_ProcessWrite+0x112>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010a06:	2100      	movs	r1, #0
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7fe fcc9 	bl	800f3a0 <MSC_BOT_SendCSW>
 8010a0e:	e019      	b.n	8010a44 <SCSI_ProcessWrite+0x146>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8010a10:	68fa      	ldr	r2, [r7, #12]
 8010a12:	f241 0370 	movw	r3, #4208	; 0x1070
 8010a16:	4413      	add	r3, r2
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	68f9      	ldr	r1, [r7, #12]
 8010a1c:	f241 0364 	movw	r3, #4196	; 0x1064
 8010a20:	440b      	add	r3, r1
 8010a22:	881b      	ldrh	r3, [r3, #0]
 8010a24:	fb03 f302 	mul.w	r3, r3, r2
 8010a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a2c:	bf28      	it	cs
 8010a2e:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8010a32:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f103 0210 	add.w	r2, r3, #16
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2101      	movs	r1, #1
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f001 fddf 	bl	8012602 <USBD_LL_PrepareReceive>
  }

  return 0;
 8010a44:	2300      	movs	r3, #0
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3710      	adds	r7, #16
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bdb0      	pop	{r4, r5, r7, pc}

08010a4e <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8010a4e:	b480      	push	{r7}
 8010a50:	b087      	sub	sp, #28
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	60f8      	str	r0, [r7, #12]
 8010a56:	60b9      	str	r1, [r7, #8]
 8010a58:	4613      	mov	r3, r2
 8010a5a:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8010a5c:	88fb      	ldrh	r3, [r7, #6]
 8010a5e:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d102      	bne.n	8010a6c <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8010a66:	f04f 33ff 	mov.w	r3, #4294967295
 8010a6a:	e013      	b.n	8010a94 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8010a6c:	8afa      	ldrh	r2, [r7, #22]
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8010a72:	e00b      	b.n	8010a8c <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8010a74:	8afb      	ldrh	r3, [r7, #22]
 8010a76:	3b01      	subs	r3, #1
 8010a78:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8010a7a:	8afb      	ldrh	r3, [r7, #22]
 8010a7c:	68ba      	ldr	r2, [r7, #8]
 8010a7e:	441a      	add	r2, r3
 8010a80:	8afb      	ldrh	r3, [r7, #22]
 8010a82:	7811      	ldrb	r1, [r2, #0]
 8010a84:	68fa      	ldr	r2, [r7, #12]
 8010a86:	4413      	add	r3, r2
 8010a88:	460a      	mov	r2, r1
 8010a8a:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8010a8c:	8afb      	ldrh	r3, [r7, #22]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1f0      	bne.n	8010a74 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8010a92:	2300      	movs	r3, #0
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	371c      	adds	r7, #28
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b086      	sub	sp, #24
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	4613      	mov	r3, r2
 8010aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d101      	bne.n	8010ab8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010ab4:	2303      	movs	r3, #3
 8010ab6:	e01f      	b.n	8010af8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2200      	movs	r2, #0
 8010abc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d003      	beq.n	8010ade <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	68ba      	ldr	r2, [r7, #8]
 8010ada:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	79fa      	ldrb	r2, [r7, #7]
 8010aea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f001 fc0f 	bl	8012310 <USBD_LL_Init>
 8010af2:	4603      	mov	r3, r0
 8010af4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3718      	adds	r7, #24
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d101      	bne.n	8010b18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010b14:	2303      	movs	r3, #3
 8010b16:	e016      	b.n	8010b46 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	683a      	ldr	r2, [r7, #0]
 8010b1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d00b      	beq.n	8010b44 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b34:	f107 020e 	add.w	r2, r7, #14
 8010b38:	4610      	mov	r0, r2
 8010b3a:	4798      	blx	r3
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010b44:	2300      	movs	r3, #0
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3710      	adds	r7, #16
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b082      	sub	sp, #8
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f001 fc2a 	bl	80123b0 <USBD_LL_Start>
 8010b5c:	4603      	mov	r3, r0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010b66:	b480      	push	{r7}
 8010b68:	b083      	sub	sp, #12
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010b6e:	2300      	movs	r3, #0
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010b88:	2303      	movs	r3, #3
 8010b8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d009      	beq.n	8010baa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	78fa      	ldrb	r2, [r7, #3]
 8010ba0:	4611      	mov	r1, r2
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	4798      	blx	r3
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3710      	adds	r7, #16
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d007      	beq.n	8010bda <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	78fa      	ldrb	r2, [r7, #3]
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	4798      	blx	r3
  }

  return USBD_OK;
 8010bda:	2300      	movs	r3, #0
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3708      	adds	r7, #8
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010bf4:	6839      	ldr	r1, [r7, #0]
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f000 ff90 	bl	8011b1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2201      	movs	r2, #1
 8010c00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010c18:	f003 031f 	and.w	r3, r3, #31
 8010c1c:	2b02      	cmp	r3, #2
 8010c1e:	d01a      	beq.n	8010c56 <USBD_LL_SetupStage+0x72>
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	d822      	bhi.n	8010c6a <USBD_LL_SetupStage+0x86>
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d002      	beq.n	8010c2e <USBD_LL_SetupStage+0x4a>
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d00a      	beq.n	8010c42 <USBD_LL_SetupStage+0x5e>
 8010c2c:	e01d      	b.n	8010c6a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010c34:	4619      	mov	r1, r3
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 fa62 	bl	8011100 <USBD_StdDevReq>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8010c40:	e020      	b.n	8010c84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010c48:	4619      	mov	r1, r3
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 fac6 	bl	80111dc <USBD_StdItfReq>
 8010c50:	4603      	mov	r3, r0
 8010c52:	73fb      	strb	r3, [r7, #15]
      break;
 8010c54:	e016      	b.n	8010c84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 fb05 	bl	801126e <USBD_StdEPReq>
 8010c64:	4603      	mov	r3, r0
 8010c66:	73fb      	strb	r3, [r7, #15]
      break;
 8010c68:	e00c      	b.n	8010c84 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010c70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	4619      	mov	r1, r3
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f001 fc18 	bl	80124ae <USBD_LL_StallEP>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	73fb      	strb	r3, [r7, #15]
      break;
 8010c82:	bf00      	nop
  }

  return ret;
 8010c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b086      	sub	sp, #24
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	60f8      	str	r0, [r7, #12]
 8010c96:	460b      	mov	r3, r1
 8010c98:	607a      	str	r2, [r7, #4]
 8010c9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010c9c:	7afb      	ldrb	r3, [r7, #11]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d138      	bne.n	8010d14 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010ca8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010cb0:	2b03      	cmp	r3, #3
 8010cb2:	d14a      	bne.n	8010d4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	689a      	ldr	r2, [r3, #8]
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d913      	bls.n	8010ce8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	689a      	ldr	r2, [r3, #8]
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	1ad2      	subs	r2, r2, r3
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	689b      	ldr	r3, [r3, #8]
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	bf28      	it	cs
 8010cda:	4613      	movcs	r3, r2
 8010cdc:	461a      	mov	r2, r3
 8010cde:	6879      	ldr	r1, [r7, #4]
 8010ce0:	68f8      	ldr	r0, [r7, #12]
 8010ce2:	f000 fff2 	bl	8011cca <USBD_CtlContinueRx>
 8010ce6:	e030      	b.n	8010d4a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	2b03      	cmp	r3, #3
 8010cf2:	d10b      	bne.n	8010d0c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cfa:	691b      	ldr	r3, [r3, #16]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d005      	beq.n	8010d0c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d06:	691b      	ldr	r3, [r3, #16]
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f000 ffed 	bl	8011cec <USBD_CtlSendStatus>
 8010d12:	e01a      	b.n	8010d4a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	2b03      	cmp	r3, #3
 8010d1e:	d114      	bne.n	8010d4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d26:	699b      	ldr	r3, [r3, #24]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d00e      	beq.n	8010d4a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d32:	699b      	ldr	r3, [r3, #24]
 8010d34:	7afa      	ldrb	r2, [r7, #11]
 8010d36:	4611      	mov	r1, r2
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	4798      	blx	r3
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010d40:	7dfb      	ldrb	r3, [r7, #23]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010d46:	7dfb      	ldrb	r3, [r7, #23]
 8010d48:	e000      	b.n	8010d4c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010d4a:	2300      	movs	r3, #0
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3718      	adds	r7, #24
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b086      	sub	sp, #24
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	607a      	str	r2, [r7, #4]
 8010d60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010d62:	7afb      	ldrb	r3, [r7, #11]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d16b      	bne.n	8010e40 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	3314      	adds	r3, #20
 8010d6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010d74:	2b02      	cmp	r3, #2
 8010d76:	d156      	bne.n	8010e26 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	689a      	ldr	r2, [r3, #8]
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d914      	bls.n	8010dae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	689a      	ldr	r2, [r3, #8]
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	1ad2      	subs	r2, r2, r3
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	461a      	mov	r2, r3
 8010d98:	6879      	ldr	r1, [r7, #4]
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	f000 ff84 	bl	8011ca8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010da0:	2300      	movs	r3, #0
 8010da2:	2200      	movs	r2, #0
 8010da4:	2100      	movs	r1, #0
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f001 fc2b 	bl	8012602 <USBD_LL_PrepareReceive>
 8010dac:	e03b      	b.n	8010e26 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	68da      	ldr	r2, [r3, #12]
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	689b      	ldr	r3, [r3, #8]
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d11c      	bne.n	8010df4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	685a      	ldr	r2, [r3, #4]
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d316      	bcc.n	8010df4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	685a      	ldr	r2, [r3, #4]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d20f      	bcs.n	8010df4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	2100      	movs	r1, #0
 8010dd8:	68f8      	ldr	r0, [r7, #12]
 8010dda:	f000 ff65 	bl	8011ca8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2200      	movs	r2, #0
 8010de2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010de6:	2300      	movs	r3, #0
 8010de8:	2200      	movs	r2, #0
 8010dea:	2100      	movs	r1, #0
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f001 fc08 	bl	8012602 <USBD_LL_PrepareReceive>
 8010df2:	e018      	b.n	8010e26 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	d10b      	bne.n	8010e18 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d005      	beq.n	8010e18 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e18:	2180      	movs	r1, #128	; 0x80
 8010e1a:	68f8      	ldr	r0, [r7, #12]
 8010e1c:	f001 fb47 	bl	80124ae <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f000 ff76 	bl	8011d12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d122      	bne.n	8010e76 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010e30:	68f8      	ldr	r0, [r7, #12]
 8010e32:	f7ff fe98 	bl	8010b66 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010e3e:	e01a      	b.n	8010e76 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	2b03      	cmp	r3, #3
 8010e4a:	d114      	bne.n	8010e76 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e52:	695b      	ldr	r3, [r3, #20]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00e      	beq.n	8010e76 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e5e:	695b      	ldr	r3, [r3, #20]
 8010e60:	7afa      	ldrb	r2, [r7, #11]
 8010e62:	4611      	mov	r1, r2
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	4798      	blx	r3
 8010e68:	4603      	mov	r3, r0
 8010e6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010e6c:	7dfb      	ldrb	r3, [r7, #23]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d001      	beq.n	8010e76 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010e72:	7dfb      	ldrb	r3, [r7, #23]
 8010e74:	e000      	b.n	8010e78 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010e76:	2300      	movs	r3, #0
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3718      	adds	r7, #24
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d101      	bne.n	8010eb4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010eb0:	2303      	movs	r3, #3
 8010eb2:	e02f      	b.n	8010f14 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d00f      	beq.n	8010ede <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d009      	beq.n	8010ede <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	6852      	ldr	r2, [r2, #4]
 8010ed6:	b2d2      	uxtb	r2, r2
 8010ed8:	4611      	mov	r1, r2
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010ede:	2340      	movs	r3, #64	; 0x40
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f001 fa7e 	bl	80123e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2201      	movs	r2, #1
 8010eee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2240      	movs	r2, #64	; 0x40
 8010ef6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010efa:	2340      	movs	r3, #64	; 0x40
 8010efc:	2200      	movs	r2, #0
 8010efe:	2180      	movs	r1, #128	; 0x80
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f001 fa70 	bl	80123e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2201      	movs	r2, #1
 8010f0a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2240      	movs	r2, #64	; 0x40
 8010f10:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010f12:	2300      	movs	r3, #0
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	460b      	mov	r3, r1
 8010f26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	78fa      	ldrb	r2, [r7, #3]
 8010f2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010f2e:	2300      	movs	r3, #0
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	370c      	adds	r7, #12
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr

08010f3c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f4a:	b2da      	uxtb	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2204      	movs	r2, #4
 8010f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010f5a:	2300      	movs	r3, #0
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b083      	sub	sp, #12
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	2b04      	cmp	r3, #4
 8010f7a:	d106      	bne.n	8010f8a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010f82:	b2da      	uxtb	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010f8a:	2300      	movs	r3, #0
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	370c      	adds	r7, #12
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr

08010f98 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d101      	bne.n	8010fae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010faa:	2303      	movs	r3, #3
 8010fac:	e012      	b.n	8010fd4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	2b03      	cmp	r3, #3
 8010fb8:	d10b      	bne.n	8010fd2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fc0:	69db      	ldr	r3, [r3, #28]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d005      	beq.n	8010fd2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fcc:	69db      	ldr	r3, [r3, #28]
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010fd2:	2300      	movs	r3, #0
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d101      	bne.n	8010ff6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010ff2:	2303      	movs	r3, #3
 8010ff4:	e014      	b.n	8011020 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	2b03      	cmp	r3, #3
 8011000:	d10d      	bne.n	801101e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011008:	6a1b      	ldr	r3, [r3, #32]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d007      	beq.n	801101e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011014:	6a1b      	ldr	r3, [r3, #32]
 8011016:	78fa      	ldrb	r2, [r7, #3]
 8011018:	4611      	mov	r1, r2
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801101e:	2300      	movs	r3, #0
}
 8011020:	4618      	mov	r0, r3
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801103a:	2b00      	cmp	r3, #0
 801103c:	d101      	bne.n	8011042 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801103e:	2303      	movs	r3, #3
 8011040:	e014      	b.n	801106c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011048:	b2db      	uxtb	r3, r3
 801104a:	2b03      	cmp	r3, #3
 801104c:	d10d      	bne.n	801106a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011056:	2b00      	cmp	r3, #0
 8011058:	d007      	beq.n	801106a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011062:	78fa      	ldrb	r2, [r7, #3]
 8011064:	4611      	mov	r1, r2
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801106a:	2300      	movs	r3, #0
}
 801106c:	4618      	mov	r0, r3
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011074:	b480      	push	{r7}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801107c:	2300      	movs	r3, #0
}
 801107e:	4618      	mov	r0, r3
 8011080:	370c      	adds	r7, #12
 8011082:	46bd      	mov	sp, r7
 8011084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011088:	4770      	bx	lr

0801108a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b082      	sub	sp, #8
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2201      	movs	r2, #1
 8011096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d009      	beq.n	80110b8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	6852      	ldr	r2, [r2, #4]
 80110b0:	b2d2      	uxtb	r2, r2
 80110b2:	4611      	mov	r1, r2
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	4798      	blx	r3
  }

  return USBD_OK;
 80110b8:	2300      	movs	r3, #0
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3708      	adds	r7, #8
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80110c2:	b480      	push	{r7}
 80110c4:	b087      	sub	sp, #28
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	3301      	adds	r3, #1
 80110d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80110e0:	8a3b      	ldrh	r3, [r7, #16]
 80110e2:	021b      	lsls	r3, r3, #8
 80110e4:	b21a      	sxth	r2, r3
 80110e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80110ea:	4313      	orrs	r3, r2
 80110ec:	b21b      	sxth	r3, r3
 80110ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80110f0:	89fb      	ldrh	r3, [r7, #14]
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	371c      	adds	r7, #28
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
	...

08011100 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801110a:	2300      	movs	r3, #0
 801110c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011116:	2b40      	cmp	r3, #64	; 0x40
 8011118:	d005      	beq.n	8011126 <USBD_StdDevReq+0x26>
 801111a:	2b40      	cmp	r3, #64	; 0x40
 801111c:	d853      	bhi.n	80111c6 <USBD_StdDevReq+0xc6>
 801111e:	2b00      	cmp	r3, #0
 8011120:	d00b      	beq.n	801113a <USBD_StdDevReq+0x3a>
 8011122:	2b20      	cmp	r3, #32
 8011124:	d14f      	bne.n	80111c6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801112c:	689b      	ldr	r3, [r3, #8]
 801112e:	6839      	ldr	r1, [r7, #0]
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	4798      	blx	r3
 8011134:	4603      	mov	r3, r0
 8011136:	73fb      	strb	r3, [r7, #15]
      break;
 8011138:	e04a      	b.n	80111d0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	785b      	ldrb	r3, [r3, #1]
 801113e:	2b09      	cmp	r3, #9
 8011140:	d83b      	bhi.n	80111ba <USBD_StdDevReq+0xba>
 8011142:	a201      	add	r2, pc, #4	; (adr r2, 8011148 <USBD_StdDevReq+0x48>)
 8011144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011148:	0801119d 	.word	0x0801119d
 801114c:	080111b1 	.word	0x080111b1
 8011150:	080111bb 	.word	0x080111bb
 8011154:	080111a7 	.word	0x080111a7
 8011158:	080111bb 	.word	0x080111bb
 801115c:	0801117b 	.word	0x0801117b
 8011160:	08011171 	.word	0x08011171
 8011164:	080111bb 	.word	0x080111bb
 8011168:	08011193 	.word	0x08011193
 801116c:	08011185 	.word	0x08011185
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011170:	6839      	ldr	r1, [r7, #0]
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 f9de 	bl	8011534 <USBD_GetDescriptor>
          break;
 8011178:	e024      	b.n	80111c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801117a:	6839      	ldr	r1, [r7, #0]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 fb43 	bl	8011808 <USBD_SetAddress>
          break;
 8011182:	e01f      	b.n	80111c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011184:	6839      	ldr	r1, [r7, #0]
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 fb82 	bl	8011890 <USBD_SetConfig>
 801118c:	4603      	mov	r3, r0
 801118e:	73fb      	strb	r3, [r7, #15]
          break;
 8011190:	e018      	b.n	80111c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011192:	6839      	ldr	r1, [r7, #0]
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 fc21 	bl	80119dc <USBD_GetConfig>
          break;
 801119a:	e013      	b.n	80111c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801119c:	6839      	ldr	r1, [r7, #0]
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 fc52 	bl	8011a48 <USBD_GetStatus>
          break;
 80111a4:	e00e      	b.n	80111c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80111a6:	6839      	ldr	r1, [r7, #0]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f000 fc81 	bl	8011ab0 <USBD_SetFeature>
          break;
 80111ae:	e009      	b.n	80111c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80111b0:	6839      	ldr	r1, [r7, #0]
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 fc90 	bl	8011ad8 <USBD_ClrFeature>
          break;
 80111b8:	e004      	b.n	80111c4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80111ba:	6839      	ldr	r1, [r7, #0]
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f000 fce7 	bl	8011b90 <USBD_CtlError>
          break;
 80111c2:	bf00      	nop
      }
      break;
 80111c4:	e004      	b.n	80111d0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80111c6:	6839      	ldr	r1, [r7, #0]
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f000 fce1 	bl	8011b90 <USBD_CtlError>
      break;
 80111ce:	bf00      	nop
  }

  return ret;
 80111d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3710      	adds	r7, #16
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop

080111dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80111e6:	2300      	movs	r3, #0
 80111e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80111f2:	2b40      	cmp	r3, #64	; 0x40
 80111f4:	d005      	beq.n	8011202 <USBD_StdItfReq+0x26>
 80111f6:	2b40      	cmp	r3, #64	; 0x40
 80111f8:	d82f      	bhi.n	801125a <USBD_StdItfReq+0x7e>
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d001      	beq.n	8011202 <USBD_StdItfReq+0x26>
 80111fe:	2b20      	cmp	r3, #32
 8011200:	d12b      	bne.n	801125a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011208:	b2db      	uxtb	r3, r3
 801120a:	3b01      	subs	r3, #1
 801120c:	2b02      	cmp	r3, #2
 801120e:	d81d      	bhi.n	801124c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	889b      	ldrh	r3, [r3, #4]
 8011214:	b2db      	uxtb	r3, r3
 8011216:	2b01      	cmp	r3, #1
 8011218:	d813      	bhi.n	8011242 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011220:	689b      	ldr	r3, [r3, #8]
 8011222:	6839      	ldr	r1, [r7, #0]
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	4798      	blx	r3
 8011228:	4603      	mov	r3, r0
 801122a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	88db      	ldrh	r3, [r3, #6]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d110      	bne.n	8011256 <USBD_StdItfReq+0x7a>
 8011234:	7bfb      	ldrb	r3, [r7, #15]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d10d      	bne.n	8011256 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 fd56 	bl	8011cec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011240:	e009      	b.n	8011256 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011242:	6839      	ldr	r1, [r7, #0]
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f000 fca3 	bl	8011b90 <USBD_CtlError>
          break;
 801124a:	e004      	b.n	8011256 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801124c:	6839      	ldr	r1, [r7, #0]
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fc9e 	bl	8011b90 <USBD_CtlError>
          break;
 8011254:	e000      	b.n	8011258 <USBD_StdItfReq+0x7c>
          break;
 8011256:	bf00      	nop
      }
      break;
 8011258:	e004      	b.n	8011264 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801125a:	6839      	ldr	r1, [r7, #0]
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 fc97 	bl	8011b90 <USBD_CtlError>
      break;
 8011262:	bf00      	nop
  }

  return ret;
 8011264:	7bfb      	ldrb	r3, [r7, #15]
}
 8011266:	4618      	mov	r0, r3
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}

0801126e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801126e:	b580      	push	{r7, lr}
 8011270:	b084      	sub	sp, #16
 8011272:	af00      	add	r7, sp, #0
 8011274:	6078      	str	r0, [r7, #4]
 8011276:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011278:	2300      	movs	r3, #0
 801127a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	889b      	ldrh	r3, [r3, #4]
 8011280:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801128a:	2b40      	cmp	r3, #64	; 0x40
 801128c:	d007      	beq.n	801129e <USBD_StdEPReq+0x30>
 801128e:	2b40      	cmp	r3, #64	; 0x40
 8011290:	f200 8145 	bhi.w	801151e <USBD_StdEPReq+0x2b0>
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00c      	beq.n	80112b2 <USBD_StdEPReq+0x44>
 8011298:	2b20      	cmp	r3, #32
 801129a:	f040 8140 	bne.w	801151e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	6839      	ldr	r1, [r7, #0]
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	4798      	blx	r3
 80112ac:	4603      	mov	r3, r0
 80112ae:	73fb      	strb	r3, [r7, #15]
      break;
 80112b0:	e13a      	b.n	8011528 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	785b      	ldrb	r3, [r3, #1]
 80112b6:	2b03      	cmp	r3, #3
 80112b8:	d007      	beq.n	80112ca <USBD_StdEPReq+0x5c>
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	f300 8129 	bgt.w	8011512 <USBD_StdEPReq+0x2a4>
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d07f      	beq.n	80113c4 <USBD_StdEPReq+0x156>
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d03c      	beq.n	8011342 <USBD_StdEPReq+0xd4>
 80112c8:	e123      	b.n	8011512 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d002      	beq.n	80112dc <USBD_StdEPReq+0x6e>
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d016      	beq.n	8011308 <USBD_StdEPReq+0x9a>
 80112da:	e02c      	b.n	8011336 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112dc:	7bbb      	ldrb	r3, [r7, #14]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00d      	beq.n	80112fe <USBD_StdEPReq+0x90>
 80112e2:	7bbb      	ldrb	r3, [r7, #14]
 80112e4:	2b80      	cmp	r3, #128	; 0x80
 80112e6:	d00a      	beq.n	80112fe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80112e8:	7bbb      	ldrb	r3, [r7, #14]
 80112ea:	4619      	mov	r1, r3
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f001 f8de 	bl	80124ae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80112f2:	2180      	movs	r1, #128	; 0x80
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f001 f8da 	bl	80124ae <USBD_LL_StallEP>
 80112fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80112fc:	e020      	b.n	8011340 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80112fe:	6839      	ldr	r1, [r7, #0]
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f000 fc45 	bl	8011b90 <USBD_CtlError>
              break;
 8011306:	e01b      	b.n	8011340 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	885b      	ldrh	r3, [r3, #2]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d10e      	bne.n	801132e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011310:	7bbb      	ldrb	r3, [r7, #14]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d00b      	beq.n	801132e <USBD_StdEPReq+0xc0>
 8011316:	7bbb      	ldrb	r3, [r7, #14]
 8011318:	2b80      	cmp	r3, #128	; 0x80
 801131a:	d008      	beq.n	801132e <USBD_StdEPReq+0xc0>
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	88db      	ldrh	r3, [r3, #6]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d104      	bne.n	801132e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011324:	7bbb      	ldrb	r3, [r7, #14]
 8011326:	4619      	mov	r1, r3
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f001 f8c0 	bl	80124ae <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 fcdc 	bl	8011cec <USBD_CtlSendStatus>

              break;
 8011334:	e004      	b.n	8011340 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011336:	6839      	ldr	r1, [r7, #0]
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 fc29 	bl	8011b90 <USBD_CtlError>
              break;
 801133e:	bf00      	nop
          }
          break;
 8011340:	e0ec      	b.n	801151c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011348:	b2db      	uxtb	r3, r3
 801134a:	2b02      	cmp	r3, #2
 801134c:	d002      	beq.n	8011354 <USBD_StdEPReq+0xe6>
 801134e:	2b03      	cmp	r3, #3
 8011350:	d016      	beq.n	8011380 <USBD_StdEPReq+0x112>
 8011352:	e030      	b.n	80113b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011354:	7bbb      	ldrb	r3, [r7, #14]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d00d      	beq.n	8011376 <USBD_StdEPReq+0x108>
 801135a:	7bbb      	ldrb	r3, [r7, #14]
 801135c:	2b80      	cmp	r3, #128	; 0x80
 801135e:	d00a      	beq.n	8011376 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011360:	7bbb      	ldrb	r3, [r7, #14]
 8011362:	4619      	mov	r1, r3
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f001 f8a2 	bl	80124ae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801136a:	2180      	movs	r1, #128	; 0x80
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f001 f89e 	bl	80124ae <USBD_LL_StallEP>
 8011372:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011374:	e025      	b.n	80113c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011376:	6839      	ldr	r1, [r7, #0]
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f000 fc09 	bl	8011b90 <USBD_CtlError>
              break;
 801137e:	e020      	b.n	80113c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	885b      	ldrh	r3, [r3, #2]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d11b      	bne.n	80113c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011388:	7bbb      	ldrb	r3, [r7, #14]
 801138a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801138e:	2b00      	cmp	r3, #0
 8011390:	d004      	beq.n	801139c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011392:	7bbb      	ldrb	r3, [r7, #14]
 8011394:	4619      	mov	r1, r3
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f001 f8a8 	bl	80124ec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f000 fca5 	bl	8011cec <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113a8:	689b      	ldr	r3, [r3, #8]
 80113aa:	6839      	ldr	r1, [r7, #0]
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	4798      	blx	r3
 80113b0:	4603      	mov	r3, r0
 80113b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80113b4:	e004      	b.n	80113c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 fbe9 	bl	8011b90 <USBD_CtlError>
              break;
 80113be:	e000      	b.n	80113c2 <USBD_StdEPReq+0x154>
              break;
 80113c0:	bf00      	nop
          }
          break;
 80113c2:	e0ab      	b.n	801151c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	2b02      	cmp	r3, #2
 80113ce:	d002      	beq.n	80113d6 <USBD_StdEPReq+0x168>
 80113d0:	2b03      	cmp	r3, #3
 80113d2:	d032      	beq.n	801143a <USBD_StdEPReq+0x1cc>
 80113d4:	e097      	b.n	8011506 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113d6:	7bbb      	ldrb	r3, [r7, #14]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d007      	beq.n	80113ec <USBD_StdEPReq+0x17e>
 80113dc:	7bbb      	ldrb	r3, [r7, #14]
 80113de:	2b80      	cmp	r3, #128	; 0x80
 80113e0:	d004      	beq.n	80113ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80113e2:	6839      	ldr	r1, [r7, #0]
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 fbd3 	bl	8011b90 <USBD_CtlError>
                break;
 80113ea:	e091      	b.n	8011510 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80113ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	da0b      	bge.n	801140c <USBD_StdEPReq+0x19e>
 80113f4:	7bbb      	ldrb	r3, [r7, #14]
 80113f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80113fa:	4613      	mov	r3, r2
 80113fc:	009b      	lsls	r3, r3, #2
 80113fe:	4413      	add	r3, r2
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	3310      	adds	r3, #16
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	4413      	add	r3, r2
 8011408:	3304      	adds	r3, #4
 801140a:	e00b      	b.n	8011424 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801140c:	7bbb      	ldrb	r3, [r7, #14]
 801140e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011412:	4613      	mov	r3, r2
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	4413      	add	r3, r2
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	4413      	add	r3, r2
 8011422:	3304      	adds	r3, #4
 8011424:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	2200      	movs	r2, #0
 801142a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	2202      	movs	r2, #2
 8011430:	4619      	mov	r1, r3
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f000 fc1d 	bl	8011c72 <USBD_CtlSendData>
              break;
 8011438:	e06a      	b.n	8011510 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801143a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801143e:	2b00      	cmp	r3, #0
 8011440:	da11      	bge.n	8011466 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011442:	7bbb      	ldrb	r3, [r7, #14]
 8011444:	f003 020f 	and.w	r2, r3, #15
 8011448:	6879      	ldr	r1, [r7, #4]
 801144a:	4613      	mov	r3, r2
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	4413      	add	r3, r2
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	440b      	add	r3, r1
 8011454:	3324      	adds	r3, #36	; 0x24
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d117      	bne.n	801148c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801145c:	6839      	ldr	r1, [r7, #0]
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f000 fb96 	bl	8011b90 <USBD_CtlError>
                  break;
 8011464:	e054      	b.n	8011510 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011466:	7bbb      	ldrb	r3, [r7, #14]
 8011468:	f003 020f 	and.w	r2, r3, #15
 801146c:	6879      	ldr	r1, [r7, #4]
 801146e:	4613      	mov	r3, r2
 8011470:	009b      	lsls	r3, r3, #2
 8011472:	4413      	add	r3, r2
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	440b      	add	r3, r1
 8011478:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801147c:	881b      	ldrh	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d104      	bne.n	801148c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011482:	6839      	ldr	r1, [r7, #0]
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f000 fb83 	bl	8011b90 <USBD_CtlError>
                  break;
 801148a:	e041      	b.n	8011510 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801148c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011490:	2b00      	cmp	r3, #0
 8011492:	da0b      	bge.n	80114ac <USBD_StdEPReq+0x23e>
 8011494:	7bbb      	ldrb	r3, [r7, #14]
 8011496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801149a:	4613      	mov	r3, r2
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	4413      	add	r3, r2
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	3310      	adds	r3, #16
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	4413      	add	r3, r2
 80114a8:	3304      	adds	r3, #4
 80114aa:	e00b      	b.n	80114c4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80114ac:	7bbb      	ldrb	r3, [r7, #14]
 80114ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80114b2:	4613      	mov	r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4413      	add	r3, r2
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	4413      	add	r3, r2
 80114c2:	3304      	adds	r3, #4
 80114c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80114c6:	7bbb      	ldrb	r3, [r7, #14]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d002      	beq.n	80114d2 <USBD_StdEPReq+0x264>
 80114cc:	7bbb      	ldrb	r3, [r7, #14]
 80114ce:	2b80      	cmp	r3, #128	; 0x80
 80114d0:	d103      	bne.n	80114da <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	2200      	movs	r2, #0
 80114d6:	601a      	str	r2, [r3, #0]
 80114d8:	e00e      	b.n	80114f8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80114da:	7bbb      	ldrb	r3, [r7, #14]
 80114dc:	4619      	mov	r1, r3
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f001 f823 	bl	801252a <USBD_LL_IsStallEP>
 80114e4:	4603      	mov	r3, r0
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d003      	beq.n	80114f2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	2201      	movs	r2, #1
 80114ee:	601a      	str	r2, [r3, #0]
 80114f0:	e002      	b.n	80114f8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	2200      	movs	r2, #0
 80114f6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	2202      	movs	r2, #2
 80114fc:	4619      	mov	r1, r3
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 fbb7 	bl	8011c72 <USBD_CtlSendData>
              break;
 8011504:	e004      	b.n	8011510 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011506:	6839      	ldr	r1, [r7, #0]
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f000 fb41 	bl	8011b90 <USBD_CtlError>
              break;
 801150e:	bf00      	nop
          }
          break;
 8011510:	e004      	b.n	801151c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011512:	6839      	ldr	r1, [r7, #0]
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f000 fb3b 	bl	8011b90 <USBD_CtlError>
          break;
 801151a:	bf00      	nop
      }
      break;
 801151c:	e004      	b.n	8011528 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801151e:	6839      	ldr	r1, [r7, #0]
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f000 fb35 	bl	8011b90 <USBD_CtlError>
      break;
 8011526:	bf00      	nop
  }

  return ret;
 8011528:	7bfb      	ldrb	r3, [r7, #15]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3710      	adds	r7, #16
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
	...

08011534 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801153e:	2300      	movs	r3, #0
 8011540:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011542:	2300      	movs	r3, #0
 8011544:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011546:	2300      	movs	r3, #0
 8011548:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	885b      	ldrh	r3, [r3, #2]
 801154e:	0a1b      	lsrs	r3, r3, #8
 8011550:	b29b      	uxth	r3, r3
 8011552:	3b01      	subs	r3, #1
 8011554:	2b06      	cmp	r3, #6
 8011556:	f200 8128 	bhi.w	80117aa <USBD_GetDescriptor+0x276>
 801155a:	a201      	add	r2, pc, #4	; (adr r2, 8011560 <USBD_GetDescriptor+0x2c>)
 801155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011560:	0801157d 	.word	0x0801157d
 8011564:	08011595 	.word	0x08011595
 8011568:	080115d5 	.word	0x080115d5
 801156c:	080117ab 	.word	0x080117ab
 8011570:	080117ab 	.word	0x080117ab
 8011574:	0801174b 	.word	0x0801174b
 8011578:	08011777 	.word	0x08011777
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	7c12      	ldrb	r2, [r2, #16]
 8011588:	f107 0108 	add.w	r1, r7, #8
 801158c:	4610      	mov	r0, r2
 801158e:	4798      	blx	r3
 8011590:	60f8      	str	r0, [r7, #12]
      break;
 8011592:	e112      	b.n	80117ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	7c1b      	ldrb	r3, [r3, #16]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d10d      	bne.n	80115b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a4:	f107 0208 	add.w	r2, r7, #8
 80115a8:	4610      	mov	r0, r2
 80115aa:	4798      	blx	r3
 80115ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	3301      	adds	r3, #1
 80115b2:	2202      	movs	r2, #2
 80115b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80115b6:	e100      	b.n	80117ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c0:	f107 0208 	add.w	r2, r7, #8
 80115c4:	4610      	mov	r0, r2
 80115c6:	4798      	blx	r3
 80115c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	3301      	adds	r3, #1
 80115ce:	2202      	movs	r2, #2
 80115d0:	701a      	strb	r2, [r3, #0]
      break;
 80115d2:	e0f2      	b.n	80117ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	885b      	ldrh	r3, [r3, #2]
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	2b05      	cmp	r3, #5
 80115dc:	f200 80ac 	bhi.w	8011738 <USBD_GetDescriptor+0x204>
 80115e0:	a201      	add	r2, pc, #4	; (adr r2, 80115e8 <USBD_GetDescriptor+0xb4>)
 80115e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e6:	bf00      	nop
 80115e8:	08011601 	.word	0x08011601
 80115ec:	08011635 	.word	0x08011635
 80115f0:	08011669 	.word	0x08011669
 80115f4:	0801169d 	.word	0x0801169d
 80115f8:	080116d1 	.word	0x080116d1
 80115fc:	08011705 	.word	0x08011705
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00b      	beq.n	8011624 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	7c12      	ldrb	r2, [r2, #16]
 8011618:	f107 0108 	add.w	r1, r7, #8
 801161c:	4610      	mov	r0, r2
 801161e:	4798      	blx	r3
 8011620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011622:	e091      	b.n	8011748 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011624:	6839      	ldr	r1, [r7, #0]
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f000 fab2 	bl	8011b90 <USBD_CtlError>
            err++;
 801162c:	7afb      	ldrb	r3, [r7, #11]
 801162e:	3301      	adds	r3, #1
 8011630:	72fb      	strb	r3, [r7, #11]
          break;
 8011632:	e089      	b.n	8011748 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d00b      	beq.n	8011658 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	7c12      	ldrb	r2, [r2, #16]
 801164c:	f107 0108 	add.w	r1, r7, #8
 8011650:	4610      	mov	r0, r2
 8011652:	4798      	blx	r3
 8011654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011656:	e077      	b.n	8011748 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011658:	6839      	ldr	r1, [r7, #0]
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f000 fa98 	bl	8011b90 <USBD_CtlError>
            err++;
 8011660:	7afb      	ldrb	r3, [r7, #11]
 8011662:	3301      	adds	r3, #1
 8011664:	72fb      	strb	r3, [r7, #11]
          break;
 8011666:	e06f      	b.n	8011748 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d00b      	beq.n	801168c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	7c12      	ldrb	r2, [r2, #16]
 8011680:	f107 0108 	add.w	r1, r7, #8
 8011684:	4610      	mov	r0, r2
 8011686:	4798      	blx	r3
 8011688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801168a:	e05d      	b.n	8011748 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801168c:	6839      	ldr	r1, [r7, #0]
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f000 fa7e 	bl	8011b90 <USBD_CtlError>
            err++;
 8011694:	7afb      	ldrb	r3, [r7, #11]
 8011696:	3301      	adds	r3, #1
 8011698:	72fb      	strb	r3, [r7, #11]
          break;
 801169a:	e055      	b.n	8011748 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116a2:	691b      	ldr	r3, [r3, #16]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d00b      	beq.n	80116c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116ae:	691b      	ldr	r3, [r3, #16]
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	7c12      	ldrb	r2, [r2, #16]
 80116b4:	f107 0108 	add.w	r1, r7, #8
 80116b8:	4610      	mov	r0, r2
 80116ba:	4798      	blx	r3
 80116bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116be:	e043      	b.n	8011748 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80116c0:	6839      	ldr	r1, [r7, #0]
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f000 fa64 	bl	8011b90 <USBD_CtlError>
            err++;
 80116c8:	7afb      	ldrb	r3, [r7, #11]
 80116ca:	3301      	adds	r3, #1
 80116cc:	72fb      	strb	r3, [r7, #11]
          break;
 80116ce:	e03b      	b.n	8011748 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116d6:	695b      	ldr	r3, [r3, #20]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d00b      	beq.n	80116f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116e2:	695b      	ldr	r3, [r3, #20]
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	7c12      	ldrb	r2, [r2, #16]
 80116e8:	f107 0108 	add.w	r1, r7, #8
 80116ec:	4610      	mov	r0, r2
 80116ee:	4798      	blx	r3
 80116f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80116f2:	e029      	b.n	8011748 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80116f4:	6839      	ldr	r1, [r7, #0]
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f000 fa4a 	bl	8011b90 <USBD_CtlError>
            err++;
 80116fc:	7afb      	ldrb	r3, [r7, #11]
 80116fe:	3301      	adds	r3, #1
 8011700:	72fb      	strb	r3, [r7, #11]
          break;
 8011702:	e021      	b.n	8011748 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801170a:	699b      	ldr	r3, [r3, #24]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00b      	beq.n	8011728 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011716:	699b      	ldr	r3, [r3, #24]
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	7c12      	ldrb	r2, [r2, #16]
 801171c:	f107 0108 	add.w	r1, r7, #8
 8011720:	4610      	mov	r0, r2
 8011722:	4798      	blx	r3
 8011724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011726:	e00f      	b.n	8011748 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 fa30 	bl	8011b90 <USBD_CtlError>
            err++;
 8011730:	7afb      	ldrb	r3, [r7, #11]
 8011732:	3301      	adds	r3, #1
 8011734:	72fb      	strb	r3, [r7, #11]
          break;
 8011736:	e007      	b.n	8011748 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011738:	6839      	ldr	r1, [r7, #0]
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f000 fa28 	bl	8011b90 <USBD_CtlError>
          err++;
 8011740:	7afb      	ldrb	r3, [r7, #11]
 8011742:	3301      	adds	r3, #1
 8011744:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011746:	bf00      	nop
      }
      break;
 8011748:	e037      	b.n	80117ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	7c1b      	ldrb	r3, [r3, #16]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d109      	bne.n	8011766 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801175a:	f107 0208 	add.w	r2, r7, #8
 801175e:	4610      	mov	r0, r2
 8011760:	4798      	blx	r3
 8011762:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011764:	e029      	b.n	80117ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011766:	6839      	ldr	r1, [r7, #0]
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f000 fa11 	bl	8011b90 <USBD_CtlError>
        err++;
 801176e:	7afb      	ldrb	r3, [r7, #11]
 8011770:	3301      	adds	r3, #1
 8011772:	72fb      	strb	r3, [r7, #11]
      break;
 8011774:	e021      	b.n	80117ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	7c1b      	ldrb	r3, [r3, #16]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d10d      	bne.n	801179a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011786:	f107 0208 	add.w	r2, r7, #8
 801178a:	4610      	mov	r0, r2
 801178c:	4798      	blx	r3
 801178e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	3301      	adds	r3, #1
 8011794:	2207      	movs	r2, #7
 8011796:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011798:	e00f      	b.n	80117ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801179a:	6839      	ldr	r1, [r7, #0]
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f000 f9f7 	bl	8011b90 <USBD_CtlError>
        err++;
 80117a2:	7afb      	ldrb	r3, [r7, #11]
 80117a4:	3301      	adds	r3, #1
 80117a6:	72fb      	strb	r3, [r7, #11]
      break;
 80117a8:	e007      	b.n	80117ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80117aa:	6839      	ldr	r1, [r7, #0]
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f000 f9ef 	bl	8011b90 <USBD_CtlError>
      err++;
 80117b2:	7afb      	ldrb	r3, [r7, #11]
 80117b4:	3301      	adds	r3, #1
 80117b6:	72fb      	strb	r3, [r7, #11]
      break;
 80117b8:	bf00      	nop
  }

  if (err != 0U)
 80117ba:	7afb      	ldrb	r3, [r7, #11]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d11e      	bne.n	80117fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	88db      	ldrh	r3, [r3, #6]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d016      	beq.n	80117f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80117c8:	893b      	ldrh	r3, [r7, #8]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d00e      	beq.n	80117ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	88da      	ldrh	r2, [r3, #6]
 80117d2:	893b      	ldrh	r3, [r7, #8]
 80117d4:	4293      	cmp	r3, r2
 80117d6:	bf28      	it	cs
 80117d8:	4613      	movcs	r3, r2
 80117da:	b29b      	uxth	r3, r3
 80117dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80117de:	893b      	ldrh	r3, [r7, #8]
 80117e0:	461a      	mov	r2, r3
 80117e2:	68f9      	ldr	r1, [r7, #12]
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f000 fa44 	bl	8011c72 <USBD_CtlSendData>
 80117ea:	e009      	b.n	8011800 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80117ec:	6839      	ldr	r1, [r7, #0]
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f9ce 	bl	8011b90 <USBD_CtlError>
 80117f4:	e004      	b.n	8011800 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 fa78 	bl	8011cec <USBD_CtlSendStatus>
 80117fc:	e000      	b.n	8011800 <USBD_GetDescriptor+0x2cc>
    return;
 80117fe:	bf00      	nop
  }
}
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop

08011808 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	889b      	ldrh	r3, [r3, #4]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d131      	bne.n	801187e <USBD_SetAddress+0x76>
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	88db      	ldrh	r3, [r3, #6]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d12d      	bne.n	801187e <USBD_SetAddress+0x76>
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	885b      	ldrh	r3, [r3, #2]
 8011826:	2b7f      	cmp	r3, #127	; 0x7f
 8011828:	d829      	bhi.n	801187e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	885b      	ldrh	r3, [r3, #2]
 801182e:	b2db      	uxtb	r3, r3
 8011830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011834:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801183c:	b2db      	uxtb	r3, r3
 801183e:	2b03      	cmp	r3, #3
 8011840:	d104      	bne.n	801184c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011842:	6839      	ldr	r1, [r7, #0]
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f000 f9a3 	bl	8011b90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801184a:	e01d      	b.n	8011888 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	7bfa      	ldrb	r2, [r7, #15]
 8011850:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011854:	7bfb      	ldrb	r3, [r7, #15]
 8011856:	4619      	mov	r1, r3
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f000 fe92 	bl	8012582 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f000 fa44 	bl	8011cec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011864:	7bfb      	ldrb	r3, [r7, #15]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d004      	beq.n	8011874 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2202      	movs	r2, #2
 801186e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011872:	e009      	b.n	8011888 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2201      	movs	r2, #1
 8011878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801187c:	e004      	b.n	8011888 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801187e:	6839      	ldr	r1, [r7, #0]
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f000 f985 	bl	8011b90 <USBD_CtlError>
  }
}
 8011886:	bf00      	nop
 8011888:	bf00      	nop
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801189a:	2300      	movs	r3, #0
 801189c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	885b      	ldrh	r3, [r3, #2]
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	4b4c      	ldr	r3, [pc, #304]	; (80119d8 <USBD_SetConfig+0x148>)
 80118a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80118a8:	4b4b      	ldr	r3, [pc, #300]	; (80119d8 <USBD_SetConfig+0x148>)
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d905      	bls.n	80118bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f000 f96c 	bl	8011b90 <USBD_CtlError>
    return USBD_FAIL;
 80118b8:	2303      	movs	r3, #3
 80118ba:	e088      	b.n	80119ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	2b02      	cmp	r3, #2
 80118c6:	d002      	beq.n	80118ce <USBD_SetConfig+0x3e>
 80118c8:	2b03      	cmp	r3, #3
 80118ca:	d025      	beq.n	8011918 <USBD_SetConfig+0x88>
 80118cc:	e071      	b.n	80119b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80118ce:	4b42      	ldr	r3, [pc, #264]	; (80119d8 <USBD_SetConfig+0x148>)
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d01c      	beq.n	8011910 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80118d6:	4b40      	ldr	r3, [pc, #256]	; (80119d8 <USBD_SetConfig+0x148>)
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	461a      	mov	r2, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80118e0:	4b3d      	ldr	r3, [pc, #244]	; (80119d8 <USBD_SetConfig+0x148>)
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	4619      	mov	r1, r3
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7ff f948 	bl	8010b7c <USBD_SetClassConfig>
 80118ec:	4603      	mov	r3, r0
 80118ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80118f0:	7bfb      	ldrb	r3, [r7, #15]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d004      	beq.n	8011900 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80118f6:	6839      	ldr	r1, [r7, #0]
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 f949 	bl	8011b90 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80118fe:	e065      	b.n	80119cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f000 f9f3 	bl	8011cec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2203      	movs	r2, #3
 801190a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801190e:	e05d      	b.n	80119cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 f9eb 	bl	8011cec <USBD_CtlSendStatus>
      break;
 8011916:	e059      	b.n	80119cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011918:	4b2f      	ldr	r3, [pc, #188]	; (80119d8 <USBD_SetConfig+0x148>)
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d112      	bne.n	8011946 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2202      	movs	r2, #2
 8011924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011928:	4b2b      	ldr	r3, [pc, #172]	; (80119d8 <USBD_SetConfig+0x148>)
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	461a      	mov	r2, r3
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011932:	4b29      	ldr	r3, [pc, #164]	; (80119d8 <USBD_SetConfig+0x148>)
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	4619      	mov	r1, r3
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7ff f93b 	bl	8010bb4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 f9d4 	bl	8011cec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011944:	e042      	b.n	80119cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011946:	4b24      	ldr	r3, [pc, #144]	; (80119d8 <USBD_SetConfig+0x148>)
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	461a      	mov	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	429a      	cmp	r2, r3
 8011952:	d02a      	beq.n	80119aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	b2db      	uxtb	r3, r3
 801195a:	4619      	mov	r1, r3
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f7ff f929 	bl	8010bb4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011962:	4b1d      	ldr	r3, [pc, #116]	; (80119d8 <USBD_SetConfig+0x148>)
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	461a      	mov	r2, r3
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801196c:	4b1a      	ldr	r3, [pc, #104]	; (80119d8 <USBD_SetConfig+0x148>)
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	4619      	mov	r1, r3
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7ff f902 	bl	8010b7c <USBD_SetClassConfig>
 8011978:	4603      	mov	r3, r0
 801197a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801197c:	7bfb      	ldrb	r3, [r7, #15]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00f      	beq.n	80119a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011982:	6839      	ldr	r1, [r7, #0]
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f000 f903 	bl	8011b90 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	b2db      	uxtb	r3, r3
 8011990:	4619      	mov	r1, r3
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7ff f90e 	bl	8010bb4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2202      	movs	r2, #2
 801199c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80119a0:	e014      	b.n	80119cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 f9a2 	bl	8011cec <USBD_CtlSendStatus>
      break;
 80119a8:	e010      	b.n	80119cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f99e 	bl	8011cec <USBD_CtlSendStatus>
      break;
 80119b0:	e00c      	b.n	80119cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80119b2:	6839      	ldr	r1, [r7, #0]
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 f8eb 	bl	8011b90 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80119ba:	4b07      	ldr	r3, [pc, #28]	; (80119d8 <USBD_SetConfig+0x148>)
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	4619      	mov	r1, r3
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7ff f8f7 	bl	8010bb4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80119c6:	2303      	movs	r3, #3
 80119c8:	73fb      	strb	r3, [r7, #15]
      break;
 80119ca:	bf00      	nop
  }

  return ret;
 80119cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3710      	adds	r7, #16
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	24000784 	.word	0x24000784

080119dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	88db      	ldrh	r3, [r3, #6]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d004      	beq.n	80119f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80119ee:	6839      	ldr	r1, [r7, #0]
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f000 f8cd 	bl	8011b90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80119f6:	e023      	b.n	8011a40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	2b02      	cmp	r3, #2
 8011a02:	dc02      	bgt.n	8011a0a <USBD_GetConfig+0x2e>
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	dc03      	bgt.n	8011a10 <USBD_GetConfig+0x34>
 8011a08:	e015      	b.n	8011a36 <USBD_GetConfig+0x5a>
 8011a0a:	2b03      	cmp	r3, #3
 8011a0c:	d00b      	beq.n	8011a26 <USBD_GetConfig+0x4a>
 8011a0e:	e012      	b.n	8011a36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	3308      	adds	r3, #8
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 f927 	bl	8011c72 <USBD_CtlSendData>
        break;
 8011a24:	e00c      	b.n	8011a40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	3304      	adds	r3, #4
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 f91f 	bl	8011c72 <USBD_CtlSendData>
        break;
 8011a34:	e004      	b.n	8011a40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011a36:	6839      	ldr	r1, [r7, #0]
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f8a9 	bl	8011b90 <USBD_CtlError>
        break;
 8011a3e:	bf00      	nop
}
 8011a40:	bf00      	nop
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a58:	b2db      	uxtb	r3, r3
 8011a5a:	3b01      	subs	r3, #1
 8011a5c:	2b02      	cmp	r3, #2
 8011a5e:	d81e      	bhi.n	8011a9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	88db      	ldrh	r3, [r3, #6]
 8011a64:	2b02      	cmp	r3, #2
 8011a66:	d004      	beq.n	8011a72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011a68:	6839      	ldr	r1, [r7, #0]
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f000 f890 	bl	8011b90 <USBD_CtlError>
        break;
 8011a70:	e01a      	b.n	8011aa8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2201      	movs	r2, #1
 8011a76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d005      	beq.n	8011a8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	68db      	ldr	r3, [r3, #12]
 8011a86:	f043 0202 	orr.w	r2, r3, #2
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	330c      	adds	r3, #12
 8011a92:	2202      	movs	r2, #2
 8011a94:	4619      	mov	r1, r3
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f000 f8eb 	bl	8011c72 <USBD_CtlSendData>
      break;
 8011a9c:	e004      	b.n	8011aa8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011a9e:	6839      	ldr	r1, [r7, #0]
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 f875 	bl	8011b90 <USBD_CtlError>
      break;
 8011aa6:	bf00      	nop
  }
}
 8011aa8:	bf00      	nop
 8011aaa:	3708      	adds	r7, #8
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}

08011ab0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	885b      	ldrh	r3, [r3, #2]
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d106      	bne.n	8011ad0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f000 f90e 	bl	8011cec <USBD_CtlSendStatus>
  }
}
 8011ad0:	bf00      	nop
 8011ad2:	3708      	adds	r7, #8
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	3b01      	subs	r3, #1
 8011aec:	2b02      	cmp	r3, #2
 8011aee:	d80b      	bhi.n	8011b08 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	885b      	ldrh	r3, [r3, #2]
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d10c      	bne.n	8011b12 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2200      	movs	r2, #0
 8011afc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 f8f3 	bl	8011cec <USBD_CtlSendStatus>
      }
      break;
 8011b06:	e004      	b.n	8011b12 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011b08:	6839      	ldr	r1, [r7, #0]
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f000 f840 	bl	8011b90 <USBD_CtlError>
      break;
 8011b10:	e000      	b.n	8011b14 <USBD_ClrFeature+0x3c>
      break;
 8011b12:	bf00      	nop
  }
}
 8011b14:	bf00      	nop
 8011b16:	3708      	adds	r7, #8
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	781a      	ldrb	r2, [r3, #0]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	3301      	adds	r3, #1
 8011b36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	781a      	ldrb	r2, [r3, #0]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	3301      	adds	r3, #1
 8011b44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011b46:	68f8      	ldr	r0, [r7, #12]
 8011b48:	f7ff fabb 	bl	80110c2 <SWAPBYTE>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	461a      	mov	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	3301      	adds	r3, #1
 8011b58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f7ff faae 	bl	80110c2 <SWAPBYTE>
 8011b66:	4603      	mov	r3, r0
 8011b68:	461a      	mov	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	3301      	adds	r3, #1
 8011b72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	3301      	adds	r3, #1
 8011b78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f7ff faa1 	bl	80110c2 <SWAPBYTE>
 8011b80:	4603      	mov	r3, r0
 8011b82:	461a      	mov	r2, r3
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	80da      	strh	r2, [r3, #6]
}
 8011b88:	bf00      	nop
 8011b8a:	3710      	adds	r7, #16
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b9a:	2180      	movs	r1, #128	; 0x80
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 fc86 	bl	80124ae <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f000 fc82 	bl	80124ae <USBD_LL_StallEP>
}
 8011baa:	bf00      	nop
 8011bac:	3708      	adds	r7, #8
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}

08011bb2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011bb2:	b580      	push	{r7, lr}
 8011bb4:	b086      	sub	sp, #24
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	60f8      	str	r0, [r7, #12]
 8011bba:	60b9      	str	r1, [r7, #8]
 8011bbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d036      	beq.n	8011c36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011bcc:	6938      	ldr	r0, [r7, #16]
 8011bce:	f000 f836 	bl	8011c3e <USBD_GetLen>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	005b      	lsls	r3, r3, #1
 8011bda:	b29a      	uxth	r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011be0:	7dfb      	ldrb	r3, [r7, #23]
 8011be2:	68ba      	ldr	r2, [r7, #8]
 8011be4:	4413      	add	r3, r2
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	7812      	ldrb	r2, [r2, #0]
 8011bea:	701a      	strb	r2, [r3, #0]
  idx++;
 8011bec:	7dfb      	ldrb	r3, [r7, #23]
 8011bee:	3301      	adds	r3, #1
 8011bf0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011bf2:	7dfb      	ldrb	r3, [r7, #23]
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	2203      	movs	r2, #3
 8011bfa:	701a      	strb	r2, [r3, #0]
  idx++;
 8011bfc:	7dfb      	ldrb	r3, [r7, #23]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011c02:	e013      	b.n	8011c2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011c04:	7dfb      	ldrb	r3, [r7, #23]
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	4413      	add	r3, r2
 8011c0a:	693a      	ldr	r2, [r7, #16]
 8011c0c:	7812      	ldrb	r2, [r2, #0]
 8011c0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	3301      	adds	r3, #1
 8011c14:	613b      	str	r3, [r7, #16]
    idx++;
 8011c16:	7dfb      	ldrb	r3, [r7, #23]
 8011c18:	3301      	adds	r3, #1
 8011c1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011c1c:	7dfb      	ldrb	r3, [r7, #23]
 8011c1e:	68ba      	ldr	r2, [r7, #8]
 8011c20:	4413      	add	r3, r2
 8011c22:	2200      	movs	r2, #0
 8011c24:	701a      	strb	r2, [r3, #0]
    idx++;
 8011c26:	7dfb      	ldrb	r3, [r7, #23]
 8011c28:	3301      	adds	r3, #1
 8011c2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1e7      	bne.n	8011c04 <USBD_GetString+0x52>
 8011c34:	e000      	b.n	8011c38 <USBD_GetString+0x86>
    return;
 8011c36:	bf00      	nop
  }
}
 8011c38:	3718      	adds	r7, #24
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011c3e:	b480      	push	{r7}
 8011c40:	b085      	sub	sp, #20
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011c46:	2300      	movs	r3, #0
 8011c48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011c4e:	e005      	b.n	8011c5c <USBD_GetLen+0x1e>
  {
    len++;
 8011c50:	7bfb      	ldrb	r3, [r7, #15]
 8011c52:	3301      	adds	r3, #1
 8011c54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1f5      	bne.n	8011c50 <USBD_GetLen+0x12>
  }

  return len;
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3714      	adds	r7, #20
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c70:	4770      	bx	lr

08011c72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011c72:	b580      	push	{r7, lr}
 8011c74:	b084      	sub	sp, #16
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	60f8      	str	r0, [r7, #12]
 8011c7a:	60b9      	str	r1, [r7, #8]
 8011c7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2202      	movs	r2, #2
 8011c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	2100      	movs	r1, #0
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f000 fc91 	bl	80125c0 <USBD_LL_Transmit>

  return USBD_OK;
 8011c9e:	2300      	movs	r3, #0
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3710      	adds	r7, #16
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b084      	sub	sp, #16
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	68ba      	ldr	r2, [r7, #8]
 8011cb8:	2100      	movs	r1, #0
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f000 fc80 	bl	80125c0 <USBD_LL_Transmit>

  return USBD_OK;
 8011cc0:	2300      	movs	r3, #0
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}

08011cca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011cca:	b580      	push	{r7, lr}
 8011ccc:	b084      	sub	sp, #16
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	60f8      	str	r0, [r7, #12]
 8011cd2:	60b9      	str	r1, [r7, #8]
 8011cd4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	68ba      	ldr	r2, [r7, #8]
 8011cda:	2100      	movs	r1, #0
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f000 fc90 	bl	8012602 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011ce2:	2300      	movs	r3, #0
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3710      	adds	r7, #16
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2204      	movs	r2, #4
 8011cf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	2200      	movs	r2, #0
 8011d00:	2100      	movs	r1, #0
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 fc5c 	bl	80125c0 <USBD_LL_Transmit>

  return USBD_OK;
 8011d08:	2300      	movs	r3, #0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}

08011d12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011d12:	b580      	push	{r7, lr}
 8011d14:	b082      	sub	sp, #8
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2205      	movs	r2, #5
 8011d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d22:	2300      	movs	r3, #0
 8011d24:	2200      	movs	r2, #0
 8011d26:	2100      	movs	r1, #0
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f000 fc6a 	bl	8012602 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011d2e:	2300      	movs	r3, #0
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	3708      	adds	r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	4913      	ldr	r1, [pc, #76]	; (8011d8c <MX_USB_DEVICE_Init+0x54>)
 8011d40:	4813      	ldr	r0, [pc, #76]	; (8011d90 <MX_USB_DEVICE_Init+0x58>)
 8011d42:	f7fe fead 	bl	8010aa0 <USBD_Init>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d001      	beq.n	8011d50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011d4c:	f7ef fa08 	bl	8001160 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8011d50:	4910      	ldr	r1, [pc, #64]	; (8011d94 <MX_USB_DEVICE_Init+0x5c>)
 8011d52:	480f      	ldr	r0, [pc, #60]	; (8011d90 <MX_USB_DEVICE_Init+0x58>)
 8011d54:	f7fe fed4 	bl	8010b00 <USBD_RegisterClass>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d001      	beq.n	8011d62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011d5e:	f7ef f9ff 	bl	8001160 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8011d62:	490d      	ldr	r1, [pc, #52]	; (8011d98 <MX_USB_DEVICE_Init+0x60>)
 8011d64:	480a      	ldr	r0, [pc, #40]	; (8011d90 <MX_USB_DEVICE_Init+0x58>)
 8011d66:	f7fd f947 	bl	800eff8 <USBD_MSC_RegisterStorage>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d001      	beq.n	8011d74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011d70:	f7ef f9f6 	bl	8001160 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011d74:	4806      	ldr	r0, [pc, #24]	; (8011d90 <MX_USB_DEVICE_Init+0x58>)
 8011d76:	f7fe feea 	bl	8010b4e <USBD_Start>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d001      	beq.n	8011d84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011d80:	f7ef f9ee 	bl	8001160 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011d84:	f7f5 f822 	bl	8006dcc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011d88:	bf00      	nop
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	24000188 	.word	0x24000188
 8011d90:	24001cc8 	.word	0x24001cc8
 8011d94:	240000a0 	.word	0x240000a0
 8011d98:	240001d8 	.word	0x240001d8

08011d9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	4603      	mov	r3, r0
 8011da4:	6039      	str	r1, [r7, #0]
 8011da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	2212      	movs	r2, #18
 8011dac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011dae:	4b03      	ldr	r3, [pc, #12]	; (8011dbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	240001a4 	.word	0x240001a4

08011dc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	6039      	str	r1, [r7, #0]
 8011dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	2204      	movs	r2, #4
 8011dd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011dd2:	4b03      	ldr	r3, [pc, #12]	; (8011de0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr
 8011de0:	240001b8 	.word	0x240001b8

08011de4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	4603      	mov	r3, r0
 8011dec:	6039      	str	r1, [r7, #0]
 8011dee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011df0:	79fb      	ldrb	r3, [r7, #7]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d105      	bne.n	8011e02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	4907      	ldr	r1, [pc, #28]	; (8011e18 <USBD_FS_ProductStrDescriptor+0x34>)
 8011dfa:	4808      	ldr	r0, [pc, #32]	; (8011e1c <USBD_FS_ProductStrDescriptor+0x38>)
 8011dfc:	f7ff fed9 	bl	8011bb2 <USBD_GetString>
 8011e00:	e004      	b.n	8011e0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011e02:	683a      	ldr	r2, [r7, #0]
 8011e04:	4904      	ldr	r1, [pc, #16]	; (8011e18 <USBD_FS_ProductStrDescriptor+0x34>)
 8011e06:	4805      	ldr	r0, [pc, #20]	; (8011e1c <USBD_FS_ProductStrDescriptor+0x38>)
 8011e08:	f7ff fed3 	bl	8011bb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e0c:	4b02      	ldr	r3, [pc, #8]	; (8011e18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3708      	adds	r7, #8
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	24001f98 	.word	0x24001f98
 8011e1c:	08013038 	.word	0x08013038

08011e20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	4603      	mov	r3, r0
 8011e28:	6039      	str	r1, [r7, #0]
 8011e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011e2c:	683a      	ldr	r2, [r7, #0]
 8011e2e:	4904      	ldr	r1, [pc, #16]	; (8011e40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011e30:	4804      	ldr	r0, [pc, #16]	; (8011e44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011e32:	f7ff febe 	bl	8011bb2 <USBD_GetString>
  return USBD_StrDesc;
 8011e36:	4b02      	ldr	r3, [pc, #8]	; (8011e40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3708      	adds	r7, #8
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	24001f98 	.word	0x24001f98
 8011e44:	0801304c 	.word	0x0801304c

08011e48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	4603      	mov	r3, r0
 8011e50:	6039      	str	r1, [r7, #0]
 8011e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	221a      	movs	r2, #26
 8011e58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011e5a:	f000 f843 	bl	8011ee4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011e5e:	4b02      	ldr	r3, [pc, #8]	; (8011e68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3708      	adds	r7, #8
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	240001bc 	.word	0x240001bc

08011e6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	4603      	mov	r3, r0
 8011e74:	6039      	str	r1, [r7, #0]
 8011e76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011e78:	79fb      	ldrb	r3, [r7, #7]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d105      	bne.n	8011e8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011e7e:	683a      	ldr	r2, [r7, #0]
 8011e80:	4907      	ldr	r1, [pc, #28]	; (8011ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011e82:	4808      	ldr	r0, [pc, #32]	; (8011ea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011e84:	f7ff fe95 	bl	8011bb2 <USBD_GetString>
 8011e88:	e004      	b.n	8011e94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011e8a:	683a      	ldr	r2, [r7, #0]
 8011e8c:	4904      	ldr	r1, [pc, #16]	; (8011ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011e8e:	4805      	ldr	r0, [pc, #20]	; (8011ea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011e90:	f7ff fe8f 	bl	8011bb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e94:	4b02      	ldr	r3, [pc, #8]	; (8011ea0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3708      	adds	r7, #8
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	24001f98 	.word	0x24001f98
 8011ea4:	08013060 	.word	0x08013060

08011ea8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	4603      	mov	r3, r0
 8011eb0:	6039      	str	r1, [r7, #0]
 8011eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011eb4:	79fb      	ldrb	r3, [r7, #7]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d105      	bne.n	8011ec6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011eba:	683a      	ldr	r2, [r7, #0]
 8011ebc:	4907      	ldr	r1, [pc, #28]	; (8011edc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ebe:	4808      	ldr	r0, [pc, #32]	; (8011ee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ec0:	f7ff fe77 	bl	8011bb2 <USBD_GetString>
 8011ec4:	e004      	b.n	8011ed0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	4904      	ldr	r1, [pc, #16]	; (8011edc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011eca:	4805      	ldr	r0, [pc, #20]	; (8011ee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ecc:	f7ff fe71 	bl	8011bb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ed0:	4b02      	ldr	r3, [pc, #8]	; (8011edc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3708      	adds	r7, #8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	24001f98 	.word	0x24001f98
 8011ee0:	0801306c 	.word	0x0801306c

08011ee4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011eea:	4b0f      	ldr	r3, [pc, #60]	; (8011f28 <Get_SerialNum+0x44>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011ef0:	4b0e      	ldr	r3, [pc, #56]	; (8011f2c <Get_SerialNum+0x48>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011ef6:	4b0e      	ldr	r3, [pc, #56]	; (8011f30 <Get_SerialNum+0x4c>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	4413      	add	r3, r2
 8011f02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d009      	beq.n	8011f1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011f0a:	2208      	movs	r2, #8
 8011f0c:	4909      	ldr	r1, [pc, #36]	; (8011f34 <Get_SerialNum+0x50>)
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f000 f814 	bl	8011f3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011f14:	2204      	movs	r2, #4
 8011f16:	4908      	ldr	r1, [pc, #32]	; (8011f38 <Get_SerialNum+0x54>)
 8011f18:	68b8      	ldr	r0, [r7, #8]
 8011f1a:	f000 f80f 	bl	8011f3c <IntToUnicode>
  }
}
 8011f1e:	bf00      	nop
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	1ff1e800 	.word	0x1ff1e800
 8011f2c:	1ff1e804 	.word	0x1ff1e804
 8011f30:	1ff1e808 	.word	0x1ff1e808
 8011f34:	240001be 	.word	0x240001be
 8011f38:	240001ce 	.word	0x240001ce

08011f3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b087      	sub	sp, #28
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	4613      	mov	r3, r2
 8011f48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011f4e:	2300      	movs	r3, #0
 8011f50:	75fb      	strb	r3, [r7, #23]
 8011f52:	e027      	b.n	8011fa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	0f1b      	lsrs	r3, r3, #28
 8011f58:	2b09      	cmp	r3, #9
 8011f5a:	d80b      	bhi.n	8011f74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	0f1b      	lsrs	r3, r3, #28
 8011f60:	b2da      	uxtb	r2, r3
 8011f62:	7dfb      	ldrb	r3, [r7, #23]
 8011f64:	005b      	lsls	r3, r3, #1
 8011f66:	4619      	mov	r1, r3
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	440b      	add	r3, r1
 8011f6c:	3230      	adds	r2, #48	; 0x30
 8011f6e:	b2d2      	uxtb	r2, r2
 8011f70:	701a      	strb	r2, [r3, #0]
 8011f72:	e00a      	b.n	8011f8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	0f1b      	lsrs	r3, r3, #28
 8011f78:	b2da      	uxtb	r2, r3
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	005b      	lsls	r3, r3, #1
 8011f7e:	4619      	mov	r1, r3
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	440b      	add	r3, r1
 8011f84:	3237      	adds	r2, #55	; 0x37
 8011f86:	b2d2      	uxtb	r2, r2
 8011f88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	011b      	lsls	r3, r3, #4
 8011f8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011f90:	7dfb      	ldrb	r3, [r7, #23]
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	3301      	adds	r3, #1
 8011f96:	68ba      	ldr	r2, [r7, #8]
 8011f98:	4413      	add	r3, r2
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011f9e:	7dfb      	ldrb	r3, [r7, #23]
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	75fb      	strb	r3, [r7, #23]
 8011fa4:	7dfa      	ldrb	r2, [r7, #23]
 8011fa6:	79fb      	ldrb	r3, [r7, #7]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d3d3      	bcc.n	8011f54 <IntToUnicode+0x18>
  }
}
 8011fac:	bf00      	nop
 8011fae:	bf00      	nop
 8011fb0:	371c      	adds	r7, #28
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr

08011fba <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8011fba:	b480      	push	{r7}
 8011fbc:	b083      	sub	sp, #12
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8011fc4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	370c      	adds	r7, #12
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr

08011fd2 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8011fd2:	b480      	push	{r7}
 8011fd4:	b085      	sub	sp, #20
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	4603      	mov	r3, r0
 8011fda:	60b9      	str	r1, [r7, #8]
 8011fdc:	607a      	str	r2, [r7, #4]
 8011fde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011fe6:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fee:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8011ff0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3714      	adds	r7, #20
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr

08011ffe <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8011ffe:	b480      	push	{r7}
 8012000:	b083      	sub	sp, #12
 8012002:	af00      	add	r7, sp, #0
 8012004:	4603      	mov	r3, r0
 8012006:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012008:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801200a:	4618      	mov	r0, r3
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr

08012016 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8012016:	b480      	push	{r7}
 8012018:	b083      	sub	sp, #12
 801201a:	af00      	add	r7, sp, #0
 801201c:	4603      	mov	r3, r0
 801201e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8012020:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012022:	4618      	mov	r0, r3
 8012024:	370c      	adds	r7, #12
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr

0801202e <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801202e:	b480      	push	{r7}
 8012030:	b085      	sub	sp, #20
 8012032:	af00      	add	r7, sp, #0
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
 8012038:	461a      	mov	r2, r3
 801203a:	4603      	mov	r3, r0
 801203c:	73fb      	strb	r3, [r7, #15]
 801203e:	4613      	mov	r3, r2
 8012040:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8012042:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012044:	4618      	mov	r0, r3
 8012046:	3714      	adds	r7, #20
 8012048:	46bd      	mov	sp, r7
 801204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204e:	4770      	bx	lr

08012050 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
 8012056:	60b9      	str	r1, [r7, #8]
 8012058:	607a      	str	r2, [r7, #4]
 801205a:	461a      	mov	r2, r3
 801205c:	4603      	mov	r3, r0
 801205e:	73fb      	strb	r3, [r7, #15]
 8012060:	4613      	mov	r3, r2
 8012062:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8012064:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8012066:	4618      	mov	r0, r3
 8012068:	3714      	adds	r7, #20
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr

08012072 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8012072:	b480      	push	{r7}
 8012074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8012076:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012078:	4618      	mov	r0, r3
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr
	...

08012084 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b08a      	sub	sp, #40	; 0x28
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801208c:	f107 0314 	add.w	r3, r7, #20
 8012090:	2200      	movs	r2, #0
 8012092:	601a      	str	r2, [r3, #0]
 8012094:	605a      	str	r2, [r3, #4]
 8012096:	609a      	str	r2, [r3, #8]
 8012098:	60da      	str	r2, [r3, #12]
 801209a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4a1f      	ldr	r2, [pc, #124]	; (8012120 <HAL_PCD_MspInit+0x9c>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d138      	bne.n	8012118 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80120a6:	f7f4 fe91 	bl	8006dcc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80120aa:	4b1e      	ldr	r3, [pc, #120]	; (8012124 <HAL_PCD_MspInit+0xa0>)
 80120ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120b0:	4a1c      	ldr	r2, [pc, #112]	; (8012124 <HAL_PCD_MspInit+0xa0>)
 80120b2:	f043 0301 	orr.w	r3, r3, #1
 80120b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80120ba:	4b1a      	ldr	r3, [pc, #104]	; (8012124 <HAL_PCD_MspInit+0xa0>)
 80120bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120c0:	f003 0301 	and.w	r3, r3, #1
 80120c4:	613b      	str	r3, [r7, #16]
 80120c6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80120c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80120cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120ce:	2302      	movs	r3, #2
 80120d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120d2:	2300      	movs	r3, #0
 80120d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80120d6:	2300      	movs	r3, #0
 80120d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80120da:	230a      	movs	r3, #10
 80120dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80120de:	f107 0314 	add.w	r3, r7, #20
 80120e2:	4619      	mov	r1, r3
 80120e4:	4810      	ldr	r0, [pc, #64]	; (8012128 <HAL_PCD_MspInit+0xa4>)
 80120e6:	f7f3 fa4d 	bl	8005584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80120ea:	4b0e      	ldr	r3, [pc, #56]	; (8012124 <HAL_PCD_MspInit+0xa0>)
 80120ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80120f0:	4a0c      	ldr	r2, [pc, #48]	; (8012124 <HAL_PCD_MspInit+0xa0>)
 80120f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80120f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80120fa:	4b0a      	ldr	r3, [pc, #40]	; (8012124 <HAL_PCD_MspInit+0xa0>)
 80120fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012104:	60fb      	str	r3, [r7, #12]
 8012106:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8012108:	2200      	movs	r2, #0
 801210a:	2101      	movs	r1, #1
 801210c:	2065      	movs	r0, #101	; 0x65
 801210e:	f7f3 f8b2 	bl	8005276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012112:	2065      	movs	r0, #101	; 0x65
 8012114:	f7f3 f8c9 	bl	80052aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012118:	bf00      	nop
 801211a:	3728      	adds	r7, #40	; 0x28
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	40080000 	.word	0x40080000
 8012124:	58024400 	.word	0x58024400
 8012128:	58020000 	.word	0x58020000

0801212c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012140:	4619      	mov	r1, r3
 8012142:	4610      	mov	r0, r2
 8012144:	f7fe fd4e 	bl	8010be4 <USBD_LL_SetupStage>
}
 8012148:	bf00      	nop
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	460b      	mov	r3, r1
 801215a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012162:	78fa      	ldrb	r2, [r7, #3]
 8012164:	6879      	ldr	r1, [r7, #4]
 8012166:	4613      	mov	r3, r2
 8012168:	00db      	lsls	r3, r3, #3
 801216a:	1a9b      	subs	r3, r3, r2
 801216c:	009b      	lsls	r3, r3, #2
 801216e:	440b      	add	r3, r1
 8012170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	78fb      	ldrb	r3, [r7, #3]
 8012178:	4619      	mov	r1, r3
 801217a:	f7fe fd88 	bl	8010c8e <USBD_LL_DataOutStage>
}
 801217e:	bf00      	nop
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}

08012186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012186:	b580      	push	{r7, lr}
 8012188:	b082      	sub	sp, #8
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
 801218e:	460b      	mov	r3, r1
 8012190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012198:	78fa      	ldrb	r2, [r7, #3]
 801219a:	6879      	ldr	r1, [r7, #4]
 801219c:	4613      	mov	r3, r2
 801219e:	00db      	lsls	r3, r3, #3
 80121a0:	1a9b      	subs	r3, r3, r2
 80121a2:	009b      	lsls	r3, r3, #2
 80121a4:	440b      	add	r3, r1
 80121a6:	3348      	adds	r3, #72	; 0x48
 80121a8:	681a      	ldr	r2, [r3, #0]
 80121aa:	78fb      	ldrb	r3, [r7, #3]
 80121ac:	4619      	mov	r1, r3
 80121ae:	f7fe fdd1 	bl	8010d54 <USBD_LL_DataInStage>
}
 80121b2:	bf00      	nop
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121ba:	b580      	push	{r7, lr}
 80121bc:	b082      	sub	sp, #8
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7fe fee5 	bl	8010f98 <USBD_LL_SOF>
}
 80121ce:	bf00      	nop
 80121d0:	3708      	adds	r7, #8
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}

080121d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121d6:	b580      	push	{r7, lr}
 80121d8:	b084      	sub	sp, #16
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80121de:	2301      	movs	r3, #1
 80121e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d102      	bne.n	80121f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80121ea:	2300      	movs	r3, #0
 80121ec:	73fb      	strb	r3, [r7, #15]
 80121ee:	e008      	b.n	8012202 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d102      	bne.n	80121fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80121f8:	2301      	movs	r3, #1
 80121fa:	73fb      	strb	r3, [r7, #15]
 80121fc:	e001      	b.n	8012202 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80121fe:	f7ee ffaf 	bl	8001160 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012208:	7bfa      	ldrb	r2, [r7, #15]
 801220a:	4611      	mov	r1, r2
 801220c:	4618      	mov	r0, r3
 801220e:	f7fe fe85 	bl	8010f1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012218:	4618      	mov	r0, r3
 801221a:	f7fe fe31 	bl	8010e80 <USBD_LL_Reset>
}
 801221e:	bf00      	nop
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
	...

08012228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012236:	4618      	mov	r0, r3
 8012238:	f7fe fe80 	bl	8010f3c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	6812      	ldr	r2, [r2, #0]
 801224a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801224e:	f043 0301 	orr.w	r3, r3, #1
 8012252:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6a1b      	ldr	r3, [r3, #32]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d005      	beq.n	8012268 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801225c:	4b04      	ldr	r3, [pc, #16]	; (8012270 <HAL_PCD_SuspendCallback+0x48>)
 801225e:	691b      	ldr	r3, [r3, #16]
 8012260:	4a03      	ldr	r2, [pc, #12]	; (8012270 <HAL_PCD_SuspendCallback+0x48>)
 8012262:	f043 0306 	orr.w	r3, r3, #6
 8012266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012268:	bf00      	nop
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	e000ed00 	.word	0xe000ed00

08012274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012282:	4618      	mov	r0, r3
 8012284:	f7fe fe70 	bl	8010f68 <USBD_LL_Resume>
}
 8012288:	bf00      	nop
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	460b      	mov	r3, r1
 801229a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122a2:	78fa      	ldrb	r2, [r7, #3]
 80122a4:	4611      	mov	r1, r2
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7fe febe 	bl	8011028 <USBD_LL_IsoOUTIncomplete>
}
 80122ac:	bf00      	nop
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	460b      	mov	r3, r1
 80122be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122c6:	78fa      	ldrb	r2, [r7, #3]
 80122c8:	4611      	mov	r1, r2
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fe fe86 	bl	8010fdc <USBD_LL_IsoINIncomplete>
}
 80122d0:	bf00      	nop
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}

080122d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7fe fec4 	bl	8011074 <USBD_LL_DevConnected>
}
 80122ec:	bf00      	nop
 80122ee:	3708      	adds	r7, #8
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012302:	4618      	mov	r0, r3
 8012304:	f7fe fec1 	bl	801108a <USBD_LL_DevDisconnected>
}
 8012308:	bf00      	nop
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d13e      	bne.n	801239e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012320:	4a21      	ldr	r2, [pc, #132]	; (80123a8 <USBD_LL_Init+0x98>)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4a1f      	ldr	r2, [pc, #124]	; (80123a8 <USBD_LL_Init+0x98>)
 801232c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012330:	4b1d      	ldr	r3, [pc, #116]	; (80123a8 <USBD_LL_Init+0x98>)
 8012332:	4a1e      	ldr	r2, [pc, #120]	; (80123ac <USBD_LL_Init+0x9c>)
 8012334:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012336:	4b1c      	ldr	r3, [pc, #112]	; (80123a8 <USBD_LL_Init+0x98>)
 8012338:	2209      	movs	r2, #9
 801233a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801233c:	4b1a      	ldr	r3, [pc, #104]	; (80123a8 <USBD_LL_Init+0x98>)
 801233e:	2202      	movs	r2, #2
 8012340:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 8012342:	4b19      	ldr	r3, [pc, #100]	; (80123a8 <USBD_LL_Init+0x98>)
 8012344:	2201      	movs	r2, #1
 8012346:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012348:	4b17      	ldr	r3, [pc, #92]	; (80123a8 <USBD_LL_Init+0x98>)
 801234a:	2202      	movs	r2, #2
 801234c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801234e:	4b16      	ldr	r3, [pc, #88]	; (80123a8 <USBD_LL_Init+0x98>)
 8012350:	2200      	movs	r2, #0
 8012352:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012354:	4b14      	ldr	r3, [pc, #80]	; (80123a8 <USBD_LL_Init+0x98>)
 8012356:	2200      	movs	r2, #0
 8012358:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801235a:	4b13      	ldr	r3, [pc, #76]	; (80123a8 <USBD_LL_Init+0x98>)
 801235c:	2200      	movs	r2, #0
 801235e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012360:	4b11      	ldr	r3, [pc, #68]	; (80123a8 <USBD_LL_Init+0x98>)
 8012362:	2200      	movs	r2, #0
 8012364:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012366:	4b10      	ldr	r3, [pc, #64]	; (80123a8 <USBD_LL_Init+0x98>)
 8012368:	2200      	movs	r2, #0
 801236a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801236c:	4b0e      	ldr	r3, [pc, #56]	; (80123a8 <USBD_LL_Init+0x98>)
 801236e:	2200      	movs	r2, #0
 8012370:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012372:	480d      	ldr	r0, [pc, #52]	; (80123a8 <USBD_LL_Init+0x98>)
 8012374:	f7f3 fae7 	bl	8005946 <HAL_PCD_Init>
 8012378:	4603      	mov	r3, r0
 801237a:	2b00      	cmp	r3, #0
 801237c:	d001      	beq.n	8012382 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801237e:	f7ee feef 	bl	8001160 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012382:	2180      	movs	r1, #128	; 0x80
 8012384:	4808      	ldr	r0, [pc, #32]	; (80123a8 <USBD_LL_Init+0x98>)
 8012386:	f7f4 fca6 	bl	8006cd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801238a:	2240      	movs	r2, #64	; 0x40
 801238c:	2100      	movs	r1, #0
 801238e:	4806      	ldr	r0, [pc, #24]	; (80123a8 <USBD_LL_Init+0x98>)
 8012390:	f7f4 fc5a 	bl	8006c48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012394:	2280      	movs	r2, #128	; 0x80
 8012396:	2101      	movs	r1, #1
 8012398:	4803      	ldr	r0, [pc, #12]	; (80123a8 <USBD_LL_Init+0x98>)
 801239a:	f7f4 fc55 	bl	8006c48 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801239e:	2300      	movs	r3, #0
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3708      	adds	r7, #8
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	24002198 	.word	0x24002198
 80123ac:	40080000 	.word	0x40080000

080123b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123b8:	2300      	movs	r3, #0
 80123ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123bc:	2300      	movs	r3, #0
 80123be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7f3 fbe1 	bl	8005b8e <HAL_PCD_Start>
 80123cc:	4603      	mov	r3, r0
 80123ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123d0:	7bfb      	ldrb	r3, [r7, #15]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f000 f962 	bl	801269c <USBD_Get_USB_Status>
 80123d8:	4603      	mov	r3, r0
 80123da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b084      	sub	sp, #16
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
 80123ee:	4608      	mov	r0, r1
 80123f0:	4611      	mov	r1, r2
 80123f2:	461a      	mov	r2, r3
 80123f4:	4603      	mov	r3, r0
 80123f6:	70fb      	strb	r3, [r7, #3]
 80123f8:	460b      	mov	r3, r1
 80123fa:	70bb      	strb	r3, [r7, #2]
 80123fc:	4613      	mov	r3, r2
 80123fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012400:	2300      	movs	r3, #0
 8012402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012404:	2300      	movs	r3, #0
 8012406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801240e:	78bb      	ldrb	r3, [r7, #2]
 8012410:	883a      	ldrh	r2, [r7, #0]
 8012412:	78f9      	ldrb	r1, [r7, #3]
 8012414:	f7f3 fff2 	bl	80063fc <HAL_PCD_EP_Open>
 8012418:	4603      	mov	r3, r0
 801241a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801241c:	7bfb      	ldrb	r3, [r7, #15]
 801241e:	4618      	mov	r0, r3
 8012420:	f000 f93c 	bl	801269c <USBD_Get_USB_Status>
 8012424:	4603      	mov	r3, r0
 8012426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012428:	7bbb      	ldrb	r3, [r7, #14]
}
 801242a:	4618      	mov	r0, r3
 801242c:	3710      	adds	r7, #16
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b084      	sub	sp, #16
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
 801243a:	460b      	mov	r3, r1
 801243c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801243e:	2300      	movs	r3, #0
 8012440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012442:	2300      	movs	r3, #0
 8012444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801244c:	78fa      	ldrb	r2, [r7, #3]
 801244e:	4611      	mov	r1, r2
 8012450:	4618      	mov	r0, r3
 8012452:	f7f4 f83b 	bl	80064cc <HAL_PCD_EP_Close>
 8012456:	4603      	mov	r3, r0
 8012458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801245a:	7bfb      	ldrb	r3, [r7, #15]
 801245c:	4618      	mov	r0, r3
 801245e:	f000 f91d 	bl	801269c <USBD_Get_USB_Status>
 8012462:	4603      	mov	r3, r0
 8012464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012466:	7bbb      	ldrb	r3, [r7, #14]
}
 8012468:	4618      	mov	r0, r3
 801246a:	3710      	adds	r7, #16
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	460b      	mov	r3, r1
 801247a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801247c:	2300      	movs	r3, #0
 801247e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012480:	2300      	movs	r3, #0
 8012482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801248a:	78fa      	ldrb	r2, [r7, #3]
 801248c:	4611      	mov	r1, r2
 801248e:	4618      	mov	r0, r3
 8012490:	f7f4 f9cd 	bl	800682e <HAL_PCD_EP_Flush>
 8012494:	4603      	mov	r3, r0
 8012496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012498:	7bfb      	ldrb	r3, [r7, #15]
 801249a:	4618      	mov	r0, r3
 801249c:	f000 f8fe 	bl	801269c <USBD_Get_USB_Status>
 80124a0:	4603      	mov	r3, r0
 80124a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b084      	sub	sp, #16
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
 80124b6:	460b      	mov	r3, r1
 80124b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124ba:	2300      	movs	r3, #0
 80124bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124be:	2300      	movs	r3, #0
 80124c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80124c8:	78fa      	ldrb	r2, [r7, #3]
 80124ca:	4611      	mov	r1, r2
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7f4 f8f4 	bl	80066ba <HAL_PCD_EP_SetStall>
 80124d2:	4603      	mov	r3, r0
 80124d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124d6:	7bfb      	ldrb	r3, [r7, #15]
 80124d8:	4618      	mov	r0, r3
 80124da:	f000 f8df 	bl	801269c <USBD_Get_USB_Status>
 80124de:	4603      	mov	r3, r0
 80124e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	460b      	mov	r3, r1
 80124f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124f8:	2300      	movs	r3, #0
 80124fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124fc:	2300      	movs	r3, #0
 80124fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012506:	78fa      	ldrb	r2, [r7, #3]
 8012508:	4611      	mov	r1, r2
 801250a:	4618      	mov	r0, r3
 801250c:	f7f4 f939 	bl	8006782 <HAL_PCD_EP_ClrStall>
 8012510:	4603      	mov	r3, r0
 8012512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012514:	7bfb      	ldrb	r3, [r7, #15]
 8012516:	4618      	mov	r0, r3
 8012518:	f000 f8c0 	bl	801269c <USBD_Get_USB_Status>
 801251c:	4603      	mov	r3, r0
 801251e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012520:	7bbb      	ldrb	r3, [r7, #14]
}
 8012522:	4618      	mov	r0, r3
 8012524:	3710      	adds	r7, #16
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801252a:	b480      	push	{r7}
 801252c:	b085      	sub	sp, #20
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
 8012532:	460b      	mov	r3, r1
 8012534:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801253c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801253e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012542:	2b00      	cmp	r3, #0
 8012544:	da0b      	bge.n	801255e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012546:	78fb      	ldrb	r3, [r7, #3]
 8012548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801254c:	68f9      	ldr	r1, [r7, #12]
 801254e:	4613      	mov	r3, r2
 8012550:	00db      	lsls	r3, r3, #3
 8012552:	1a9b      	subs	r3, r3, r2
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	440b      	add	r3, r1
 8012558:	333e      	adds	r3, #62	; 0x3e
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	e00b      	b.n	8012576 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801255e:	78fb      	ldrb	r3, [r7, #3]
 8012560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012564:	68f9      	ldr	r1, [r7, #12]
 8012566:	4613      	mov	r3, r2
 8012568:	00db      	lsls	r3, r3, #3
 801256a:	1a9b      	subs	r3, r3, r2
 801256c:	009b      	lsls	r3, r3, #2
 801256e:	440b      	add	r3, r1
 8012570:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012574:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012576:	4618      	mov	r0, r3
 8012578:	3714      	adds	r7, #20
 801257a:	46bd      	mov	sp, r7
 801257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012580:	4770      	bx	lr

08012582 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012582:	b580      	push	{r7, lr}
 8012584:	b084      	sub	sp, #16
 8012586:	af00      	add	r7, sp, #0
 8012588:	6078      	str	r0, [r7, #4]
 801258a:	460b      	mov	r3, r1
 801258c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801258e:	2300      	movs	r3, #0
 8012590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012592:	2300      	movs	r3, #0
 8012594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801259c:	78fa      	ldrb	r2, [r7, #3]
 801259e:	4611      	mov	r1, r2
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7f3 ff06 	bl	80063b2 <HAL_PCD_SetAddress>
 80125a6:	4603      	mov	r3, r0
 80125a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125aa:	7bfb      	ldrb	r3, [r7, #15]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f000 f875 	bl	801269c <USBD_Get_USB_Status>
 80125b2:	4603      	mov	r3, r0
 80125b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b086      	sub	sp, #24
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	607a      	str	r2, [r7, #4]
 80125ca:	603b      	str	r3, [r7, #0]
 80125cc:	460b      	mov	r3, r1
 80125ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125d0:	2300      	movs	r3, #0
 80125d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125d4:	2300      	movs	r3, #0
 80125d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80125de:	7af9      	ldrb	r1, [r7, #11]
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	f7f4 f81f 	bl	8006626 <HAL_PCD_EP_Transmit>
 80125e8:	4603      	mov	r3, r0
 80125ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125ec:	7dfb      	ldrb	r3, [r7, #23]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f000 f854 	bl	801269c <USBD_Get_USB_Status>
 80125f4:	4603      	mov	r3, r0
 80125f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80125f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3718      	adds	r7, #24
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012602:	b580      	push	{r7, lr}
 8012604:	b086      	sub	sp, #24
 8012606:	af00      	add	r7, sp, #0
 8012608:	60f8      	str	r0, [r7, #12]
 801260a:	607a      	str	r2, [r7, #4]
 801260c:	603b      	str	r3, [r7, #0]
 801260e:	460b      	mov	r3, r1
 8012610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012612:	2300      	movs	r3, #0
 8012614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012616:	2300      	movs	r3, #0
 8012618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012620:	7af9      	ldrb	r1, [r7, #11]
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	f7f3 ff9b 	bl	8006560 <HAL_PCD_EP_Receive>
 801262a:	4603      	mov	r3, r0
 801262c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801262e:	7dfb      	ldrb	r3, [r7, #23]
 8012630:	4618      	mov	r0, r3
 8012632:	f000 f833 	bl	801269c <USBD_Get_USB_Status>
 8012636:	4603      	mov	r3, r0
 8012638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801263a:	7dbb      	ldrb	r3, [r7, #22]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3718      	adds	r7, #24
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	460b      	mov	r3, r1
 801264e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012656:	78fa      	ldrb	r2, [r7, #3]
 8012658:	4611      	mov	r1, r2
 801265a:	4618      	mov	r0, r3
 801265c:	f7f3 ffcb 	bl	80065f6 <HAL_PCD_EP_GetRxCount>
 8012660:	4603      	mov	r3, r0
}
 8012662:	4618      	mov	r0, r3
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
	...

0801266c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801266c:	b480      	push	{r7}
 801266e:	b083      	sub	sp, #12
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012674:	4b03      	ldr	r3, [pc, #12]	; (8012684 <USBD_static_malloc+0x18>)
}
 8012676:	4618      	mov	r0, r3
 8012678:	370c      	adds	r7, #12
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr
 8012682:	bf00      	nop
 8012684:	24000788 	.word	0x24000788

08012688 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]

}
 8012690:	bf00      	nop
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr

0801269c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	4603      	mov	r3, r0
 80126a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126a6:	2300      	movs	r3, #0
 80126a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80126aa:	79fb      	ldrb	r3, [r7, #7]
 80126ac:	2b03      	cmp	r3, #3
 80126ae:	d817      	bhi.n	80126e0 <USBD_Get_USB_Status+0x44>
 80126b0:	a201      	add	r2, pc, #4	; (adr r2, 80126b8 <USBD_Get_USB_Status+0x1c>)
 80126b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b6:	bf00      	nop
 80126b8:	080126c9 	.word	0x080126c9
 80126bc:	080126cf 	.word	0x080126cf
 80126c0:	080126d5 	.word	0x080126d5
 80126c4:	080126db 	.word	0x080126db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80126c8:	2300      	movs	r3, #0
 80126ca:	73fb      	strb	r3, [r7, #15]
    break;
 80126cc:	e00b      	b.n	80126e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80126ce:	2303      	movs	r3, #3
 80126d0:	73fb      	strb	r3, [r7, #15]
    break;
 80126d2:	e008      	b.n	80126e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80126d4:	2301      	movs	r3, #1
 80126d6:	73fb      	strb	r3, [r7, #15]
    break;
 80126d8:	e005      	b.n	80126e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80126da:	2303      	movs	r3, #3
 80126dc:	73fb      	strb	r3, [r7, #15]
    break;
 80126de:	e002      	b.n	80126e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80126e0:	2303      	movs	r3, #3
 80126e2:	73fb      	strb	r3, [r7, #15]
    break;
 80126e4:	bf00      	nop
  }
  return usb_status;
 80126e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3714      	adds	r7, #20
 80126ec:	46bd      	mov	sp, r7
 80126ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f2:	4770      	bx	lr

080126f4 <__errno>:
 80126f4:	4b01      	ldr	r3, [pc, #4]	; (80126fc <__errno+0x8>)
 80126f6:	6818      	ldr	r0, [r3, #0]
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop
 80126fc:	240001f8 	.word	0x240001f8

08012700 <__libc_init_array>:
 8012700:	b570      	push	{r4, r5, r6, lr}
 8012702:	4d0d      	ldr	r5, [pc, #52]	; (8012738 <__libc_init_array+0x38>)
 8012704:	4c0d      	ldr	r4, [pc, #52]	; (801273c <__libc_init_array+0x3c>)
 8012706:	1b64      	subs	r4, r4, r5
 8012708:	10a4      	asrs	r4, r4, #2
 801270a:	2600      	movs	r6, #0
 801270c:	42a6      	cmp	r6, r4
 801270e:	d109      	bne.n	8012724 <__libc_init_array+0x24>
 8012710:	4d0b      	ldr	r5, [pc, #44]	; (8012740 <__libc_init_array+0x40>)
 8012712:	4c0c      	ldr	r4, [pc, #48]	; (8012744 <__libc_init_array+0x44>)
 8012714:	f000 fc4e 	bl	8012fb4 <_init>
 8012718:	1b64      	subs	r4, r4, r5
 801271a:	10a4      	asrs	r4, r4, #2
 801271c:	2600      	movs	r6, #0
 801271e:	42a6      	cmp	r6, r4
 8012720:	d105      	bne.n	801272e <__libc_init_array+0x2e>
 8012722:	bd70      	pop	{r4, r5, r6, pc}
 8012724:	f855 3b04 	ldr.w	r3, [r5], #4
 8012728:	4798      	blx	r3
 801272a:	3601      	adds	r6, #1
 801272c:	e7ee      	b.n	801270c <__libc_init_array+0xc>
 801272e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012732:	4798      	blx	r3
 8012734:	3601      	adds	r6, #1
 8012736:	e7f2      	b.n	801271e <__libc_init_array+0x1e>
 8012738:	0801e3bc 	.word	0x0801e3bc
 801273c:	0801e3bc 	.word	0x0801e3bc
 8012740:	0801e3bc 	.word	0x0801e3bc
 8012744:	0801e3c0 	.word	0x0801e3c0

08012748 <memset>:
 8012748:	4402      	add	r2, r0
 801274a:	4603      	mov	r3, r0
 801274c:	4293      	cmp	r3, r2
 801274e:	d100      	bne.n	8012752 <memset+0xa>
 8012750:	4770      	bx	lr
 8012752:	f803 1b01 	strb.w	r1, [r3], #1
 8012756:	e7f9      	b.n	801274c <memset+0x4>

08012758 <siprintf>:
 8012758:	b40e      	push	{r1, r2, r3}
 801275a:	b500      	push	{lr}
 801275c:	b09c      	sub	sp, #112	; 0x70
 801275e:	ab1d      	add	r3, sp, #116	; 0x74
 8012760:	9002      	str	r0, [sp, #8]
 8012762:	9006      	str	r0, [sp, #24]
 8012764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012768:	4809      	ldr	r0, [pc, #36]	; (8012790 <siprintf+0x38>)
 801276a:	9107      	str	r1, [sp, #28]
 801276c:	9104      	str	r1, [sp, #16]
 801276e:	4909      	ldr	r1, [pc, #36]	; (8012794 <siprintf+0x3c>)
 8012770:	f853 2b04 	ldr.w	r2, [r3], #4
 8012774:	9105      	str	r1, [sp, #20]
 8012776:	6800      	ldr	r0, [r0, #0]
 8012778:	9301      	str	r3, [sp, #4]
 801277a:	a902      	add	r1, sp, #8
 801277c:	f000 f868 	bl	8012850 <_svfiprintf_r>
 8012780:	9b02      	ldr	r3, [sp, #8]
 8012782:	2200      	movs	r2, #0
 8012784:	701a      	strb	r2, [r3, #0]
 8012786:	b01c      	add	sp, #112	; 0x70
 8012788:	f85d eb04 	ldr.w	lr, [sp], #4
 801278c:	b003      	add	sp, #12
 801278e:	4770      	bx	lr
 8012790:	240001f8 	.word	0x240001f8
 8012794:	ffff0208 	.word	0xffff0208

08012798 <__ssputs_r>:
 8012798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801279c:	688e      	ldr	r6, [r1, #8]
 801279e:	429e      	cmp	r6, r3
 80127a0:	4682      	mov	sl, r0
 80127a2:	460c      	mov	r4, r1
 80127a4:	4690      	mov	r8, r2
 80127a6:	461f      	mov	r7, r3
 80127a8:	d838      	bhi.n	801281c <__ssputs_r+0x84>
 80127aa:	898a      	ldrh	r2, [r1, #12]
 80127ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80127b0:	d032      	beq.n	8012818 <__ssputs_r+0x80>
 80127b2:	6825      	ldr	r5, [r4, #0]
 80127b4:	6909      	ldr	r1, [r1, #16]
 80127b6:	eba5 0901 	sub.w	r9, r5, r1
 80127ba:	6965      	ldr	r5, [r4, #20]
 80127bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80127c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80127c4:	3301      	adds	r3, #1
 80127c6:	444b      	add	r3, r9
 80127c8:	106d      	asrs	r5, r5, #1
 80127ca:	429d      	cmp	r5, r3
 80127cc:	bf38      	it	cc
 80127ce:	461d      	movcc	r5, r3
 80127d0:	0553      	lsls	r3, r2, #21
 80127d2:	d531      	bpl.n	8012838 <__ssputs_r+0xa0>
 80127d4:	4629      	mov	r1, r5
 80127d6:	f000 fb47 	bl	8012e68 <_malloc_r>
 80127da:	4606      	mov	r6, r0
 80127dc:	b950      	cbnz	r0, 80127f4 <__ssputs_r+0x5c>
 80127de:	230c      	movs	r3, #12
 80127e0:	f8ca 3000 	str.w	r3, [sl]
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127ea:	81a3      	strh	r3, [r4, #12]
 80127ec:	f04f 30ff 	mov.w	r0, #4294967295
 80127f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f4:	6921      	ldr	r1, [r4, #16]
 80127f6:	464a      	mov	r2, r9
 80127f8:	f000 fabe 	bl	8012d78 <memcpy>
 80127fc:	89a3      	ldrh	r3, [r4, #12]
 80127fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012806:	81a3      	strh	r3, [r4, #12]
 8012808:	6126      	str	r6, [r4, #16]
 801280a:	6165      	str	r5, [r4, #20]
 801280c:	444e      	add	r6, r9
 801280e:	eba5 0509 	sub.w	r5, r5, r9
 8012812:	6026      	str	r6, [r4, #0]
 8012814:	60a5      	str	r5, [r4, #8]
 8012816:	463e      	mov	r6, r7
 8012818:	42be      	cmp	r6, r7
 801281a:	d900      	bls.n	801281e <__ssputs_r+0x86>
 801281c:	463e      	mov	r6, r7
 801281e:	4632      	mov	r2, r6
 8012820:	6820      	ldr	r0, [r4, #0]
 8012822:	4641      	mov	r1, r8
 8012824:	f000 fab6 	bl	8012d94 <memmove>
 8012828:	68a3      	ldr	r3, [r4, #8]
 801282a:	6822      	ldr	r2, [r4, #0]
 801282c:	1b9b      	subs	r3, r3, r6
 801282e:	4432      	add	r2, r6
 8012830:	60a3      	str	r3, [r4, #8]
 8012832:	6022      	str	r2, [r4, #0]
 8012834:	2000      	movs	r0, #0
 8012836:	e7db      	b.n	80127f0 <__ssputs_r+0x58>
 8012838:	462a      	mov	r2, r5
 801283a:	f000 fb6f 	bl	8012f1c <_realloc_r>
 801283e:	4606      	mov	r6, r0
 8012840:	2800      	cmp	r0, #0
 8012842:	d1e1      	bne.n	8012808 <__ssputs_r+0x70>
 8012844:	6921      	ldr	r1, [r4, #16]
 8012846:	4650      	mov	r0, sl
 8012848:	f000 fabe 	bl	8012dc8 <_free_r>
 801284c:	e7c7      	b.n	80127de <__ssputs_r+0x46>
	...

08012850 <_svfiprintf_r>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	4698      	mov	r8, r3
 8012856:	898b      	ldrh	r3, [r1, #12]
 8012858:	061b      	lsls	r3, r3, #24
 801285a:	b09d      	sub	sp, #116	; 0x74
 801285c:	4607      	mov	r7, r0
 801285e:	460d      	mov	r5, r1
 8012860:	4614      	mov	r4, r2
 8012862:	d50e      	bpl.n	8012882 <_svfiprintf_r+0x32>
 8012864:	690b      	ldr	r3, [r1, #16]
 8012866:	b963      	cbnz	r3, 8012882 <_svfiprintf_r+0x32>
 8012868:	2140      	movs	r1, #64	; 0x40
 801286a:	f000 fafd 	bl	8012e68 <_malloc_r>
 801286e:	6028      	str	r0, [r5, #0]
 8012870:	6128      	str	r0, [r5, #16]
 8012872:	b920      	cbnz	r0, 801287e <_svfiprintf_r+0x2e>
 8012874:	230c      	movs	r3, #12
 8012876:	603b      	str	r3, [r7, #0]
 8012878:	f04f 30ff 	mov.w	r0, #4294967295
 801287c:	e0d1      	b.n	8012a22 <_svfiprintf_r+0x1d2>
 801287e:	2340      	movs	r3, #64	; 0x40
 8012880:	616b      	str	r3, [r5, #20]
 8012882:	2300      	movs	r3, #0
 8012884:	9309      	str	r3, [sp, #36]	; 0x24
 8012886:	2320      	movs	r3, #32
 8012888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801288c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012890:	2330      	movs	r3, #48	; 0x30
 8012892:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012a3c <_svfiprintf_r+0x1ec>
 8012896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801289a:	f04f 0901 	mov.w	r9, #1
 801289e:	4623      	mov	r3, r4
 80128a0:	469a      	mov	sl, r3
 80128a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128a6:	b10a      	cbz	r2, 80128ac <_svfiprintf_r+0x5c>
 80128a8:	2a25      	cmp	r2, #37	; 0x25
 80128aa:	d1f9      	bne.n	80128a0 <_svfiprintf_r+0x50>
 80128ac:	ebba 0b04 	subs.w	fp, sl, r4
 80128b0:	d00b      	beq.n	80128ca <_svfiprintf_r+0x7a>
 80128b2:	465b      	mov	r3, fp
 80128b4:	4622      	mov	r2, r4
 80128b6:	4629      	mov	r1, r5
 80128b8:	4638      	mov	r0, r7
 80128ba:	f7ff ff6d 	bl	8012798 <__ssputs_r>
 80128be:	3001      	adds	r0, #1
 80128c0:	f000 80aa 	beq.w	8012a18 <_svfiprintf_r+0x1c8>
 80128c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128c6:	445a      	add	r2, fp
 80128c8:	9209      	str	r2, [sp, #36]	; 0x24
 80128ca:	f89a 3000 	ldrb.w	r3, [sl]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 80a2 	beq.w	8012a18 <_svfiprintf_r+0x1c8>
 80128d4:	2300      	movs	r3, #0
 80128d6:	f04f 32ff 	mov.w	r2, #4294967295
 80128da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128de:	f10a 0a01 	add.w	sl, sl, #1
 80128e2:	9304      	str	r3, [sp, #16]
 80128e4:	9307      	str	r3, [sp, #28]
 80128e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128ea:	931a      	str	r3, [sp, #104]	; 0x68
 80128ec:	4654      	mov	r4, sl
 80128ee:	2205      	movs	r2, #5
 80128f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128f4:	4851      	ldr	r0, [pc, #324]	; (8012a3c <_svfiprintf_r+0x1ec>)
 80128f6:	f7ed fcf3 	bl	80002e0 <memchr>
 80128fa:	9a04      	ldr	r2, [sp, #16]
 80128fc:	b9d8      	cbnz	r0, 8012936 <_svfiprintf_r+0xe6>
 80128fe:	06d0      	lsls	r0, r2, #27
 8012900:	bf44      	itt	mi
 8012902:	2320      	movmi	r3, #32
 8012904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012908:	0711      	lsls	r1, r2, #28
 801290a:	bf44      	itt	mi
 801290c:	232b      	movmi	r3, #43	; 0x2b
 801290e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012912:	f89a 3000 	ldrb.w	r3, [sl]
 8012916:	2b2a      	cmp	r3, #42	; 0x2a
 8012918:	d015      	beq.n	8012946 <_svfiprintf_r+0xf6>
 801291a:	9a07      	ldr	r2, [sp, #28]
 801291c:	4654      	mov	r4, sl
 801291e:	2000      	movs	r0, #0
 8012920:	f04f 0c0a 	mov.w	ip, #10
 8012924:	4621      	mov	r1, r4
 8012926:	f811 3b01 	ldrb.w	r3, [r1], #1
 801292a:	3b30      	subs	r3, #48	; 0x30
 801292c:	2b09      	cmp	r3, #9
 801292e:	d94e      	bls.n	80129ce <_svfiprintf_r+0x17e>
 8012930:	b1b0      	cbz	r0, 8012960 <_svfiprintf_r+0x110>
 8012932:	9207      	str	r2, [sp, #28]
 8012934:	e014      	b.n	8012960 <_svfiprintf_r+0x110>
 8012936:	eba0 0308 	sub.w	r3, r0, r8
 801293a:	fa09 f303 	lsl.w	r3, r9, r3
 801293e:	4313      	orrs	r3, r2
 8012940:	9304      	str	r3, [sp, #16]
 8012942:	46a2      	mov	sl, r4
 8012944:	e7d2      	b.n	80128ec <_svfiprintf_r+0x9c>
 8012946:	9b03      	ldr	r3, [sp, #12]
 8012948:	1d19      	adds	r1, r3, #4
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	9103      	str	r1, [sp, #12]
 801294e:	2b00      	cmp	r3, #0
 8012950:	bfbb      	ittet	lt
 8012952:	425b      	neglt	r3, r3
 8012954:	f042 0202 	orrlt.w	r2, r2, #2
 8012958:	9307      	strge	r3, [sp, #28]
 801295a:	9307      	strlt	r3, [sp, #28]
 801295c:	bfb8      	it	lt
 801295e:	9204      	strlt	r2, [sp, #16]
 8012960:	7823      	ldrb	r3, [r4, #0]
 8012962:	2b2e      	cmp	r3, #46	; 0x2e
 8012964:	d10c      	bne.n	8012980 <_svfiprintf_r+0x130>
 8012966:	7863      	ldrb	r3, [r4, #1]
 8012968:	2b2a      	cmp	r3, #42	; 0x2a
 801296a:	d135      	bne.n	80129d8 <_svfiprintf_r+0x188>
 801296c:	9b03      	ldr	r3, [sp, #12]
 801296e:	1d1a      	adds	r2, r3, #4
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	9203      	str	r2, [sp, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	bfb8      	it	lt
 8012978:	f04f 33ff 	movlt.w	r3, #4294967295
 801297c:	3402      	adds	r4, #2
 801297e:	9305      	str	r3, [sp, #20]
 8012980:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012a4c <_svfiprintf_r+0x1fc>
 8012984:	7821      	ldrb	r1, [r4, #0]
 8012986:	2203      	movs	r2, #3
 8012988:	4650      	mov	r0, sl
 801298a:	f7ed fca9 	bl	80002e0 <memchr>
 801298e:	b140      	cbz	r0, 80129a2 <_svfiprintf_r+0x152>
 8012990:	2340      	movs	r3, #64	; 0x40
 8012992:	eba0 000a 	sub.w	r0, r0, sl
 8012996:	fa03 f000 	lsl.w	r0, r3, r0
 801299a:	9b04      	ldr	r3, [sp, #16]
 801299c:	4303      	orrs	r3, r0
 801299e:	3401      	adds	r4, #1
 80129a0:	9304      	str	r3, [sp, #16]
 80129a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129a6:	4826      	ldr	r0, [pc, #152]	; (8012a40 <_svfiprintf_r+0x1f0>)
 80129a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80129ac:	2206      	movs	r2, #6
 80129ae:	f7ed fc97 	bl	80002e0 <memchr>
 80129b2:	2800      	cmp	r0, #0
 80129b4:	d038      	beq.n	8012a28 <_svfiprintf_r+0x1d8>
 80129b6:	4b23      	ldr	r3, [pc, #140]	; (8012a44 <_svfiprintf_r+0x1f4>)
 80129b8:	bb1b      	cbnz	r3, 8012a02 <_svfiprintf_r+0x1b2>
 80129ba:	9b03      	ldr	r3, [sp, #12]
 80129bc:	3307      	adds	r3, #7
 80129be:	f023 0307 	bic.w	r3, r3, #7
 80129c2:	3308      	adds	r3, #8
 80129c4:	9303      	str	r3, [sp, #12]
 80129c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129c8:	4433      	add	r3, r6
 80129ca:	9309      	str	r3, [sp, #36]	; 0x24
 80129cc:	e767      	b.n	801289e <_svfiprintf_r+0x4e>
 80129ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80129d2:	460c      	mov	r4, r1
 80129d4:	2001      	movs	r0, #1
 80129d6:	e7a5      	b.n	8012924 <_svfiprintf_r+0xd4>
 80129d8:	2300      	movs	r3, #0
 80129da:	3401      	adds	r4, #1
 80129dc:	9305      	str	r3, [sp, #20]
 80129de:	4619      	mov	r1, r3
 80129e0:	f04f 0c0a 	mov.w	ip, #10
 80129e4:	4620      	mov	r0, r4
 80129e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129ea:	3a30      	subs	r2, #48	; 0x30
 80129ec:	2a09      	cmp	r2, #9
 80129ee:	d903      	bls.n	80129f8 <_svfiprintf_r+0x1a8>
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d0c5      	beq.n	8012980 <_svfiprintf_r+0x130>
 80129f4:	9105      	str	r1, [sp, #20]
 80129f6:	e7c3      	b.n	8012980 <_svfiprintf_r+0x130>
 80129f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80129fc:	4604      	mov	r4, r0
 80129fe:	2301      	movs	r3, #1
 8012a00:	e7f0      	b.n	80129e4 <_svfiprintf_r+0x194>
 8012a02:	ab03      	add	r3, sp, #12
 8012a04:	9300      	str	r3, [sp, #0]
 8012a06:	462a      	mov	r2, r5
 8012a08:	4b0f      	ldr	r3, [pc, #60]	; (8012a48 <_svfiprintf_r+0x1f8>)
 8012a0a:	a904      	add	r1, sp, #16
 8012a0c:	4638      	mov	r0, r7
 8012a0e:	f3af 8000 	nop.w
 8012a12:	1c42      	adds	r2, r0, #1
 8012a14:	4606      	mov	r6, r0
 8012a16:	d1d6      	bne.n	80129c6 <_svfiprintf_r+0x176>
 8012a18:	89ab      	ldrh	r3, [r5, #12]
 8012a1a:	065b      	lsls	r3, r3, #25
 8012a1c:	f53f af2c 	bmi.w	8012878 <_svfiprintf_r+0x28>
 8012a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a22:	b01d      	add	sp, #116	; 0x74
 8012a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a28:	ab03      	add	r3, sp, #12
 8012a2a:	9300      	str	r3, [sp, #0]
 8012a2c:	462a      	mov	r2, r5
 8012a2e:	4b06      	ldr	r3, [pc, #24]	; (8012a48 <_svfiprintf_r+0x1f8>)
 8012a30:	a904      	add	r1, sp, #16
 8012a32:	4638      	mov	r0, r7
 8012a34:	f000 f87a 	bl	8012b2c <_printf_i>
 8012a38:	e7eb      	b.n	8012a12 <_svfiprintf_r+0x1c2>
 8012a3a:	bf00      	nop
 8012a3c:	0801e380 	.word	0x0801e380
 8012a40:	0801e38a 	.word	0x0801e38a
 8012a44:	00000000 	.word	0x00000000
 8012a48:	08012799 	.word	0x08012799
 8012a4c:	0801e386 	.word	0x0801e386

08012a50 <_printf_common>:
 8012a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a54:	4616      	mov	r6, r2
 8012a56:	4699      	mov	r9, r3
 8012a58:	688a      	ldr	r2, [r1, #8]
 8012a5a:	690b      	ldr	r3, [r1, #16]
 8012a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a60:	4293      	cmp	r3, r2
 8012a62:	bfb8      	it	lt
 8012a64:	4613      	movlt	r3, r2
 8012a66:	6033      	str	r3, [r6, #0]
 8012a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a6c:	4607      	mov	r7, r0
 8012a6e:	460c      	mov	r4, r1
 8012a70:	b10a      	cbz	r2, 8012a76 <_printf_common+0x26>
 8012a72:	3301      	adds	r3, #1
 8012a74:	6033      	str	r3, [r6, #0]
 8012a76:	6823      	ldr	r3, [r4, #0]
 8012a78:	0699      	lsls	r1, r3, #26
 8012a7a:	bf42      	ittt	mi
 8012a7c:	6833      	ldrmi	r3, [r6, #0]
 8012a7e:	3302      	addmi	r3, #2
 8012a80:	6033      	strmi	r3, [r6, #0]
 8012a82:	6825      	ldr	r5, [r4, #0]
 8012a84:	f015 0506 	ands.w	r5, r5, #6
 8012a88:	d106      	bne.n	8012a98 <_printf_common+0x48>
 8012a8a:	f104 0a19 	add.w	sl, r4, #25
 8012a8e:	68e3      	ldr	r3, [r4, #12]
 8012a90:	6832      	ldr	r2, [r6, #0]
 8012a92:	1a9b      	subs	r3, r3, r2
 8012a94:	42ab      	cmp	r3, r5
 8012a96:	dc26      	bgt.n	8012ae6 <_printf_common+0x96>
 8012a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a9c:	1e13      	subs	r3, r2, #0
 8012a9e:	6822      	ldr	r2, [r4, #0]
 8012aa0:	bf18      	it	ne
 8012aa2:	2301      	movne	r3, #1
 8012aa4:	0692      	lsls	r2, r2, #26
 8012aa6:	d42b      	bmi.n	8012b00 <_printf_common+0xb0>
 8012aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012aac:	4649      	mov	r1, r9
 8012aae:	4638      	mov	r0, r7
 8012ab0:	47c0      	blx	r8
 8012ab2:	3001      	adds	r0, #1
 8012ab4:	d01e      	beq.n	8012af4 <_printf_common+0xa4>
 8012ab6:	6823      	ldr	r3, [r4, #0]
 8012ab8:	68e5      	ldr	r5, [r4, #12]
 8012aba:	6832      	ldr	r2, [r6, #0]
 8012abc:	f003 0306 	and.w	r3, r3, #6
 8012ac0:	2b04      	cmp	r3, #4
 8012ac2:	bf08      	it	eq
 8012ac4:	1aad      	subeq	r5, r5, r2
 8012ac6:	68a3      	ldr	r3, [r4, #8]
 8012ac8:	6922      	ldr	r2, [r4, #16]
 8012aca:	bf0c      	ite	eq
 8012acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ad0:	2500      	movne	r5, #0
 8012ad2:	4293      	cmp	r3, r2
 8012ad4:	bfc4      	itt	gt
 8012ad6:	1a9b      	subgt	r3, r3, r2
 8012ad8:	18ed      	addgt	r5, r5, r3
 8012ada:	2600      	movs	r6, #0
 8012adc:	341a      	adds	r4, #26
 8012ade:	42b5      	cmp	r5, r6
 8012ae0:	d11a      	bne.n	8012b18 <_printf_common+0xc8>
 8012ae2:	2000      	movs	r0, #0
 8012ae4:	e008      	b.n	8012af8 <_printf_common+0xa8>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	4652      	mov	r2, sl
 8012aea:	4649      	mov	r1, r9
 8012aec:	4638      	mov	r0, r7
 8012aee:	47c0      	blx	r8
 8012af0:	3001      	adds	r0, #1
 8012af2:	d103      	bne.n	8012afc <_printf_common+0xac>
 8012af4:	f04f 30ff 	mov.w	r0, #4294967295
 8012af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012afc:	3501      	adds	r5, #1
 8012afe:	e7c6      	b.n	8012a8e <_printf_common+0x3e>
 8012b00:	18e1      	adds	r1, r4, r3
 8012b02:	1c5a      	adds	r2, r3, #1
 8012b04:	2030      	movs	r0, #48	; 0x30
 8012b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b0a:	4422      	add	r2, r4
 8012b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b14:	3302      	adds	r3, #2
 8012b16:	e7c7      	b.n	8012aa8 <_printf_common+0x58>
 8012b18:	2301      	movs	r3, #1
 8012b1a:	4622      	mov	r2, r4
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	4638      	mov	r0, r7
 8012b20:	47c0      	blx	r8
 8012b22:	3001      	adds	r0, #1
 8012b24:	d0e6      	beq.n	8012af4 <_printf_common+0xa4>
 8012b26:	3601      	adds	r6, #1
 8012b28:	e7d9      	b.n	8012ade <_printf_common+0x8e>
	...

08012b2c <_printf_i>:
 8012b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b30:	460c      	mov	r4, r1
 8012b32:	4691      	mov	r9, r2
 8012b34:	7e27      	ldrb	r7, [r4, #24]
 8012b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b38:	2f78      	cmp	r7, #120	; 0x78
 8012b3a:	4680      	mov	r8, r0
 8012b3c:	469a      	mov	sl, r3
 8012b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b42:	d807      	bhi.n	8012b54 <_printf_i+0x28>
 8012b44:	2f62      	cmp	r7, #98	; 0x62
 8012b46:	d80a      	bhi.n	8012b5e <_printf_i+0x32>
 8012b48:	2f00      	cmp	r7, #0
 8012b4a:	f000 80d8 	beq.w	8012cfe <_printf_i+0x1d2>
 8012b4e:	2f58      	cmp	r7, #88	; 0x58
 8012b50:	f000 80a3 	beq.w	8012c9a <_printf_i+0x16e>
 8012b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012b5c:	e03a      	b.n	8012bd4 <_printf_i+0xa8>
 8012b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012b62:	2b15      	cmp	r3, #21
 8012b64:	d8f6      	bhi.n	8012b54 <_printf_i+0x28>
 8012b66:	a001      	add	r0, pc, #4	; (adr r0, 8012b6c <_printf_i+0x40>)
 8012b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012b6c:	08012bc5 	.word	0x08012bc5
 8012b70:	08012bd9 	.word	0x08012bd9
 8012b74:	08012b55 	.word	0x08012b55
 8012b78:	08012b55 	.word	0x08012b55
 8012b7c:	08012b55 	.word	0x08012b55
 8012b80:	08012b55 	.word	0x08012b55
 8012b84:	08012bd9 	.word	0x08012bd9
 8012b88:	08012b55 	.word	0x08012b55
 8012b8c:	08012b55 	.word	0x08012b55
 8012b90:	08012b55 	.word	0x08012b55
 8012b94:	08012b55 	.word	0x08012b55
 8012b98:	08012ce5 	.word	0x08012ce5
 8012b9c:	08012c09 	.word	0x08012c09
 8012ba0:	08012cc7 	.word	0x08012cc7
 8012ba4:	08012b55 	.word	0x08012b55
 8012ba8:	08012b55 	.word	0x08012b55
 8012bac:	08012d07 	.word	0x08012d07
 8012bb0:	08012b55 	.word	0x08012b55
 8012bb4:	08012c09 	.word	0x08012c09
 8012bb8:	08012b55 	.word	0x08012b55
 8012bbc:	08012b55 	.word	0x08012b55
 8012bc0:	08012ccf 	.word	0x08012ccf
 8012bc4:	680b      	ldr	r3, [r1, #0]
 8012bc6:	1d1a      	adds	r2, r3, #4
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	600a      	str	r2, [r1, #0]
 8012bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	e0a3      	b.n	8012d20 <_printf_i+0x1f4>
 8012bd8:	6825      	ldr	r5, [r4, #0]
 8012bda:	6808      	ldr	r0, [r1, #0]
 8012bdc:	062e      	lsls	r6, r5, #24
 8012bde:	f100 0304 	add.w	r3, r0, #4
 8012be2:	d50a      	bpl.n	8012bfa <_printf_i+0xce>
 8012be4:	6805      	ldr	r5, [r0, #0]
 8012be6:	600b      	str	r3, [r1, #0]
 8012be8:	2d00      	cmp	r5, #0
 8012bea:	da03      	bge.n	8012bf4 <_printf_i+0xc8>
 8012bec:	232d      	movs	r3, #45	; 0x2d
 8012bee:	426d      	negs	r5, r5
 8012bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bf4:	485e      	ldr	r0, [pc, #376]	; (8012d70 <_printf_i+0x244>)
 8012bf6:	230a      	movs	r3, #10
 8012bf8:	e019      	b.n	8012c2e <_printf_i+0x102>
 8012bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012bfe:	6805      	ldr	r5, [r0, #0]
 8012c00:	600b      	str	r3, [r1, #0]
 8012c02:	bf18      	it	ne
 8012c04:	b22d      	sxthne	r5, r5
 8012c06:	e7ef      	b.n	8012be8 <_printf_i+0xbc>
 8012c08:	680b      	ldr	r3, [r1, #0]
 8012c0a:	6825      	ldr	r5, [r4, #0]
 8012c0c:	1d18      	adds	r0, r3, #4
 8012c0e:	6008      	str	r0, [r1, #0]
 8012c10:	0628      	lsls	r0, r5, #24
 8012c12:	d501      	bpl.n	8012c18 <_printf_i+0xec>
 8012c14:	681d      	ldr	r5, [r3, #0]
 8012c16:	e002      	b.n	8012c1e <_printf_i+0xf2>
 8012c18:	0669      	lsls	r1, r5, #25
 8012c1a:	d5fb      	bpl.n	8012c14 <_printf_i+0xe8>
 8012c1c:	881d      	ldrh	r5, [r3, #0]
 8012c1e:	4854      	ldr	r0, [pc, #336]	; (8012d70 <_printf_i+0x244>)
 8012c20:	2f6f      	cmp	r7, #111	; 0x6f
 8012c22:	bf0c      	ite	eq
 8012c24:	2308      	moveq	r3, #8
 8012c26:	230a      	movne	r3, #10
 8012c28:	2100      	movs	r1, #0
 8012c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c2e:	6866      	ldr	r6, [r4, #4]
 8012c30:	60a6      	str	r6, [r4, #8]
 8012c32:	2e00      	cmp	r6, #0
 8012c34:	bfa2      	ittt	ge
 8012c36:	6821      	ldrge	r1, [r4, #0]
 8012c38:	f021 0104 	bicge.w	r1, r1, #4
 8012c3c:	6021      	strge	r1, [r4, #0]
 8012c3e:	b90d      	cbnz	r5, 8012c44 <_printf_i+0x118>
 8012c40:	2e00      	cmp	r6, #0
 8012c42:	d04d      	beq.n	8012ce0 <_printf_i+0x1b4>
 8012c44:	4616      	mov	r6, r2
 8012c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8012c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8012c4e:	5dc7      	ldrb	r7, [r0, r7]
 8012c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012c54:	462f      	mov	r7, r5
 8012c56:	42bb      	cmp	r3, r7
 8012c58:	460d      	mov	r5, r1
 8012c5a:	d9f4      	bls.n	8012c46 <_printf_i+0x11a>
 8012c5c:	2b08      	cmp	r3, #8
 8012c5e:	d10b      	bne.n	8012c78 <_printf_i+0x14c>
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	07df      	lsls	r7, r3, #31
 8012c64:	d508      	bpl.n	8012c78 <_printf_i+0x14c>
 8012c66:	6923      	ldr	r3, [r4, #16]
 8012c68:	6861      	ldr	r1, [r4, #4]
 8012c6a:	4299      	cmp	r1, r3
 8012c6c:	bfde      	ittt	le
 8012c6e:	2330      	movle	r3, #48	; 0x30
 8012c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012c78:	1b92      	subs	r2, r2, r6
 8012c7a:	6122      	str	r2, [r4, #16]
 8012c7c:	f8cd a000 	str.w	sl, [sp]
 8012c80:	464b      	mov	r3, r9
 8012c82:	aa03      	add	r2, sp, #12
 8012c84:	4621      	mov	r1, r4
 8012c86:	4640      	mov	r0, r8
 8012c88:	f7ff fee2 	bl	8012a50 <_printf_common>
 8012c8c:	3001      	adds	r0, #1
 8012c8e:	d14c      	bne.n	8012d2a <_printf_i+0x1fe>
 8012c90:	f04f 30ff 	mov.w	r0, #4294967295
 8012c94:	b004      	add	sp, #16
 8012c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c9a:	4835      	ldr	r0, [pc, #212]	; (8012d70 <_printf_i+0x244>)
 8012c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012ca0:	6823      	ldr	r3, [r4, #0]
 8012ca2:	680e      	ldr	r6, [r1, #0]
 8012ca4:	061f      	lsls	r7, r3, #24
 8012ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8012caa:	600e      	str	r6, [r1, #0]
 8012cac:	d514      	bpl.n	8012cd8 <_printf_i+0x1ac>
 8012cae:	07d9      	lsls	r1, r3, #31
 8012cb0:	bf44      	itt	mi
 8012cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8012cb6:	6023      	strmi	r3, [r4, #0]
 8012cb8:	b91d      	cbnz	r5, 8012cc2 <_printf_i+0x196>
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	f023 0320 	bic.w	r3, r3, #32
 8012cc0:	6023      	str	r3, [r4, #0]
 8012cc2:	2310      	movs	r3, #16
 8012cc4:	e7b0      	b.n	8012c28 <_printf_i+0xfc>
 8012cc6:	6823      	ldr	r3, [r4, #0]
 8012cc8:	f043 0320 	orr.w	r3, r3, #32
 8012ccc:	6023      	str	r3, [r4, #0]
 8012cce:	2378      	movs	r3, #120	; 0x78
 8012cd0:	4828      	ldr	r0, [pc, #160]	; (8012d74 <_printf_i+0x248>)
 8012cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012cd6:	e7e3      	b.n	8012ca0 <_printf_i+0x174>
 8012cd8:	065e      	lsls	r6, r3, #25
 8012cda:	bf48      	it	mi
 8012cdc:	b2ad      	uxthmi	r5, r5
 8012cde:	e7e6      	b.n	8012cae <_printf_i+0x182>
 8012ce0:	4616      	mov	r6, r2
 8012ce2:	e7bb      	b.n	8012c5c <_printf_i+0x130>
 8012ce4:	680b      	ldr	r3, [r1, #0]
 8012ce6:	6826      	ldr	r6, [r4, #0]
 8012ce8:	6960      	ldr	r0, [r4, #20]
 8012cea:	1d1d      	adds	r5, r3, #4
 8012cec:	600d      	str	r5, [r1, #0]
 8012cee:	0635      	lsls	r5, r6, #24
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	d501      	bpl.n	8012cf8 <_printf_i+0x1cc>
 8012cf4:	6018      	str	r0, [r3, #0]
 8012cf6:	e002      	b.n	8012cfe <_printf_i+0x1d2>
 8012cf8:	0671      	lsls	r1, r6, #25
 8012cfa:	d5fb      	bpl.n	8012cf4 <_printf_i+0x1c8>
 8012cfc:	8018      	strh	r0, [r3, #0]
 8012cfe:	2300      	movs	r3, #0
 8012d00:	6123      	str	r3, [r4, #16]
 8012d02:	4616      	mov	r6, r2
 8012d04:	e7ba      	b.n	8012c7c <_printf_i+0x150>
 8012d06:	680b      	ldr	r3, [r1, #0]
 8012d08:	1d1a      	adds	r2, r3, #4
 8012d0a:	600a      	str	r2, [r1, #0]
 8012d0c:	681e      	ldr	r6, [r3, #0]
 8012d0e:	6862      	ldr	r2, [r4, #4]
 8012d10:	2100      	movs	r1, #0
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ed fae4 	bl	80002e0 <memchr>
 8012d18:	b108      	cbz	r0, 8012d1e <_printf_i+0x1f2>
 8012d1a:	1b80      	subs	r0, r0, r6
 8012d1c:	6060      	str	r0, [r4, #4]
 8012d1e:	6863      	ldr	r3, [r4, #4]
 8012d20:	6123      	str	r3, [r4, #16]
 8012d22:	2300      	movs	r3, #0
 8012d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d28:	e7a8      	b.n	8012c7c <_printf_i+0x150>
 8012d2a:	6923      	ldr	r3, [r4, #16]
 8012d2c:	4632      	mov	r2, r6
 8012d2e:	4649      	mov	r1, r9
 8012d30:	4640      	mov	r0, r8
 8012d32:	47d0      	blx	sl
 8012d34:	3001      	adds	r0, #1
 8012d36:	d0ab      	beq.n	8012c90 <_printf_i+0x164>
 8012d38:	6823      	ldr	r3, [r4, #0]
 8012d3a:	079b      	lsls	r3, r3, #30
 8012d3c:	d413      	bmi.n	8012d66 <_printf_i+0x23a>
 8012d3e:	68e0      	ldr	r0, [r4, #12]
 8012d40:	9b03      	ldr	r3, [sp, #12]
 8012d42:	4298      	cmp	r0, r3
 8012d44:	bfb8      	it	lt
 8012d46:	4618      	movlt	r0, r3
 8012d48:	e7a4      	b.n	8012c94 <_printf_i+0x168>
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	4632      	mov	r2, r6
 8012d4e:	4649      	mov	r1, r9
 8012d50:	4640      	mov	r0, r8
 8012d52:	47d0      	blx	sl
 8012d54:	3001      	adds	r0, #1
 8012d56:	d09b      	beq.n	8012c90 <_printf_i+0x164>
 8012d58:	3501      	adds	r5, #1
 8012d5a:	68e3      	ldr	r3, [r4, #12]
 8012d5c:	9903      	ldr	r1, [sp, #12]
 8012d5e:	1a5b      	subs	r3, r3, r1
 8012d60:	42ab      	cmp	r3, r5
 8012d62:	dcf2      	bgt.n	8012d4a <_printf_i+0x21e>
 8012d64:	e7eb      	b.n	8012d3e <_printf_i+0x212>
 8012d66:	2500      	movs	r5, #0
 8012d68:	f104 0619 	add.w	r6, r4, #25
 8012d6c:	e7f5      	b.n	8012d5a <_printf_i+0x22e>
 8012d6e:	bf00      	nop
 8012d70:	0801e391 	.word	0x0801e391
 8012d74:	0801e3a2 	.word	0x0801e3a2

08012d78 <memcpy>:
 8012d78:	440a      	add	r2, r1
 8012d7a:	4291      	cmp	r1, r2
 8012d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012d80:	d100      	bne.n	8012d84 <memcpy+0xc>
 8012d82:	4770      	bx	lr
 8012d84:	b510      	push	{r4, lr}
 8012d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d8e:	4291      	cmp	r1, r2
 8012d90:	d1f9      	bne.n	8012d86 <memcpy+0xe>
 8012d92:	bd10      	pop	{r4, pc}

08012d94 <memmove>:
 8012d94:	4288      	cmp	r0, r1
 8012d96:	b510      	push	{r4, lr}
 8012d98:	eb01 0402 	add.w	r4, r1, r2
 8012d9c:	d902      	bls.n	8012da4 <memmove+0x10>
 8012d9e:	4284      	cmp	r4, r0
 8012da0:	4623      	mov	r3, r4
 8012da2:	d807      	bhi.n	8012db4 <memmove+0x20>
 8012da4:	1e43      	subs	r3, r0, #1
 8012da6:	42a1      	cmp	r1, r4
 8012da8:	d008      	beq.n	8012dbc <memmove+0x28>
 8012daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012db2:	e7f8      	b.n	8012da6 <memmove+0x12>
 8012db4:	4402      	add	r2, r0
 8012db6:	4601      	mov	r1, r0
 8012db8:	428a      	cmp	r2, r1
 8012dba:	d100      	bne.n	8012dbe <memmove+0x2a>
 8012dbc:	bd10      	pop	{r4, pc}
 8012dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012dc6:	e7f7      	b.n	8012db8 <memmove+0x24>

08012dc8 <_free_r>:
 8012dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012dca:	2900      	cmp	r1, #0
 8012dcc:	d048      	beq.n	8012e60 <_free_r+0x98>
 8012dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dd2:	9001      	str	r0, [sp, #4]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8012dda:	bfb8      	it	lt
 8012ddc:	18e4      	addlt	r4, r4, r3
 8012dde:	f000 f8d3 	bl	8012f88 <__malloc_lock>
 8012de2:	4a20      	ldr	r2, [pc, #128]	; (8012e64 <_free_r+0x9c>)
 8012de4:	9801      	ldr	r0, [sp, #4]
 8012de6:	6813      	ldr	r3, [r2, #0]
 8012de8:	4615      	mov	r5, r2
 8012dea:	b933      	cbnz	r3, 8012dfa <_free_r+0x32>
 8012dec:	6063      	str	r3, [r4, #4]
 8012dee:	6014      	str	r4, [r2, #0]
 8012df0:	b003      	add	sp, #12
 8012df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012df6:	f000 b8cd 	b.w	8012f94 <__malloc_unlock>
 8012dfa:	42a3      	cmp	r3, r4
 8012dfc:	d90b      	bls.n	8012e16 <_free_r+0x4e>
 8012dfe:	6821      	ldr	r1, [r4, #0]
 8012e00:	1862      	adds	r2, r4, r1
 8012e02:	4293      	cmp	r3, r2
 8012e04:	bf04      	itt	eq
 8012e06:	681a      	ldreq	r2, [r3, #0]
 8012e08:	685b      	ldreq	r3, [r3, #4]
 8012e0a:	6063      	str	r3, [r4, #4]
 8012e0c:	bf04      	itt	eq
 8012e0e:	1852      	addeq	r2, r2, r1
 8012e10:	6022      	streq	r2, [r4, #0]
 8012e12:	602c      	str	r4, [r5, #0]
 8012e14:	e7ec      	b.n	8012df0 <_free_r+0x28>
 8012e16:	461a      	mov	r2, r3
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	b10b      	cbz	r3, 8012e20 <_free_r+0x58>
 8012e1c:	42a3      	cmp	r3, r4
 8012e1e:	d9fa      	bls.n	8012e16 <_free_r+0x4e>
 8012e20:	6811      	ldr	r1, [r2, #0]
 8012e22:	1855      	adds	r5, r2, r1
 8012e24:	42a5      	cmp	r5, r4
 8012e26:	d10b      	bne.n	8012e40 <_free_r+0x78>
 8012e28:	6824      	ldr	r4, [r4, #0]
 8012e2a:	4421      	add	r1, r4
 8012e2c:	1854      	adds	r4, r2, r1
 8012e2e:	42a3      	cmp	r3, r4
 8012e30:	6011      	str	r1, [r2, #0]
 8012e32:	d1dd      	bne.n	8012df0 <_free_r+0x28>
 8012e34:	681c      	ldr	r4, [r3, #0]
 8012e36:	685b      	ldr	r3, [r3, #4]
 8012e38:	6053      	str	r3, [r2, #4]
 8012e3a:	4421      	add	r1, r4
 8012e3c:	6011      	str	r1, [r2, #0]
 8012e3e:	e7d7      	b.n	8012df0 <_free_r+0x28>
 8012e40:	d902      	bls.n	8012e48 <_free_r+0x80>
 8012e42:	230c      	movs	r3, #12
 8012e44:	6003      	str	r3, [r0, #0]
 8012e46:	e7d3      	b.n	8012df0 <_free_r+0x28>
 8012e48:	6825      	ldr	r5, [r4, #0]
 8012e4a:	1961      	adds	r1, r4, r5
 8012e4c:	428b      	cmp	r3, r1
 8012e4e:	bf04      	itt	eq
 8012e50:	6819      	ldreq	r1, [r3, #0]
 8012e52:	685b      	ldreq	r3, [r3, #4]
 8012e54:	6063      	str	r3, [r4, #4]
 8012e56:	bf04      	itt	eq
 8012e58:	1949      	addeq	r1, r1, r5
 8012e5a:	6021      	streq	r1, [r4, #0]
 8012e5c:	6054      	str	r4, [r2, #4]
 8012e5e:	e7c7      	b.n	8012df0 <_free_r+0x28>
 8012e60:	b003      	add	sp, #12
 8012e62:	bd30      	pop	{r4, r5, pc}
 8012e64:	24001800 	.word	0x24001800

08012e68 <_malloc_r>:
 8012e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6a:	1ccd      	adds	r5, r1, #3
 8012e6c:	f025 0503 	bic.w	r5, r5, #3
 8012e70:	3508      	adds	r5, #8
 8012e72:	2d0c      	cmp	r5, #12
 8012e74:	bf38      	it	cc
 8012e76:	250c      	movcc	r5, #12
 8012e78:	2d00      	cmp	r5, #0
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	db01      	blt.n	8012e82 <_malloc_r+0x1a>
 8012e7e:	42a9      	cmp	r1, r5
 8012e80:	d903      	bls.n	8012e8a <_malloc_r+0x22>
 8012e82:	230c      	movs	r3, #12
 8012e84:	6033      	str	r3, [r6, #0]
 8012e86:	2000      	movs	r0, #0
 8012e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e8a:	f000 f87d 	bl	8012f88 <__malloc_lock>
 8012e8e:	4921      	ldr	r1, [pc, #132]	; (8012f14 <_malloc_r+0xac>)
 8012e90:	680a      	ldr	r2, [r1, #0]
 8012e92:	4614      	mov	r4, r2
 8012e94:	b99c      	cbnz	r4, 8012ebe <_malloc_r+0x56>
 8012e96:	4f20      	ldr	r7, [pc, #128]	; (8012f18 <_malloc_r+0xb0>)
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	b923      	cbnz	r3, 8012ea6 <_malloc_r+0x3e>
 8012e9c:	4621      	mov	r1, r4
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	f000 f862 	bl	8012f68 <_sbrk_r>
 8012ea4:	6038      	str	r0, [r7, #0]
 8012ea6:	4629      	mov	r1, r5
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	f000 f85d 	bl	8012f68 <_sbrk_r>
 8012eae:	1c43      	adds	r3, r0, #1
 8012eb0:	d123      	bne.n	8012efa <_malloc_r+0x92>
 8012eb2:	230c      	movs	r3, #12
 8012eb4:	6033      	str	r3, [r6, #0]
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	f000 f86c 	bl	8012f94 <__malloc_unlock>
 8012ebc:	e7e3      	b.n	8012e86 <_malloc_r+0x1e>
 8012ebe:	6823      	ldr	r3, [r4, #0]
 8012ec0:	1b5b      	subs	r3, r3, r5
 8012ec2:	d417      	bmi.n	8012ef4 <_malloc_r+0x8c>
 8012ec4:	2b0b      	cmp	r3, #11
 8012ec6:	d903      	bls.n	8012ed0 <_malloc_r+0x68>
 8012ec8:	6023      	str	r3, [r4, #0]
 8012eca:	441c      	add	r4, r3
 8012ecc:	6025      	str	r5, [r4, #0]
 8012ece:	e004      	b.n	8012eda <_malloc_r+0x72>
 8012ed0:	6863      	ldr	r3, [r4, #4]
 8012ed2:	42a2      	cmp	r2, r4
 8012ed4:	bf0c      	ite	eq
 8012ed6:	600b      	streq	r3, [r1, #0]
 8012ed8:	6053      	strne	r3, [r2, #4]
 8012eda:	4630      	mov	r0, r6
 8012edc:	f000 f85a 	bl	8012f94 <__malloc_unlock>
 8012ee0:	f104 000b 	add.w	r0, r4, #11
 8012ee4:	1d23      	adds	r3, r4, #4
 8012ee6:	f020 0007 	bic.w	r0, r0, #7
 8012eea:	1ac2      	subs	r2, r0, r3
 8012eec:	d0cc      	beq.n	8012e88 <_malloc_r+0x20>
 8012eee:	1a1b      	subs	r3, r3, r0
 8012ef0:	50a3      	str	r3, [r4, r2]
 8012ef2:	e7c9      	b.n	8012e88 <_malloc_r+0x20>
 8012ef4:	4622      	mov	r2, r4
 8012ef6:	6864      	ldr	r4, [r4, #4]
 8012ef8:	e7cc      	b.n	8012e94 <_malloc_r+0x2c>
 8012efa:	1cc4      	adds	r4, r0, #3
 8012efc:	f024 0403 	bic.w	r4, r4, #3
 8012f00:	42a0      	cmp	r0, r4
 8012f02:	d0e3      	beq.n	8012ecc <_malloc_r+0x64>
 8012f04:	1a21      	subs	r1, r4, r0
 8012f06:	4630      	mov	r0, r6
 8012f08:	f000 f82e 	bl	8012f68 <_sbrk_r>
 8012f0c:	3001      	adds	r0, #1
 8012f0e:	d1dd      	bne.n	8012ecc <_malloc_r+0x64>
 8012f10:	e7cf      	b.n	8012eb2 <_malloc_r+0x4a>
 8012f12:	bf00      	nop
 8012f14:	24001800 	.word	0x24001800
 8012f18:	24001804 	.word	0x24001804

08012f1c <_realloc_r>:
 8012f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f1e:	4607      	mov	r7, r0
 8012f20:	4614      	mov	r4, r2
 8012f22:	460e      	mov	r6, r1
 8012f24:	b921      	cbnz	r1, 8012f30 <_realloc_r+0x14>
 8012f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f2a:	4611      	mov	r1, r2
 8012f2c:	f7ff bf9c 	b.w	8012e68 <_malloc_r>
 8012f30:	b922      	cbnz	r2, 8012f3c <_realloc_r+0x20>
 8012f32:	f7ff ff49 	bl	8012dc8 <_free_r>
 8012f36:	4625      	mov	r5, r4
 8012f38:	4628      	mov	r0, r5
 8012f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f3c:	f000 f830 	bl	8012fa0 <_malloc_usable_size_r>
 8012f40:	42a0      	cmp	r0, r4
 8012f42:	d20f      	bcs.n	8012f64 <_realloc_r+0x48>
 8012f44:	4621      	mov	r1, r4
 8012f46:	4638      	mov	r0, r7
 8012f48:	f7ff ff8e 	bl	8012e68 <_malloc_r>
 8012f4c:	4605      	mov	r5, r0
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d0f2      	beq.n	8012f38 <_realloc_r+0x1c>
 8012f52:	4631      	mov	r1, r6
 8012f54:	4622      	mov	r2, r4
 8012f56:	f7ff ff0f 	bl	8012d78 <memcpy>
 8012f5a:	4631      	mov	r1, r6
 8012f5c:	4638      	mov	r0, r7
 8012f5e:	f7ff ff33 	bl	8012dc8 <_free_r>
 8012f62:	e7e9      	b.n	8012f38 <_realloc_r+0x1c>
 8012f64:	4635      	mov	r5, r6
 8012f66:	e7e7      	b.n	8012f38 <_realloc_r+0x1c>

08012f68 <_sbrk_r>:
 8012f68:	b538      	push	{r3, r4, r5, lr}
 8012f6a:	4d06      	ldr	r5, [pc, #24]	; (8012f84 <_sbrk_r+0x1c>)
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	4604      	mov	r4, r0
 8012f70:	4608      	mov	r0, r1
 8012f72:	602b      	str	r3, [r5, #0]
 8012f74:	f7ee fb5a 	bl	800162c <_sbrk>
 8012f78:	1c43      	adds	r3, r0, #1
 8012f7a:	d102      	bne.n	8012f82 <_sbrk_r+0x1a>
 8012f7c:	682b      	ldr	r3, [r5, #0]
 8012f7e:	b103      	cbz	r3, 8012f82 <_sbrk_r+0x1a>
 8012f80:	6023      	str	r3, [r4, #0]
 8012f82:	bd38      	pop	{r3, r4, r5, pc}
 8012f84:	240025a0 	.word	0x240025a0

08012f88 <__malloc_lock>:
 8012f88:	4801      	ldr	r0, [pc, #4]	; (8012f90 <__malloc_lock+0x8>)
 8012f8a:	f000 b811 	b.w	8012fb0 <__retarget_lock_acquire_recursive>
 8012f8e:	bf00      	nop
 8012f90:	240025a8 	.word	0x240025a8

08012f94 <__malloc_unlock>:
 8012f94:	4801      	ldr	r0, [pc, #4]	; (8012f9c <__malloc_unlock+0x8>)
 8012f96:	f000 b80c 	b.w	8012fb2 <__retarget_lock_release_recursive>
 8012f9a:	bf00      	nop
 8012f9c:	240025a8 	.word	0x240025a8

08012fa0 <_malloc_usable_size_r>:
 8012fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fa4:	1f18      	subs	r0, r3, #4
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	bfbc      	itt	lt
 8012faa:	580b      	ldrlt	r3, [r1, r0]
 8012fac:	18c0      	addlt	r0, r0, r3
 8012fae:	4770      	bx	lr

08012fb0 <__retarget_lock_acquire_recursive>:
 8012fb0:	4770      	bx	lr

08012fb2 <__retarget_lock_release_recursive>:
 8012fb2:	4770      	bx	lr

08012fb4 <_init>:
 8012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb6:	bf00      	nop
 8012fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fba:	bc08      	pop	{r3}
 8012fbc:	469e      	mov	lr, r3
 8012fbe:	4770      	bx	lr

08012fc0 <_fini>:
 8012fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fc2:	bf00      	nop
 8012fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fc6:	bc08      	pop	{r3}
 8012fc8:	469e      	mov	lr, r3
 8012fca:	4770      	bx	lr
