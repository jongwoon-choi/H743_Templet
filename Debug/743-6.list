
743-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec70  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800ef08  0800ef08  0001ef08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800efa8  0800efa8  0001efa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800efb0  0800efb0  0001efb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800efb4  0800efb4  0001efb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  0800efb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001de8  24000168  0800f120  00020168  2**2
                  ALLOC
  8 ._user_heap_stack 00004000  24001f50  0800f120  00021f50  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004361b  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007008  00000000  00000000  000637b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002020  00000000  00000000  0006a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001dc0  00000000  00000000  0006c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041518  00000000  00000000  0006e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002da5a  00000000  00000000  000afab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187f49  00000000  00000000  000dd512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0026545b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008744  00000000  00000000  002654b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000168 	.word	0x24000168
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800eef0 	.word	0x0800eef0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400016c 	.word	0x2400016c
 80002d4:	0800eef0 	.word	0x0800eef0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f4:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <MX_ADC1_Init+0xe8>)
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <MX_ADC1_Init+0xec>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC1_Init+0xe8>)
 80005fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000600:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000602:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000610:	2204      	movs	r2, #4
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061a:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000622:	2201      	movs	r2, #1
 8000624:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000652:	4819      	ldr	r0, [pc, #100]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000654:	f001 fca8 	bl	8001fa8 <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800065e:	f000 fc9b 	bl	8000f98 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800066e:	f002 fabb 	bl	8002be8 <HAL_ADCEx_MultiModeConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000678:	f000 fc8e 	bl	8000f98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ADC1_Init+0xf0>)
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2306      	movs	r3, #6
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000688:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068e:	2304      	movs	r3, #4
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_ADC1_Init+0xe8>)
 80006a0:	f001 fe22 	bl	80022e8 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006aa:	f000 fc75 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	24001268 	.word	0x24001268
 80006bc:	40022000 	.word	0x40022000
 80006c0:	1d500080 	.word	0x1d500080

080006c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <MX_ADC2_Init+0xc4>)
 80006e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f8:	2204      	movs	r2, #4
 80006fa:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_ADC2_Init+0xc0>)
 800070a:	2201      	movs	r2, #1
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_ADC2_Init+0xc0>)
 800073c:	f001 fc34 	bl	8001fa8 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000746:	f000 fc27 	bl	8000f98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_ADC2_Init+0xc8>)
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2306      	movs	r3, #6
 8000750:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000756:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800075a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075c:	2304      	movs	r3, #4
 800075e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_ADC2_Init+0xc0>)
 800076e:	f001 fdbb 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000778:	f000 fc0e 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	24001204 	.word	0x24001204
 8000788:	40022100 	.word	0x40022100
 800078c:	0c900008 	.word	0x0c900008

08000790 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007aa:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <MX_ADC3_Init+0xc4>)
 80007ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000808:	f001 fbce 	bl	8001fa8 <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000812:	f000 fbc1 	bl	8000f98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_ADC3_Init+0xc8>)
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081a:	2306      	movs	r3, #6
 800081c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000822:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000826:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000828:	2304      	movs	r3, #4
 800082a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_ADC3_Init+0xc0>)
 800083a:	f001 fd55 	bl	80022e8 <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000844:	f000 fba8 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	240012cc 	.word	0x240012cc
 8000854:	58026000 	.word	0x58026000
 8000858:	2e300800 	.word	0x2e300800

0800085c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b090      	sub	sp, #64	; 0x40
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a6f      	ldr	r2, [pc, #444]	; (8000a38 <HAL_ADC_MspInit+0x1dc>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d133      	bne.n	80008e6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800087e:	4b6f      	ldr	r3, [pc, #444]	; (8000a3c <HAL_ADC_MspInit+0x1e0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a6d      	ldr	r2, [pc, #436]	; (8000a3c <HAL_ADC_MspInit+0x1e0>)
 8000886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000888:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <HAL_ADC_MspInit+0x1e0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10e      	bne.n	80008ae <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000890:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000896:	4a6a      	ldr	r2, [pc, #424]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a0:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80008a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80008ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	4a62      	ldr	r2, [pc, #392]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d0:	2303      	movs	r3, #3
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008dc:	4619      	mov	r1, r3
 80008de:	4859      	ldr	r0, [pc, #356]	; (8000a44 <HAL_ADC_MspInit+0x1e8>)
 80008e0:	f002 fcc2 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80008e4:	e0a3      	b.n	8000a2e <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC2)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a57      	ldr	r2, [pc, #348]	; (8000a48 <HAL_ADC_MspInit+0x1ec>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d169      	bne.n	80009c4 <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008f0:	4b52      	ldr	r3, [pc, #328]	; (8000a3c <HAL_ADC_MspInit+0x1e0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <HAL_ADC_MspInit+0x1e0>)
 80008f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008fa:	4b50      	ldr	r3, [pc, #320]	; (8000a3c <HAL_ADC_MspInit+0x1e0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d10e      	bne.n	8000920 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000902:	4b4f      	ldr	r3, [pc, #316]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000908:	4a4d      	ldr	r2, [pc, #308]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 800090a:	f043 0320 	orr.w	r3, r3, #32
 800090e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000912:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	623b      	str	r3, [r7, #32]
 800091e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	4a46      	ldr	r2, [pc, #280]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	4a3e      	ldr	r2, [pc, #248]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	4a37      	ldr	r2, [pc, #220]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096c:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097e:	2303      	movs	r3, #3
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098a:	4619      	mov	r1, r3
 800098c:	482d      	ldr	r0, [pc, #180]	; (8000a44 <HAL_ADC_MspInit+0x1e8>)
 800098e:	f002 fc6b 	bl	8003268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000992:	2310      	movs	r3, #16
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000996:	2303      	movs	r3, #3
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a2:	4619      	mov	r1, r3
 80009a4:	4829      	ldr	r0, [pc, #164]	; (8000a4c <HAL_ADC_MspInit+0x1f0>)
 80009a6:	f002 fc5f 	bl	8003268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009aa:	2302      	movs	r3, #2
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ae:	2303      	movs	r3, #3
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4824      	ldr	r0, [pc, #144]	; (8000a50 <HAL_ADC_MspInit+0x1f4>)
 80009be:	f002 fc53 	bl	8003268 <HAL_GPIO_Init>
}
 80009c2:	e034      	b.n	8000a2e <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <HAL_ADC_MspInit+0x1f8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12f      	bne.n	8000a2e <HAL_ADC_MspInit+0x1d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80009d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_ADC_MspInit+0x1e4>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <HAL_ADC_MspInit+0x1f0>)
 8000a1e:	f002 fc23 	bl	8003268 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000a22:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000a26:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a2a:	f001 f91b 	bl	8001c64 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000a2e:	bf00      	nop
 8000a30:	3740      	adds	r7, #64	; 0x40
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000
 8000a3c:	24000184 	.word	0x24000184
 8000a40:	58024400 	.word	0x58024400
 8000a44:	58020000 	.word	0x58020000
 8000a48:	40022100 	.word	0x40022100
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	58020400 	.word	0x58020400
 8000a54:	58026000 	.word	0x58026000

08000a58 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2224      	movs	r2, #36	; 0x24
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00e fa3b 	bl	800eee0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_DAC1_Init+0x70>)
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <MX_DAC1_Init+0x74>)
 8000a6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a70:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <MX_DAC1_Init+0x70>)
 8000a72:	f002 faa6 	bl	8002fc2 <HAL_DAC_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a7c:	f000 fa8c 	bl	8000f98 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MX_DAC1_Init+0x70>)
 8000a9c:	f002 fab4 	bl	8003008 <HAL_DAC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 fa77 	bl	8000f98 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2210      	movs	r2, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_DAC1_Init+0x70>)
 8000ab2:	f002 faa9 	bl	8003008 <HAL_DAC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000abc:	f000 fa6c 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24001330 	.word	0x24001330
 8000acc:	40007400 	.word	0x40007400

08000ad0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <HAL_DAC_MspInit+0x80>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d129      	bne.n	8000b46 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_DAC_MspInit+0x84>)
 8000af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <HAL_DAC_MspInit+0x84>)
 8000afa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000afe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_DAC_MspInit+0x84>)
 8000b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_DAC_MspInit+0x84>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_DAC_MspInit+0x84>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_DAC_MspInit+0x84>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b2e:	2330      	movs	r3, #48	; 0x30
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b32:	2303      	movs	r3, #3
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_DAC_MspInit+0x88>)
 8000b42:	f002 fb91 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40007400 	.word	0x40007400
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020000 	.word	0x58020000

08000b5c <MX_GPIO_Init>:
     PC11   ------> SDMMC1_D3
     PC12   ------> SDMMC1_CK
     PD2   ------> SDMMC1_CMD
*/
void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b72:	4b8b      	ldr	r3, [pc, #556]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	4a89      	ldr	r2, [pc, #548]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b82:	4b87      	ldr	r3, [pc, #540]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b83      	ldr	r3, [pc, #524]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	4a82      	ldr	r2, [pc, #520]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba0:	4b7f      	ldr	r3, [pc, #508]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	4b7c      	ldr	r3, [pc, #496]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a7a      	ldr	r2, [pc, #488]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b78      	ldr	r3, [pc, #480]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b74      	ldr	r3, [pc, #464]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a73      	ldr	r2, [pc, #460]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b70      	ldr	r3, [pc, #448]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b6d      	ldr	r3, [pc, #436]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a6b      	ldr	r2, [pc, #428]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b69      	ldr	r3, [pc, #420]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c08:	4b65      	ldr	r3, [pc, #404]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	4a64      	ldr	r2, [pc, #400]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c18:	4b61      	ldr	r3, [pc, #388]	; (8000da0 <MX_GPIO_Init+0x244>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2108      	movs	r1, #8
 8000c2a:	485e      	ldr	r0, [pc, #376]	; (8000da4 <MX_GPIO_Init+0x248>)
 8000c2c:	f002 fccc 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000c36:	485b      	ldr	r0, [pc, #364]	; (8000da4 <MX_GPIO_Init+0x248>)
 8000c38:	f002 fcc6 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 8000c42:	4859      	ldr	r0, [pc, #356]	; (8000da8 <MX_GPIO_Init+0x24c>)
 8000c44:	f002 fcc0 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	4857      	ldr	r0, [pc, #348]	; (8000dac <MX_GPIO_Init+0x250>)
 8000c4e:	f002 fcbb 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2140      	movs	r1, #64	; 0x40
 8000c56:	4854      	ldr	r0, [pc, #336]	; (8000da8 <MX_GPIO_Init+0x24c>)
 8000c58:	f002 fcb6 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PE3_Pin;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	484c      	ldr	r0, [pc, #304]	; (8000da4 <MX_GPIO_Init+0x248>)
 8000c74:	f002 faf8 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8000c78:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4847      	ldr	r0, [pc, #284]	; (8000dac <MX_GPIO_Init+0x250>)
 8000c8e:	f002 faeb 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8000c92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	483e      	ldr	r0, [pc, #248]	; (8000da4 <MX_GPIO_Init+0x248>)
 8000cac:	f002 fadc 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cb0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	483a      	ldr	r0, [pc, #232]	; (8000db0 <MX_GPIO_Init+0x254>)
 8000cc6:	f002 facf 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 8000cca:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4831      	ldr	r0, [pc, #196]	; (8000da8 <MX_GPIO_Init+0x24c>)
 8000ce4:	f002 fac0 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	482a      	ldr	r0, [pc, #168]	; (8000da8 <MX_GPIO_Init+0x24c>)
 8000cfe:	f002 fab3 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4824      	ldr	r0, [pc, #144]	; (8000dac <MX_GPIO_Init+0x250>)
 8000d1a:	f002 faa5 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d1e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d22:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000d30:	230c      	movs	r3, #12
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481c      	ldr	r0, [pc, #112]	; (8000dac <MX_GPIO_Init+0x250>)
 8000d3c:	f002 fa94 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4817      	ldr	r0, [pc, #92]	; (8000db4 <MX_GPIO_Init+0x258>)
 8000d56:	f002 fa87 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <MX_GPIO_Init+0x24c>)
 8000d76:	f002 fa77 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_CS_Pin;
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(F_CS_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_GPIO_Init+0x24c>)
 8000d92:	f002 fa69 	bl	8003268 <HAL_GPIO_Init>

}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	; 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58021000 	.word	0x58021000
 8000da8:	58020c00 	.word	0x58020c00
 8000dac:	58020800 	.word	0x58020800
 8000db0:	58020400 	.word	0x58020400
 8000db4:	58020000 	.word	0x58020000

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f000 fe90 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f81e 	bl	8000e00 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000dc4:	f000 f8a4 	bl	8000f10 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f7ff fec8 	bl	8000b5c <MX_GPIO_Init>
  MX_RTC_Init();
 8000dcc:	f000 f8ea 	bl	8000fa4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000dd0:	f000 f940 	bl	8001054 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000dd4:	f000 f994 	bl	8001100 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000dd8:	f000 fb8c 	bl	80014f4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000ddc:	f00d fb7e 	bl	800e4dc <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000de0:	f000 fc74 	bl	80016cc <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000de4:	f000 fcbe 	bl	8001764 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000de8:	f000 fd08 	bl	80017fc <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000dec:	f7ff fcd0 	bl	8000790 <MX_ADC3_Init>
  MX_ADC2_Init();
 8000df0:	f7ff fc68 	bl	80006c4 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000df4:	f7ff fe30 	bl	8000a58 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000df8:	f7ff fbea 	bl	80005d0 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <main+0x44>
	...

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09c      	sub	sp, #112	; 0x70
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	224c      	movs	r2, #76	; 0x4c
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f00e f866 	bl	800eee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2220      	movs	r2, #32
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f00e f860 	bl	800eee0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e20:	2002      	movs	r0, #2
 8000e22:	f003 fdf3 	bl	8004a0c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <SystemClock_Config+0x104>)
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	4a35      	ldr	r2, [pc, #212]	; (8000f04 <SystemClock_Config+0x104>)
 8000e30:	f023 0301 	bic.w	r3, r3, #1
 8000e34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <SystemClock_Config+0x104>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <SystemClock_Config+0x108>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e48:	4a2f      	ldr	r2, [pc, #188]	; (8000f08 <SystemClock_Config+0x108>)
 8000e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <SystemClock_Config+0x108>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e5c:	bf00      	nop
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <SystemClock_Config+0x108>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e6a:	d1f8      	bne.n	8000e5e <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <SystemClock_Config+0x10c>)
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e70:	f023 0303 	bic.w	r3, r3, #3
 8000e74:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <SystemClock_Config+0x10c>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e86:	2301      	movs	r3, #1
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e92:	2305      	movs	r3, #5
 8000e94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e96:	2360      	movs	r3, #96	; 0x60
 8000e98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 fdf2 	bl	8004aa0 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ec2:	f000 f869 	bl	8000f98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	233f      	movs	r3, #63	; 0x3f
 8000ec8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 f9e8 	bl	80052c0 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000ef6:	f000 f84f 	bl	8000f98 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3770      	adds	r7, #112	; 0x70
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	58000400 	.word	0x58000400
 8000f08:	58024800 	.word	0x58024800
 8000f0c:	58024400 	.word	0x58024400

08000f10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0b0      	sub	sp, #192	; 0xc0
 8000f14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	22bc      	movs	r2, #188	; 0xbc
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00d ffdf 	bl	800eee0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 8000f22:	f44f 2342 	mov.w	r3, #794624	; 0xc2000
 8000f26:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000f28:	2320      	movs	r3, #32
 8000f2a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000f2c:	2381      	movs	r3, #129	; 0x81
 8000f2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f3c:	23c0      	movs	r3, #192	; 0xc0
 8000f3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 10;
 8000f48:	230a      	movs	r3, #10
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
 8000f4c:	2360      	movs	r3, #96	; 0x60
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 5;
 8000f50:	2305      	movs	r3, #5
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 5;
 8000f54:	2305      	movs	r3, #5
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8000f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 fd29 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <PeriphCommonClock_Config+0x80>
  {
    Error_Handler();
 8000f8c:	f000 f804 	bl	8000f98 <Error_Handler>
  }
}
 8000f90:	bf00      	nop
 8000f92:	37c0      	adds	r7, #192	; 0xc0
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
}
 8000f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <Error_Handler+0x8>
	...

08000fa4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_RTC_Init+0x48>)
 8000faa:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <MX_RTC_Init+0x4c>)
 8000fac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_RTC_Init+0x48>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_RTC_Init+0x48>)
 8000fb6:	227f      	movs	r2, #127	; 0x7f
 8000fb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_RTC_Init+0x48>)
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_RTC_Init+0x48>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_RTC_Init+0x48>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_RTC_Init+0x48>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_RTC_Init+0x48>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_RTC_Init+0x48>)
 8000fda:	f006 fe83 	bl	8007ce4 <HAL_RTC_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000fe4:	f7ff ffd8 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	24001344 	.word	0x24001344
 8000ff0:	58004000 	.word	0x58004000

08000ff4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0b2      	sub	sp, #200	; 0xc8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	22bc      	movs	r2, #188	; 0xbc
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f00d ff6b 	bl	800eee0 <memset>
  if(rtcHandle->Instance==RTC)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_RTC_MspInit+0x58>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d116      	bne.n	8001042 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001014:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001018:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800101a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fcd6 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001032:	f7ff ffb1 	bl	8000f98 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_RTC_MspInit+0x5c>)
 8001038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_RTC_MspInit+0x5c>)
 800103c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001040:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	37c8      	adds	r7, #200	; 0xc8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	58004000 	.word	0x58004000
 8001050:	58024400 	.word	0x58024400

08001054 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <MX_SPI1_Init+0xa4>)
 800105a:	4a28      	ldr	r2, [pc, #160]	; (80010fc <MX_SPI1_Init+0xa8>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <MX_SPI1_Init+0xa4>)
 8001060:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <MX_SPI1_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_SPI1_Init+0xa4>)
 800106e:	2207      	movs	r2, #7
 8001070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_SPI1_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_SPI1_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_SPI1_Init+0xa4>)
 8001080:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_SPI1_Init+0xa4>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_SPI1_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_SPI1_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_SPI1_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_SPI1_Init+0xa4>)
 80010e4:	f006 ff0a 	bl	8007efc <HAL_SPI_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80010ee:	f7ff ff53 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	240013f0 	.word	0x240013f0
 80010fc:	40013000 	.word	0x40013000

08001100 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001106:	4a29      	ldr	r2, [pc, #164]	; (80011ac <MX_SPI4_Init+0xac>)
 8001108:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800110c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001110:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001114:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001118:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800111c:	2207      	movs	r2, #7
 800111e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800112e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001132:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800113a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001150:	2200      	movs	r2, #0
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800115e:	2200      	movs	r2, #0
 8001160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800116a:	2200      	movs	r2, #0
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001170:	2200      	movs	r2, #0
 8001172:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001176:	2200      	movs	r2, #0
 8001178:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800117c:	2200      	movs	r2, #0
 800117e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001182:	2200      	movs	r2, #0
 8001184:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001188:	2200      	movs	r2, #0
 800118a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_SPI4_Init+0xa8>)
 800118e:	2200      	movs	r2, #0
 8001190:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_SPI4_Init+0xa8>)
 8001194:	f006 feb2 	bl	8007efc <HAL_SPI_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800119e:	f7ff fefb 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	24001368 	.word	0x24001368
 80011ac:	40013400 	.word	0x40013400

080011b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0bc      	sub	sp, #240	; 0xf0
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	22bc      	movs	r2, #188	; 0xbc
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00d fe85 	bl	800eee0 <memset>
  if(spiHandle->Instance==SPI1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a53      	ldr	r2, [pc, #332]	; (8001328 <HAL_SPI_MspInit+0x178>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d166      	bne.n	80012ae <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 fbf2 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80011fa:	f7ff fecd 	bl	8000f98 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011fe:	4b4b      	ldr	r3, [pc, #300]	; (800132c <HAL_SPI_MspInit+0x17c>)
 8001200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001204:	4a49      	ldr	r2, [pc, #292]	; (800132c <HAL_SPI_MspInit+0x17c>)
 8001206:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800120a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <HAL_SPI_MspInit+0x17c>)
 8001210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121c:	4b43      	ldr	r3, [pc, #268]	; (800132c <HAL_SPI_MspInit+0x17c>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	4a42      	ldr	r2, [pc, #264]	; (800132c <HAL_SPI_MspInit+0x17c>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122c:	4b3f      	ldr	r3, [pc, #252]	; (800132c <HAL_SPI_MspInit+0x17c>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <HAL_SPI_MspInit+0x17c>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	4a3a      	ldr	r2, [pc, #232]	; (800132c <HAL_SPI_MspInit+0x17c>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <HAL_SPI_MspInit+0x17c>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800126a:	2301      	movs	r3, #1
 800126c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001270:	2305      	movs	r3, #5
 8001272:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001276:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800127a:	4619      	mov	r1, r3
 800127c:	482c      	ldr	r0, [pc, #176]	; (8001330 <HAL_SPI_MspInit+0x180>)
 800127e:	f001 fff3 	bl	8003268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001282:	2318      	movs	r3, #24
 8001284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001294:	2301      	movs	r3, #1
 8001296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800129a:	2305      	movs	r3, #5
 800129c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012a4:	4619      	mov	r1, r3
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <HAL_SPI_MspInit+0x184>)
 80012a8:	f001 ffde 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80012ac:	e038      	b.n	8001320 <HAL_SPI_MspInit+0x170>
  else if(spiHandle->Instance==SPI4)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a21      	ldr	r2, [pc, #132]	; (8001338 <HAL_SPI_MspInit+0x188>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d133      	bne.n	8001320 <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_SPI_MspInit+0x17c>)
 80012ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012be:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_SPI_MspInit+0x17c>)
 80012c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_SPI_MspInit+0x17c>)
 80012ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_SPI_MspInit+0x17c>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_SPI_MspInit+0x17c>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_SPI_MspInit+0x17c>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80012f4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80012f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001308:	2301      	movs	r3, #1
 800130a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800130e:	2305      	movs	r3, #5
 8001310:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001314:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001318:	4619      	mov	r1, r3
 800131a:	4808      	ldr	r0, [pc, #32]	; (800133c <HAL_SPI_MspInit+0x18c>)
 800131c:	f001 ffa4 	bl	8003268 <HAL_GPIO_Init>
}
 8001320:	bf00      	nop
 8001322:	37f0      	adds	r7, #240	; 0xf0
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40013000 	.word	0x40013000
 800132c:	58024400 	.word	0x58024400
 8001330:	58020c00 	.word	0x58020c00
 8001334:	58020400 	.word	0x58020400
 8001338:	40013400 	.word	0x40013400
 800133c:	58021000 	.word	0x58021000

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_MspInit+0x30>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_MspInit+0x30>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_MspInit+0x30>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58024400 	.word	0x58024400

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 fc00 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <OTG_FS_IRQHandler+0x10>)
 80013ce:	f002 fa6b 	bl	80038a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	24001b48 	.word	0x24001b48

080013dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e0:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <SystemInit+0xec>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a38      	ldr	r2, [pc, #224]	; (80014c8 <SystemInit+0xec>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <SystemInit+0xf0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	2b06      	cmp	r3, #6
 80013fa:	d807      	bhi.n	800140c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <SystemInit+0xf0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 030f 	bic.w	r3, r3, #15
 8001404:	4a31      	ldr	r2, [pc, #196]	; (80014cc <SystemInit+0xf0>)
 8001406:	f043 0307 	orr.w	r3, r3, #7
 800140a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <SystemInit+0xf4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a2f      	ldr	r2, [pc, #188]	; (80014d0 <SystemInit+0xf4>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <SystemInit+0xf4>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <SystemInit+0xf4>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	492b      	ldr	r1, [pc, #172]	; (80014d0 <SystemInit+0xf4>)
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <SystemInit+0xf8>)
 8001426:	4013      	ands	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <SystemInit+0xf0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SystemInit+0xf0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 030f 	bic.w	r3, r3, #15
 800143e:	4a23      	ldr	r2, [pc, #140]	; (80014cc <SystemInit+0xf0>)
 8001440:	f043 0307 	orr.w	r3, r3, #7
 8001444:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <SystemInit+0xf4>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <SystemInit+0xf4>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <SystemInit+0xf4>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <SystemInit+0xf4>)
 800145a:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <SystemInit+0xfc>)
 800145c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <SystemInit+0xf4>)
 8001460:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <SystemInit+0x100>)
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <SystemInit+0xf4>)
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <SystemInit+0x104>)
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <SystemInit+0xf4>)
 800146c:	2200      	movs	r2, #0
 800146e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <SystemInit+0xf4>)
 8001472:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <SystemInit+0x104>)
 8001474:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <SystemInit+0xf4>)
 8001478:	2200      	movs	r2, #0
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <SystemInit+0xf4>)
 800147e:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <SystemInit+0x104>)
 8001480:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <SystemInit+0xf4>)
 8001484:	2200      	movs	r2, #0
 8001486:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <SystemInit+0xf4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <SystemInit+0xf4>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <SystemInit+0xf4>)
 8001496:	2200      	movs	r2, #0
 8001498:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <SystemInit+0x108>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <SystemInit+0x10c>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014a6:	d202      	bcs.n	80014ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <SystemInit+0x110>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <SystemInit+0x114>)
 80014b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SystemInit+0xec>)
 80014b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014bc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	52002000 	.word	0x52002000
 80014d0:	58024400 	.word	0x58024400
 80014d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014d8:	02020200 	.word	0x02020200
 80014dc:	01ff0000 	.word	0x01ff0000
 80014e0:	01010280 	.word	0x01010280
 80014e4:	5c001000 	.word	0x5c001000
 80014e8:	ffff0000 	.word	0xffff0000
 80014ec:	51008108 	.word	0x51008108
 80014f0:	52004000 	.word	0x52004000

080014f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	222c      	movs	r2, #44	; 0x2c
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00d fcdd 	bl	800eee0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <MX_TIM1_Init+0x114>)
 8001528:	4a38      	ldr	r2, [pc, #224]	; (800160c <MX_TIM1_Init+0x118>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <MX_TIM1_Init+0x114>)
 800152e:	2277      	movs	r2, #119	; 0x77
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <MX_TIM1_Init+0x114>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <MX_TIM1_Init+0x114>)
 800153a:	2263      	movs	r2, #99	; 0x63
 800153c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <MX_TIM1_Init+0x114>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <MX_TIM1_Init+0x114>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <MX_TIM1_Init+0x114>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001550:	482d      	ldr	r0, [pc, #180]	; (8001608 <MX_TIM1_Init+0x114>)
 8001552:	f006 fdf0 	bl	8008136 <HAL_TIM_PWM_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800155c:	f7ff fd1c 	bl	8000f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800156c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001570:	4619      	mov	r1, r3
 8001572:	4825      	ldr	r0, [pc, #148]	; (8001608 <MX_TIM1_Init+0x114>)
 8001574:	f007 faae 	bl	8008ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800157e:	f7ff fd0b 	bl	8000f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001582:	2360      	movs	r3, #96	; 0x60
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158a:	2300      	movs	r3, #0
 800158c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800158e:	2308      	movs	r3, #8
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800159e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a2:	2204      	movs	r2, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4818      	ldr	r0, [pc, #96]	; (8001608 <MX_TIM1_Init+0x114>)
 80015a8:	f006 fe1c 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80015b2:	f7ff fcf1 	bl	8000f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM1_Init+0x114>)
 80015ec:	f007 fafa 	bl	8008be4 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80015f6:	f7ff fccf 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM1_Init+0x114>)
 80015fc:	f000 f82a 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8001600:	bf00      	nop
 8001602:	3758      	adds	r7, #88	; 0x58
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	24001478 	.word	0x24001478
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_TIM_PWM_MspInit+0x3c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10e      	bne.n	8001640 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_TIM_PWM_MspInit+0x40>)
 8001624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_TIM_PWM_MspInit+0x40>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_TIM_PWM_MspInit+0x40>)
 8001634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40010000 	.word	0x40010000
 8001650:	58024400 	.word	0x58024400

08001654 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_TIM_MspPostInit+0x6c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d11f      	bne.n	80016b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_TIM_MspPostInit+0x70>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_TIM_MspPostInit+0x70>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_TIM_MspPostInit+0x70>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001698:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_TIM_MspPostInit+0x74>)
 80016b2:	f001 fdd9 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40010000 	.word	0x40010000
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58021000 	.word	0x58021000

080016cc <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_UART4_Init+0x90>)
 80016d2:	4a23      	ldr	r2, [pc, #140]	; (8001760 <MX_UART4_Init+0x94>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <MX_UART4_Init+0x90>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_UART4_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_UART4_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_UART4_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_UART4_Init+0x90>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_UART4_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_UART4_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_UART4_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_UART4_Init+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_UART4_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001714:	4811      	ldr	r0, [pc, #68]	; (800175c <MX_UART4_Init+0x90>)
 8001716:	f007 fae3 	bl	8008ce0 <HAL_UART_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001720:	f7ff fc3a 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001724:	2100      	movs	r1, #0
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_UART4_Init+0x90>)
 8001728:	f008 fa30 	bl	8009b8c <HAL_UARTEx_SetTxFifoThreshold>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001732:	f7ff fc31 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	4808      	ldr	r0, [pc, #32]	; (800175c <MX_UART4_Init+0x90>)
 800173a:	f008 fa65 	bl	8009c08 <HAL_UARTEx_SetRxFifoThreshold>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001744:	f7ff fc28 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_UART4_Init+0x90>)
 800174a:	f008 f9e6 	bl	8009b1a <HAL_UARTEx_DisableFifoMode>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001754:	f7ff fc20 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	240015e4 	.word	0x240015e4
 8001760:	40004c00 	.word	0x40004c00

08001764 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 800176a:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <MX_USART1_UART_Init+0x94>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ac:	4811      	ldr	r0, [pc, #68]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 80017ae:	f007 fa97 	bl	8008ce0 <HAL_UART_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017b8:	f7ff fbee 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017bc:	2100      	movs	r1, #0
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 80017c0:	f008 f9e4 	bl	8009b8c <HAL_UARTEx_SetTxFifoThreshold>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017ca:	f7ff fbe5 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ce:	2100      	movs	r1, #0
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 80017d2:	f008 fa19 	bl	8009c08 <HAL_UARTEx_SetRxFifoThreshold>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017dc:	f7ff fbdc 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_USART1_UART_Init+0x90>)
 80017e2:	f008 f99a 	bl	8009b1a <HAL_UARTEx_DisableFifoMode>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017ec:	f7ff fbd4 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	24001554 	.word	0x24001554
 80017f8:	40011000 	.word	0x40011000

080017fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001802:	4a23      	ldr	r2, [pc, #140]	; (8001890 <MX_USART3_UART_Init+0x94>)
 8001804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_USART3_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_USART3_UART_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_USART3_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001844:	4811      	ldr	r0, [pc, #68]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001846:	f007 fa4b 	bl	8008ce0 <HAL_UART_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001850:	f7ff fba2 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_USART3_UART_Init+0x90>)
 8001858:	f008 f998 	bl	8009b8c <HAL_UARTEx_SetTxFifoThreshold>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001862:	f7ff fb99 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4808      	ldr	r0, [pc, #32]	; (800188c <MX_USART3_UART_Init+0x90>)
 800186a:	f008 f9cd 	bl	8009c08 <HAL_UARTEx_SetRxFifoThreshold>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001874:	f7ff fb90 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_USART3_UART_Init+0x90>)
 800187a:	f008 f94e 	bl	8009b1a <HAL_UARTEx_DisableFifoMode>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001884:	f7ff fb88 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	240014c4 	.word	0x240014c4
 8001890:	40004800 	.word	0x40004800

08001894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b0bc      	sub	sp, #240	; 0xf0
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ac:	f107 0320 	add.w	r3, r7, #32
 80018b0:	22bc      	movs	r2, #188	; 0xbc
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00d fb13 	bl	800eee0 <memset>
  if(uartHandle->Instance==UART4)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6d      	ldr	r2, [pc, #436]	; (8001a74 <HAL_UART_MspInit+0x1e0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d142      	bne.n	800194a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018c4:	2302      	movs	r3, #2
 80018c6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 f880 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018de:	f7ff fb5b 	bl	8000f98 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018e2:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 80018e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e8:	4a63      	ldr	r2, [pc, #396]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 80018ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018f2:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 80018f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001906:	4a5c      	ldr	r2, [pc, #368]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800191e:	2303      	movs	r3, #3
 8001920:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001936:	2308      	movs	r3, #8
 8001938:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001940:	4619      	mov	r1, r3
 8001942:	484e      	ldr	r0, [pc, #312]	; (8001a7c <HAL_UART_MspInit+0x1e8>)
 8001944:	f001 fc90 	bl	8003268 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001948:	e090      	b.n	8001a6c <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_UART_MspInit+0x1ec>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d143      	bne.n	80019dc <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	4618      	mov	r0, r3
 8001964:	f004 f838 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800196e:	f7ff fb13 	bl	8000f98 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001978:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001996:	4a38      	ldr	r2, [pc, #224]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80019c8:	2304      	movs	r3, #4
 80019ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019d2:	4619      	mov	r1, r3
 80019d4:	482b      	ldr	r0, [pc, #172]	; (8001a84 <HAL_UART_MspInit+0x1f0>)
 80019d6:	f001 fc47 	bl	8003268 <HAL_GPIO_Init>
}
 80019da:	e047      	b.n	8001a6c <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART3)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <HAL_UART_MspInit+0x1f4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d142      	bne.n	8001a6c <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019e6:	2302      	movs	r3, #2
 80019e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 ffef 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8001a00:	f7ff faca 	bl	8000f98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_UART_MspInit+0x1e4>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a64:	4619      	mov	r1, r3
 8001a66:	4807      	ldr	r0, [pc, #28]	; (8001a84 <HAL_UART_MspInit+0x1f0>)
 8001a68:	f001 fbfe 	bl	8003268 <HAL_GPIO_Init>
}
 8001a6c:	bf00      	nop
 8001a6e:	37f0      	adds	r7, #240	; 0xf0
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40004c00 	.word	0x40004c00
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	58020000 	.word	0x58020000
 8001a80:	40011000 	.word	0x40011000
 8001a84:	58020400 	.word	0x58020400
 8001a88:	40004800 	.word	0x40004800

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a90:	f7ff fca4 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f00d f9ed 	bl	800ee98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7ff f97b 	bl	8000db8 <main>
  bx  lr
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ac8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001acc:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8001ad0:	0800efb8 	.word	0x0800efb8
  ldr r2, =_sbss
 8001ad4:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8001ad8:	24001f50 	.word	0x24001f50

08001adc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC3_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f001 fa2c 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001aec:	f003 fd9e 	bl	800562c <HAL_RCC_GetSysClockFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_Init+0x68>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	4913      	ldr	r1, [pc, #76]	; (8001b4c <HAL_Init+0x6c>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_Init+0x68>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_Init+0x6c>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_Init+0x70>)
 8001b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_Init+0x74>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 f814 	bl	8001b58 <HAL_InitTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e002      	b.n	8001b40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3a:	f7ff fc01 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	0800ef4c 	.word	0x0800ef4c
 8001b50:	24000004 	.word	0x24000004
 8001b54:	24000000 	.word	0x24000000

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e021      	b.n	8001bb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_InitTick+0x64>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_InitTick+0x60>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 fa11 	bl	8002faa <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f001 f9db 	bl	8002f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_InitTick+0x68>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2400000c 	.word	0x2400000c
 8001bbc:	24000000 	.word	0x24000000
 8001bc0:	24000008 	.word	0x24000008

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2400000c 	.word	0x2400000c
 8001be8:	24001674 	.word	0x24001674

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	24001674 	.word	0x24001674

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2400000c 	.word	0x2400000c

08001c4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetREVID+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0c1b      	lsrs	r3, r3, #16
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	5c001000 	.word	0x5c001000

08001c64 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	401a      	ands	r2, r3
 8001c78:	4904      	ldr	r1, [pc, #16]	; (8001c8c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	58000400 	.word	0x58000400

08001c90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3360      	adds	r3, #96	; 0x60
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	611a      	str	r2, [r3, #16]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3360      	adds	r3, #96	; 0x60
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
  }
}
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3330      	adds	r3, #48	; 0x30
 8001db0:	461a      	mov	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	4413      	add	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	211f      	movs	r1, #31
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	0e9b      	lsrs	r3, r3, #26
 8001dd8:	f003 011f 	and.w	r1, r3, #31
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	431a      	orrs	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3314      	adds	r3, #20
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	0e5b      	lsrs	r3, r3, #25
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	0d1b      	lsrs	r3, r3, #20
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2107      	movs	r1, #7
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	0d1b      	lsrs	r3, r3, #20
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0318 	and.w	r3, r3, #24
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e74:	40d9      	lsrs	r1, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	400b      	ands	r3, r1
 8001e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	000fffff 	.word	0x000fffff

08001e98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6093      	str	r3, [r2, #8]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	5fffffc0 	.word	0x5fffffc0

08001ebc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed0:	d101      	bne.n	8001ed6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	6fffffc0 	.word	0x6fffffc0

08001f0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f20:	d101      	bne.n	8001f26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <LL_ADC_IsEnabled+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_ADC_IsEnabled+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d101      	bne.n	8001f72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d101      	bne.n	8001f98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e18e      	b.n	80022e0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe fc43 	bl	800085c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff67 	bl	8001ebc <LL_ADC_IsDeepPowerDownEnabled>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff4d 	bl	8001e98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff82 	bl	8001f0c <LL_ADC_IsInternalRegulatorEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d114      	bne.n	8002038 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff66 	bl	8001ee4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002018:	4b9a      	ldr	r3, [pc, #616]	; (8002284 <HAL_ADC_Init+0x2dc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	4a9a      	ldr	r2, [pc, #616]	; (8002288 <HAL_ADC_Init+0x2e0>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	3301      	adds	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800202a:	e002      	b.n	8002032 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	3b01      	subs	r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff65 	bl	8001f0c <LL_ADC_IsInternalRegulatorEnabled>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff76 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 800206e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 8128 	bne.w	80022ce <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 8124 	bne.w	80022ce <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff4a 	bl	8001f34 <LL_ADC_IsEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d136      	bne.n	8002114 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a78      	ldr	r2, [pc, #480]	; (800228c <HAL_ADC_Init+0x2e4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_ADC_Init+0x112>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a76      	ldr	r2, [pc, #472]	; (8002290 <HAL_ADC_Init+0x2e8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10e      	bne.n	80020d8 <HAL_ADC_Init+0x130>
 80020ba:	4874      	ldr	r0, [pc, #464]	; (800228c <HAL_ADC_Init+0x2e4>)
 80020bc:	f7ff ff3a 	bl	8001f34 <LL_ADC_IsEnabled>
 80020c0:	4604      	mov	r4, r0
 80020c2:	4873      	ldr	r0, [pc, #460]	; (8002290 <HAL_ADC_Init+0x2e8>)
 80020c4:	f7ff ff36 	bl	8001f34 <LL_ADC_IsEnabled>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4323      	orrs	r3, r4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	e008      	b.n	80020ea <HAL_ADC_Init+0x142>
 80020d8:	486e      	ldr	r0, [pc, #440]	; (8002294 <HAL_ADC_Init+0x2ec>)
 80020da:	f7ff ff2b 	bl	8001f34 <LL_ADC_IsEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a66      	ldr	r2, [pc, #408]	; (800228c <HAL_ADC_Init+0x2e4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d004      	beq.n	8002102 <HAL_ADC_Init+0x15a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a64      	ldr	r2, [pc, #400]	; (8002290 <HAL_ADC_Init+0x2e8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_ADC_Init+0x15e>
 8002102:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_ADC_Init+0x2f0>)
 8002104:	e000      	b.n	8002108 <HAL_ADC_Init+0x160>
 8002106:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_ADC_Init+0x2f4>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f7ff fdbe 	bl	8001c90 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002114:	f7ff fd9a 	bl	8001c4c <HAL_GetREVID>
 8002118:	4603      	mov	r3, r0
 800211a:	f241 0203 	movw	r2, #4099	; 0x1003
 800211e:	4293      	cmp	r3, r2
 8002120:	d914      	bls.n	800214c <HAL_ADC_Init+0x1a4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d110      	bne.n	800214c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7d5b      	ldrb	r3, [r3, #21]
 800212e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002134:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800213a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7f1b      	ldrb	r3, [r3, #28]
 8002140:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002142:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002144:	f043 030c 	orr.w	r3, r3, #12
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e00d      	b.n	8002168 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7d5b      	ldrb	r3, [r3, #21]
 8002150:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002156:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800215c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7f1b      	ldrb	r3, [r3, #28]
 8002162:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7f1b      	ldrb	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	3b01      	subs	r3, #1
 8002176:	045b      	lsls	r3, r3, #17
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_ADC_Init+0x2f8>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	69b9      	ldr	r1, [r7, #24]
 80021aa:	430b      	orrs	r3, r1
 80021ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fed1 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 80021b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fede 	bl	8001f80 <LL_ADC_INJ_IsConversionOngoing>
 80021c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d14a      	bne.n	8002262 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d147      	bne.n	8002262 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7d1b      	ldrb	r3, [r3, #20]
 80021d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_ADC_Init+0x2fc>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d11b      	bne.n	8002236 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_ADC_Init+0x300>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002212:	3a01      	subs	r2, #1
 8002214:	0411      	lsls	r1, r2, #16
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002226:	430a      	orrs	r2, r1
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	611a      	str	r2, [r3, #16]
 8002234:	e007      	b.n	8002246 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0201 	bic.w	r2, r2, #1
 8002244:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fb93 	bl	8002988 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d120      	bne.n	80022ac <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f023 010f 	bic.w	r1, r3, #15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
 8002282:	e01b      	b.n	80022bc <HAL_ADC_Init+0x314>
 8002284:	24000000 	.word	0x24000000
 8002288:	053e2d63 	.word	0x053e2d63
 800228c:	40022000 	.word	0x40022000
 8002290:	40022100 	.word	0x40022100
 8002294:	58026000 	.word	0x58026000
 8002298:	40022300 	.word	0x40022300
 800229c:	58026300 	.word	0x58026300
 80022a0:	fff0c003 	.word	0xfff0c003
 80022a4:	ffffbffc 	.word	0xffffbffc
 80022a8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 020f 	bic.w	r2, r2, #15
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f023 0303 	bic.w	r3, r3, #3
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
 80022cc:	e007      	b.n	80022de <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	f043 0210 	orr.w	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022de:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3724      	adds	r7, #36	; 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}

080022e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b0a1      	sub	sp, #132	; 0x84
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a9d      	ldr	r2, [pc, #628]	; (8002578 <HAL_ADC_ConfigChannel+0x290>)
 8002302:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x2a>
 800230e:	2302      	movs	r3, #2
 8002310:	e321      	b.n	8002956 <HAL_ADC_ConfigChannel+0x66e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fe1b 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8306 	bne.w	8002938 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <HAL_ADC_ConfigChannel+0x62>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2201      	movs	r2, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	e016      	b.n	8002378 <HAL_ADC_ConfigChannel+0x90>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800235a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800235c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002362:	2320      	movs	r3, #32
 8002364:	e003      	b.n	800236e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2201      	movs	r2, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	69d1      	ldr	r1, [r2, #28]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	430b      	orrs	r3, r1
 8002384:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	f7ff fd04 	bl	8001da0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fddc 	bl	8001f5a <LL_ADC_REG_IsConversionOngoing>
 80023a2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fde9 	bl	8001f80 <LL_ADC_INJ_IsConversionOngoing>
 80023ae:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 80b3 	bne.w	800251e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 80af 	bne.w	800251e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f7ff fd13 	bl	8001df8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023d2:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_ADC_ConfigChannel+0x294>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80023da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023de:	d10b      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x110>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	e01d      	b.n	8002434 <HAL_ADC_ConfigChannel+0x14c>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <HAL_ADC_ConfigChannel+0x136>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	e00a      	b.n	8002434 <HAL_ADC_ConfigChannel+0x14c>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d027      	beq.n	800248e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6919      	ldr	r1, [r3, #16]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244c:	f7ff fc54 	bl	8001cf8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6919      	ldr	r1, [r3, #16]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7e5b      	ldrb	r3, [r3, #25]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d102      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x17e>
 8002460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002464:	e000      	b.n	8002468 <HAL_ADC_ConfigChannel+0x180>
 8002466:	2300      	movs	r3, #0
 8002468:	461a      	mov	r2, r3
 800246a:	f7ff fc7e 	bl	8001d6a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6919      	ldr	r1, [r3, #16]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	7e1b      	ldrb	r3, [r3, #24]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x19c>
 800247e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002482:	e000      	b.n	8002486 <HAL_ADC_ConfigChannel+0x19e>
 8002484:	2300      	movs	r3, #0
 8002486:	461a      	mov	r2, r3
 8002488:	f7ff fc56 	bl	8001d38 <LL_ADC_SetDataRightShift>
 800248c:	e047      	b.n	800251e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	069b      	lsls	r3, r3, #26
 800249e:	429a      	cmp	r2, r3
 80024a0:	d107      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024b0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	069b      	lsls	r3, r3, #26
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d107      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024d4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	069b      	lsls	r3, r3, #26
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d107      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024f8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002500:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	069b      	lsls	r3, r3, #26
 800250a:	429a      	cmp	r2, r3
 800250c:	d107      	bne.n	800251e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800251c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fd06 	bl	8001f34 <LL_ADC_IsEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 820d 	bne.w	800294a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	461a      	mov	r2, r3
 800253e:	f7ff fc87 	bl	8001e50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <HAL_ADC_ConfigChannel+0x290>)
 8002548:	4293      	cmp	r3, r2
 800254a:	f040 8133 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800255a:	2b00      	cmp	r3, #0
 800255c:	d110      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x298>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	3301      	adds	r3, #1
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2b09      	cmp	r3, #9
 800256c:	bf94      	ite	ls
 800256e:	2301      	movls	r3, #1
 8002570:	2300      	movhi	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	e01e      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x2cc>
 8002576:	bf00      	nop
 8002578:	47ff0000 	.word	0x47ff0000
 800257c:	5c001000 	.word	0x5c001000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800258e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002590:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800259c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	bf94      	ite	ls
 80025ae:	2301      	movls	r3, #1
 80025b0:	2300      	movhi	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d079      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x2ec>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d2:	e015      	b.n	8002600 <HAL_ADC_ConfigChannel+0x318>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	069b      	lsls	r3, r3, #26
 80025fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x338>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	3301      	adds	r3, #1
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	e017      	b.n	8002650 <HAL_ADC_ConfigChannel+0x368>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e003      	b.n	8002644 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800263c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	ea42 0103 	orr.w	r1, r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x38e>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	051b      	lsls	r3, r3, #20
 8002674:	e018      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x3c0>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	430b      	orrs	r3, r1
 80026aa:	e07e      	b.n	80027aa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x3e0>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c6:	e015      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x40c>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x42c>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	e017      	b.n	8002744 <HAL_ADC_ConfigChannel+0x45c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	61bb      	str	r3, [r7, #24]
  return result;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x488>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	3b1e      	subs	r3, #30
 8002768:	051b      	lsls	r3, r3, #20
 800276a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800276e:	e01b      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x4c0>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	60fb      	str	r3, [r7, #12]
  return result;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 021f 	and.w	r2, r3, #31
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	3b1e      	subs	r3, #30
 80027a2:	051b      	lsls	r3, r3, #20
 80027a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a8:	430b      	orrs	r3, r1
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	6892      	ldr	r2, [r2, #8]
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7ff fb22 	bl	8001df8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f280 80c6 	bge.w	800294a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a67      	ldr	r2, [pc, #412]	; (8002960 <HAL_ADC_ConfigChannel+0x678>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <HAL_ADC_ConfigChannel+0x4ea>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a65      	ldr	r2, [pc, #404]	; (8002964 <HAL_ADC_ConfigChannel+0x67c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x4ee>
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_ADC_ConfigChannel+0x680>)
 80027d4:	e000      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x4f0>
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <HAL_ADC_ConfigChannel+0x684>)
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fa7f 	bl	8001cdc <LL_ADC_GetCommonPathInternalCh>
 80027de:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a5e      	ldr	r2, [pc, #376]	; (8002960 <HAL_ADC_ConfigChannel+0x678>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0x50c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5d      	ldr	r2, [pc, #372]	; (8002964 <HAL_ADC_ConfigChannel+0x67c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d10e      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x52a>
 80027f4:	485a      	ldr	r0, [pc, #360]	; (8002960 <HAL_ADC_ConfigChannel+0x678>)
 80027f6:	f7ff fb9d 	bl	8001f34 <LL_ADC_IsEnabled>
 80027fa:	4604      	mov	r4, r0
 80027fc:	4859      	ldr	r0, [pc, #356]	; (8002964 <HAL_ADC_ConfigChannel+0x67c>)
 80027fe:	f7ff fb99 	bl	8001f34 <LL_ADC_IsEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	4323      	orrs	r3, r4
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e008      	b.n	8002824 <HAL_ADC_ConfigChannel+0x53c>
 8002812:	4857      	ldr	r0, [pc, #348]	; (8002970 <HAL_ADC_ConfigChannel+0x688>)
 8002814:	f7ff fb8e 	bl	8001f34 <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d07d      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_ADC_ConfigChannel+0x68c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d130      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x5ac>
 8002832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d12b      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a4b      	ldr	r2, [pc, #300]	; (8002970 <HAL_ADC_ConfigChannel+0x688>)
 8002842:	4293      	cmp	r3, r2
 8002844:	f040 8081 	bne.w	800294a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a44      	ldr	r2, [pc, #272]	; (8002960 <HAL_ADC_ConfigChannel+0x678>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_ADC_ConfigChannel+0x574>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a43      	ldr	r2, [pc, #268]	; (8002964 <HAL_ADC_ConfigChannel+0x67c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d101      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x578>
 800285c:	4a42      	ldr	r2, [pc, #264]	; (8002968 <HAL_ADC_ConfigChannel+0x680>)
 800285e:	e000      	b.n	8002862 <HAL_ADC_ConfigChannel+0x57a>
 8002860:	4a42      	ldr	r2, [pc, #264]	; (800296c <HAL_ADC_ConfigChannel+0x684>)
 8002862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002864:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f7ff fa23 	bl	8001cb6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002870:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_ADC_ConfigChannel+0x690>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	4a41      	ldr	r2, [pc, #260]	; (800297c <HAL_ADC_ConfigChannel+0x694>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002884:	e002      	b.n	800288c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002892:	e05a      	b.n	800294a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a39      	ldr	r2, [pc, #228]	; (8002980 <HAL_ADC_ConfigChannel+0x698>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d11e      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x5f4>
 800289e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d119      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a30      	ldr	r2, [pc, #192]	; (8002970 <HAL_ADC_ConfigChannel+0x688>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d14b      	bne.n	800294a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <HAL_ADC_ConfigChannel+0x678>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x5de>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a28      	ldr	r2, [pc, #160]	; (8002964 <HAL_ADC_ConfigChannel+0x67c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x5e2>
 80028c6:	4a28      	ldr	r2, [pc, #160]	; (8002968 <HAL_ADC_ConfigChannel+0x680>)
 80028c8:	e000      	b.n	80028cc <HAL_ADC_ConfigChannel+0x5e4>
 80028ca:	4a28      	ldr	r2, [pc, #160]	; (800296c <HAL_ADC_ConfigChannel+0x684>)
 80028cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7ff f9ee 	bl	8001cb6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028da:	e036      	b.n	800294a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a28      	ldr	r2, [pc, #160]	; (8002984 <HAL_ADC_ConfigChannel+0x69c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d131      	bne.n	800294a <HAL_ADC_ConfigChannel+0x662>
 80028e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d12c      	bne.n	800294a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_ADC_ConfigChannel+0x688>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d127      	bne.n	800294a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a18      	ldr	r2, [pc, #96]	; (8002960 <HAL_ADC_ConfigChannel+0x678>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d004      	beq.n	800290e <HAL_ADC_ConfigChannel+0x626>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a16      	ldr	r2, [pc, #88]	; (8002964 <HAL_ADC_ConfigChannel+0x67c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x62a>
 800290e:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_ADC_ConfigChannel+0x680>)
 8002910:	e000      	b.n	8002914 <HAL_ADC_ConfigChannel+0x62c>
 8002912:	4a16      	ldr	r2, [pc, #88]	; (800296c <HAL_ADC_ConfigChannel+0x684>)
 8002914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002916:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800291a:	4619      	mov	r1, r3
 800291c:	4610      	mov	r0, r2
 800291e:	f7ff f9ca 	bl	8001cb6 <LL_ADC_SetCommonPathInternalCh>
 8002922:	e012      	b.n	800294a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002936:	e008      	b.n	800294a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002952:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002956:	4618      	mov	r0, r3
 8002958:	3784      	adds	r7, #132	; 0x84
 800295a:	46bd      	mov	sp, r7
 800295c:	bd90      	pop	{r4, r7, pc}
 800295e:	bf00      	nop
 8002960:	40022000 	.word	0x40022000
 8002964:	40022100 	.word	0x40022100
 8002968:	40022300 	.word	0x40022300
 800296c:	58026300 	.word	0x58026300
 8002970:	58026000 	.word	0x58026000
 8002974:	cb840000 	.word	0xcb840000
 8002978:	24000000 	.word	0x24000000
 800297c:	053e2d63 	.word	0x053e2d63
 8002980:	c7520000 	.word	0xc7520000
 8002984:	cfb80000 	.word	0xcfb80000

08002988 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a79      	ldr	r2, [pc, #484]	; (8002b7c <ADC_ConfigureBoostMode+0x1f4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <ADC_ConfigureBoostMode+0x1c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a78      	ldr	r2, [pc, #480]	; (8002b80 <ADC_ConfigureBoostMode+0x1f8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d109      	bne.n	80029b8 <ADC_ConfigureBoostMode+0x30>
 80029a4:	4b77      	ldr	r3, [pc, #476]	; (8002b84 <ADC_ConfigureBoostMode+0x1fc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e008      	b.n	80029ca <ADC_ConfigureBoostMode+0x42>
 80029b8:	4b73      	ldr	r3, [pc, #460]	; (8002b88 <ADC_ConfigureBoostMode+0x200>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01c      	beq.n	8002a08 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029ce:	f002 ffa7 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 80029d2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029dc:	d010      	beq.n	8002a00 <ADC_ConfigureBoostMode+0x78>
 80029de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029e2:	d871      	bhi.n	8002ac8 <ADC_ConfigureBoostMode+0x140>
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d002      	beq.n	80029f0 <ADC_ConfigureBoostMode+0x68>
 80029ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ee:	d16b      	bne.n	8002ac8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	60fb      	str	r3, [r7, #12]
        break;
 80029fe:	e066      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	60fb      	str	r3, [r7, #12]
        break;
 8002a06:	e062      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a0c:	f003 ff24 	bl	8006858 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a10:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a1a:	d051      	beq.n	8002ac0 <ADC_ConfigureBoostMode+0x138>
 8002a1c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a20:	d854      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a22:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a26:	d047      	beq.n	8002ab8 <ADC_ConfigureBoostMode+0x130>
 8002a28:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a2c:	d84e      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a2e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a32:	d03d      	beq.n	8002ab0 <ADC_ConfigureBoostMode+0x128>
 8002a34:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a38:	d848      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3e:	d033      	beq.n	8002aa8 <ADC_ConfigureBoostMode+0x120>
 8002a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a44:	d842      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a46:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a4a:	d029      	beq.n	8002aa0 <ADC_ConfigureBoostMode+0x118>
 8002a4c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a50:	d83c      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a52:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a56:	d01a      	beq.n	8002a8e <ADC_ConfigureBoostMode+0x106>
 8002a58:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a5c:	d836      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a5e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a62:	d014      	beq.n	8002a8e <ADC_ConfigureBoostMode+0x106>
 8002a64:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a68:	d830      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6e:	d00e      	beq.n	8002a8e <ADC_ConfigureBoostMode+0x106>
 8002a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a74:	d82a      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a7a:	d008      	beq.n	8002a8e <ADC_ConfigureBoostMode+0x106>
 8002a7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a80:	d824      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x144>
 8002a82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a86:	d002      	beq.n	8002a8e <ADC_ConfigureBoostMode+0x106>
 8002a88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a8c:	d11e      	bne.n	8002acc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	0c9b      	lsrs	r3, r3, #18
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
        break;
 8002a9e:	e016      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
        break;
 8002aa6:	e012      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	60fb      	str	r3, [r7, #12]
        break;
 8002aae:	e00e      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	60fb      	str	r3, [r7, #12]
        break;
 8002ab6:	e00a      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	09db      	lsrs	r3, r3, #7
 8002abc:	60fb      	str	r3, [r7, #12]
        break;
 8002abe:	e006      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	60fb      	str	r3, [r7, #12]
        break;
 8002ac6:	e002      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
        break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002acc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ace:	f7ff f8bd 	bl	8001c4c <HAL_GetREVID>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d815      	bhi.n	8002b08 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <ADC_ConfigureBoostMode+0x204>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d908      	bls.n	8002af6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002af4:	e03e      	b.n	8002b74 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b04:	609a      	str	r2, [r3, #8]
}
 8002b06:	e035      	b.n	8002b74 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <ADC_ConfigureBoostMode+0x208>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d808      	bhi.n	8002b28 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b24:	609a      	str	r2, [r3, #8]
}
 8002b26:	e025      	b.n	8002b74 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <ADC_ConfigureBoostMode+0x20c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d80a      	bhi.n	8002b46 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	e016      	b.n	8002b74 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <ADC_ConfigureBoostMode+0x210>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d80a      	bhi.n	8002b64 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b60:	609a      	str	r2, [r3, #8]
}
 8002b62:	e007      	b.n	8002b74 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40022100 	.word	0x40022100
 8002b84:	40022300 	.word	0x40022300
 8002b88:	58026300 	.word	0x58026300
 8002b8c:	01312d00 	.word	0x01312d00
 8002b90:	005f5e10 	.word	0x005f5e10
 8002b94:	00bebc20 	.word	0x00bebc20
 8002b98:	017d7840 	.word	0x017d7840

08002b9c <LL_ADC_IsEnabled>:
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <LL_ADC_IsEnabled+0x18>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <LL_ADC_IsEnabled+0x1a>
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b09f      	sub	sp, #124	; 0x7c
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0be      	b.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a5c      	ldr	r2, [pc, #368]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d102      	bne.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c20:	4b5b      	ldr	r3, [pc, #364]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	e001      	b.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e09d      	b.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ffb9 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002c50:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ffb3 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d17f      	bne.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d17c      	bne.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a47      	ldr	r2, [pc, #284]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a46      	ldr	r2, [pc, #280]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c7c:	4b45      	ldr	r3, [pc, #276]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c7e:	e000      	b.n	8002c82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c80:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c82:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d039      	beq.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a3a      	ldr	r2, [pc, #232]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a38      	ldr	r2, [pc, #224]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002cb2:	4836      	ldr	r0, [pc, #216]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cb4:	f7ff ff72 	bl	8002b9c <LL_ADC_IsEnabled>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	4835      	ldr	r0, [pc, #212]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cbc:	f7ff ff6e 	bl	8002b9c <LL_ADC_IsEnabled>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4323      	orrs	r3, r4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e008      	b.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002cd0:	4832      	ldr	r0, [pc, #200]	; (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cd2:	f7ff ff63 	bl	8002b9c <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d047      	beq.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	6811      	ldr	r1, [r2, #0]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	6892      	ldr	r2, [r2, #8]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfe:	e03a      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1e      	ldr	r2, [pc, #120]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d004      	beq.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10e      	bne.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002d20:	481a      	ldr	r0, [pc, #104]	; (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d22:	f7ff ff3b 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d26:	4604      	mov	r4, r0
 8002d28:	4819      	ldr	r0, [pc, #100]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d2a:	f7ff ff37 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4323      	orrs	r3, r4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	e008      	b.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d3e:	4817      	ldr	r0, [pc, #92]	; (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d40:	f7ff ff2c 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d60:	e009      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d74:	e000      	b.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	377c      	adds	r7, #124	; 0x7c
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40022100 	.word	0x40022100
 8002d94:	40022300 	.word	0x40022300
 8002d98:	58026300 	.word	0x58026300
 8002d9c:	58026000 	.word	0x58026000
 8002da0:	fffff0e0 	.word	0xfffff0e0

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <__NVIC_SetPriorityGrouping+0x40>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00
 8002de8:	05fa0000 	.word	0x05fa0000

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	; (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff40 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff90 	bl	8002e98 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff33 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa4 	bl	8002f00 <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e014      	b.n	8002ffe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	791b      	ldrb	r3, [r3, #4]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fd fd73 	bl	8000ad0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	795b      	ldrb	r3, [r3, #5]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_DAC_ConfigChannel+0x18>
 800301c:	2302      	movs	r3, #2
 800301e:	e11d      	b.n	800325c <HAL_DAC_ConfigChannel+0x254>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2202      	movs	r2, #2
 800302a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d174      	bne.n	800311e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003034:	f7fe fdda 	bl	8001bec <HAL_GetTick>
 8003038:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d134      	bne.n	80030aa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003040:	e011      	b.n	8003066 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003042:	f7fe fdd3 	bl	8001bec <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d90a      	bls.n	8003066 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f043 0208 	orr.w	r2, r3, #8
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2203      	movs	r2, #3
 8003060:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0fa      	b.n	800325c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306c:	4b7d      	ldr	r3, [pc, #500]	; (8003264 <HAL_DAC_ConfigChannel+0x25c>)
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e6      	bne.n	8003042 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003074:	2001      	movs	r0, #1
 8003076:	f7fe fdc5 	bl	8001c04 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	6992      	ldr	r2, [r2, #24]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
 8003084:	e01e      	b.n	80030c4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003086:	f7fe fdb1 	bl	8001bec <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d90a      	bls.n	80030aa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f043 0208 	orr.w	r2, r3, #8
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2203      	movs	r2, #3
 80030a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0d8      	b.n	800325c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	dbe8      	blt.n	8003086 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f7fe fda5 	bl	8001c04 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	6992      	ldr	r2, [r2, #24]
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	ea02 0103 	and.w	r1, r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	21ff      	movs	r1, #255	; 0xff
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	ea02 0103 	and.w	r1, r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6a1a      	ldr	r2, [r3, #32]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	409a      	lsls	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d11d      	bne.n	8003162 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	221f      	movs	r2, #31
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4013      	ands	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2207      	movs	r2, #7
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4013      	ands	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e00f      	b.n	80031ac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d102      	bne.n	800319a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003194:	2301      	movs	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e008      	b.n	80031ac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80031a2:	2301      	movs	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e001      	b.n	80031ac <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	400a      	ands	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4013      	ands	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	22c0      	movs	r2, #192	; 0xc0
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43da      	mvns	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	400a      	ands	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20008000 	.word	0x20008000

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003276:	4b89      	ldr	r3, [pc, #548]	; (800349c <HAL_GPIO_Init+0x234>)
 8003278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800327a:	e194      	b.n	80035a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8186 	beq.w	80035a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d00b      	beq.n	80032b4 <HAL_GPIO_Init+0x4c>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d007      	beq.n	80032b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a8:	2b11      	cmp	r3, #17
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d130      	bne.n	8003316 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ea:	2201      	movs	r2, #1
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f003 0201 	and.w	r2, r3, #1
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0xee>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b12      	cmp	r3, #18
 8003354:	d123      	bne.n	800339e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	69b9      	ldr	r1, [r7, #24]
 800339a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0203 	and.w	r2, r3, #3
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80e0 	beq.w	80035a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e0:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_GPIO_Init+0x238>)
 80033e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033e6:	4a2e      	ldr	r2, [pc, #184]	; (80034a0 <HAL_GPIO_Init+0x238>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_GPIO_Init+0x238>)
 80033f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fe:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <HAL_GPIO_Init+0x23c>)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <HAL_GPIO_Init+0x240>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d052      	beq.n	80034d0 <HAL_GPIO_Init+0x268>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <HAL_GPIO_Init+0x244>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d031      	beq.n	8003496 <HAL_GPIO_Init+0x22e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <HAL_GPIO_Init+0x248>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d02b      	beq.n	8003492 <HAL_GPIO_Init+0x22a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <HAL_GPIO_Init+0x24c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d025      	beq.n	800348e <HAL_GPIO_Init+0x226>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <HAL_GPIO_Init+0x250>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01f      	beq.n	800348a <HAL_GPIO_Init+0x222>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_GPIO_Init+0x254>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d019      	beq.n	8003486 <HAL_GPIO_Init+0x21e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_GPIO_Init+0x258>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_GPIO_Init+0x21a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <HAL_GPIO_Init+0x25c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00d      	beq.n	800347e <HAL_GPIO_Init+0x216>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_GPIO_Init+0x260>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <HAL_GPIO_Init+0x212>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_GPIO_Init+0x264>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_GPIO_Init+0x20e>
 8003472:	2309      	movs	r3, #9
 8003474:	e02d      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003476:	230a      	movs	r3, #10
 8003478:	e02b      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800347a:	2308      	movs	r3, #8
 800347c:	e029      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800347e:	2307      	movs	r3, #7
 8003480:	e027      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003482:	2306      	movs	r3, #6
 8003484:	e025      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003486:	2305      	movs	r3, #5
 8003488:	e023      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800348a:	2304      	movs	r3, #4
 800348c:	e021      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800348e:	2303      	movs	r3, #3
 8003490:	e01f      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003492:	2302      	movs	r3, #2
 8003494:	e01d      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 8003496:	2301      	movs	r3, #1
 8003498:	e01b      	b.n	80034d2 <HAL_GPIO_Init+0x26a>
 800349a:	bf00      	nop
 800349c:	58000080 	.word	0x58000080
 80034a0:	58024400 	.word	0x58024400
 80034a4:	58000400 	.word	0x58000400
 80034a8:	58020000 	.word	0x58020000
 80034ac:	58020400 	.word	0x58020400
 80034b0:	58020800 	.word	0x58020800
 80034b4:	58020c00 	.word	0x58020c00
 80034b8:	58021000 	.word	0x58021000
 80034bc:	58021400 	.word	0x58021400
 80034c0:	58021800 	.word	0x58021800
 80034c4:	58021c00 	.word	0x58021c00
 80034c8:	58022000 	.word	0x58022000
 80034cc:	58022400 	.word	0x58022400
 80034d0:	2300      	movs	r3, #0
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	f002 0203 	and.w	r2, r2, #3
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	4093      	lsls	r3, r2
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e2:	4938      	ldr	r1, [pc, #224]	; (80035c4 <HAL_GPIO_Init+0x35c>)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3302      	adds	r3, #2
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800356a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f ae63 	bne.w	800327c <HAL_GPIO_Init+0x14>
  }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3724      	adds	r7, #36	; 0x24
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	58000400 	.word	0x58000400

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fc:	b08f      	sub	sp, #60	; 0x3c
 80035fe:	af0a      	add	r7, sp, #40	; 0x28
 8003600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e116      	b.n	800383a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f00b f8fe 	bl	800e828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f006 fc89 	bl	8009f62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	687e      	ldr	r6, [r7, #4]
 8003658:	466d      	mov	r5, sp
 800365a:	f106 0410 	add.w	r4, r6, #16
 800365e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800366a:	e885 0003 	stmia.w	r5, {r0, r1}
 800366e:	1d33      	adds	r3, r6, #4
 8003670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	f006 fb54 	bl	8009d20 <USB_CoreInit>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0d7      	b.n	800383a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f006 fc77 	bl	8009f84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e04a      	b.n	8003732 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	333d      	adds	r3, #61	; 0x3d
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	333c      	adds	r3, #60	; 0x3c
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	b298      	uxth	r0, r3
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	3342      	adds	r3, #66	; 0x42
 80036d8:	4602      	mov	r2, r0
 80036da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	333f      	adds	r3, #63	; 0x3f
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3344      	adds	r3, #68	; 0x44
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3348      	adds	r3, #72	; 0x48
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3350      	adds	r3, #80	; 0x50
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	3301      	adds	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d3af      	bcc.n	800369c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e044      	b.n	80037cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	3301      	adds	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d3b5      	bcc.n	8003742 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	687e      	ldr	r6, [r7, #4]
 80037de:	466d      	mov	r5, sp
 80037e0:	f106 0410 	add.w	r4, r6, #16
 80037e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f4:	1d33      	adds	r3, r6, #4
 80037f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f8:	6838      	ldr	r0, [r7, #0]
 80037fa:	f006 fbed 	bl	8009fd8 <USB_DevInit>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e014      	b.n	800383a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f001 f8bf 	bl	80049ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f007 fc6d 	bl	800b112 <USB_DevDisconnect>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003842 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_PCD_Start+0x1c>
 800385a:	2302      	movs	r3, #2
 800385c:	e020      	b.n	80038a0 <HAL_PCD_Start+0x5e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	2b01      	cmp	r3, #1
 800386c:	d109      	bne.n	8003882 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003872:	2b01      	cmp	r3, #1
 8003874:	d005      	beq.n	8003882 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f006 fb5a 	bl	8009f40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f007 fc1d 	bl	800b0d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b08d      	sub	sp, #52	; 0x34
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f007 fcdb 	bl	800b27a <USB_GetMode>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 83ca 	bne.w	8004060 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f007 fc3f 	bl	800b154 <USB_ReadInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 83c0 	beq.w	800405e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f007 fc36 	bl	800b154 <USB_ReadInterrupts>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f002 0202 	and.w	r2, r2, #2
 8003900:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f007 fc24 	bl	800b154 <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b10      	cmp	r3, #16
 8003914:	d161      	bne.n	80039da <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0210 	bic.w	r2, r2, #16
 8003924:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 020f 	and.w	r2, r3, #15
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	0c5b      	lsrs	r3, r3, #17
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	2b02      	cmp	r3, #2
 8003950:	d124      	bne.n	800399c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d035      	beq.n	80039ca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396c:	b29b      	uxth	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	6a38      	ldr	r0, [r7, #32]
 8003972:	f007 fa5b 	bl	800ae2c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003982:	441a      	add	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003994:	441a      	add	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	619a      	str	r2, [r3, #24]
 800399a:	e016      	b.n	80039ca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	0c5b      	lsrs	r3, r3, #17
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d110      	bne.n	80039ca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039ae:	2208      	movs	r2, #8
 80039b0:	4619      	mov	r1, r3
 80039b2:	6a38      	ldr	r0, [r7, #32]
 80039b4:	f007 fa3a 	bl	800ae2c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039c4:	441a      	add	r2, r3
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0210 	orr.w	r2, r2, #16
 80039d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f007 fbb8 	bl	800b154 <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039ee:	d16e      	bne.n	8003ace <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f007 fbbe 	bl	800b17a <USB_ReadDevAllOutEpInterrupt>
 80039fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a00:	e062      	b.n	8003ac8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d057      	beq.n	8003abc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f007 fbe3 	bl	800b1e2 <USB_ReadDevOutEPInterrupt>
 8003a1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00c      	beq.n	8003a42 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	461a      	mov	r2, r3
 8003a36:	2301      	movs	r3, #1
 8003a38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fe0b 	bl	8004658 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00c      	beq.n	8003a66 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 ff05 	bl	8004870 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2310      	movs	r3, #16
 8003a80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	3301      	adds	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d199      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f007 fb3e 	bl	800b154 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae2:	f040 80c0 	bne.w	8003c66 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f007 fb5f 	bl	800b1ae <USB_ReadDevAllInEpInterrupt>
 8003af0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003af6:	e0b2      	b.n	8003c5e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80a7 	beq.w	8003c52 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f007 fb85 	bl	800b21e <USB_ReadDevInEPInterrupt>
 8003b14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d057      	beq.n	8003bd0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	2201      	movs	r2, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69f9      	ldr	r1, [r7, #28]
 8003b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b40:	4013      	ands	r3, r2
 8003b42:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	461a      	mov	r2, r3
 8003b52:	2301      	movs	r3, #1
 8003b54:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d132      	bne.n	8003bc4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3348      	adds	r3, #72	; 0x48
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4403      	add	r3, r0
 8003b7e:	3344      	adds	r3, #68	; 0x44
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4419      	add	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4403      	add	r3, r0
 8003b92:	3348      	adds	r3, #72	; 0x48
 8003b94:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <HAL_PCD_IRQHandler+0x31c>
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	3350      	adds	r3, #80	; 0x50
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	f007 fb8e 	bl	800b2e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f00a fead 	bl	800e92a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be6:	461a      	mov	r2, r3
 8003be8:	2308      	movs	r3, #8
 8003bea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	461a      	mov	r2, r3
 8003c04:	2310      	movs	r3, #16
 8003c06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2340      	movs	r3, #64	; 0x40
 8003c22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fc75 	bl	800453c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	3301      	adds	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f47f af49 	bne.w	8003af8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f007 fa72 	bl	800b154 <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7a:	d122      	bne.n	8003cc2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fea5 	bl	80049f4 <HAL_PCDEx_LPM_Callback>
 8003caa:	e002      	b.n	8003cb2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f00a feb3 	bl	800ea18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f007 fa44 	bl	800b154 <USB_ReadInterrupts>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d112      	bne.n	8003cfe <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d102      	bne.n	8003cee <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f00a fe6f 	bl	800e9cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f007 fa26 	bl	800b154 <USB_ReadInterrupts>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d12:	d121      	bne.n	8003d58 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003d22:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d111      	bne.n	8003d52 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d48:	2101      	movs	r1, #1
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fe52 	bl	80049f4 <HAL_PCDEx_LPM_Callback>
 8003d50:	e002      	b.n	8003d58 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f00a fe3a 	bl	800e9cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f007 f9f9 	bl	800b154 <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	f040 80c7 	bne.w	8003efe <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2110      	movs	r1, #16
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f006 fa82 	bl	800a294 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d94:	e056      	b.n	8003e44 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	461a      	mov	r2, r3
 8003da4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003da8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dc8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	461a      	mov	r2, r3
 8003df8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dfc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	3301      	adds	r3, #1
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d3a3      	bcc.n	8003d96 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e7a:	f043 030b 	orr.w	r3, r3, #11
 8003e7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e90:	f043 030b 	orr.w	r3, r3, #11
 8003e94:	6453      	str	r3, [r2, #68]	; 0x44
 8003e96:	e015      	b.n	8003ec4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f242 032b 	movw	r3, #8235	; 0x202b
 8003eac:	4313      	orrs	r3, r2
 8003eae:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ebe:	f043 030b 	orr.w	r3, r3, #11
 8003ec2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ed6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f007 f9f9 	bl	800b2e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f007 f926 	bl	800b154 <USB_ReadInterrupts>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f12:	d124      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f007 f9bd 	bl	800b298 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f006 fa17 	bl	800a356 <USB_GetDevSpeed>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681c      	ldr	r4, [r3, #0]
 8003f34:	f001 fcf4 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8003f38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	4620      	mov	r0, r4
 8003f44:	f005 ff5a 	bl	8009dfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f00a fd16 	bl	800e97a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f007 f8f6 	bl	800b154 <USB_ReadInterrupts>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d10a      	bne.n	8003f88 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f00a fcf3 	bl	800e95e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f002 0208 	and.w	r2, r2, #8
 8003f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f007 f8e1 	bl	800b154 <USB_ReadInterrupts>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f9c:	d10f      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f00a fd55 	bl	800ea58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f007 f8c6 	bl	800b154 <USB_ReadInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f00a fd28 	bl	800ea34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f007 f8ab 	bl	800b154 <USB_ReadInterrupts>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d10a      	bne.n	8004020 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f00a fd36 	bl	800ea7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800401e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f007 f895 	bl	800b154 <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b04      	cmp	r3, #4
 8004032:	d115      	bne.n	8004060 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f00a fd26 	bl	800ea98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	e000      	b.n	8004060 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800405e:	bf00      	nop
    }
  }
}
 8004060:	3734      	adds	r7, #52	; 0x34
 8004062:	46bd      	mov	sp, r7
 8004064:	bd90      	pop	{r4, r7, pc}

08004066 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_PCD_SetAddress+0x1a>
 800407c:	2302      	movs	r3, #2
 800407e:	e013      	b.n	80040a8 <HAL_PCD_SetAddress+0x42>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f006 fff3 	bl	800b084 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	4608      	mov	r0, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	70fb      	strb	r3, [r7, #3]
 80040c2:	460b      	mov	r3, r1
 80040c4:	803b      	strh	r3, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	da0f      	bge.n	80040f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 020f 	and.w	r2, r3, #15
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	3338      	adds	r3, #56	; 0x38
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	3304      	adds	r3, #4
 80040ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	705a      	strb	r2, [r3, #1]
 80040f4:	e00f      	b.n	8004116 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004122:	883a      	ldrh	r2, [r7, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	78ba      	ldrb	r2, [r7, #2]
 800412c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	785b      	ldrb	r3, [r3, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004140:	78bb      	ldrb	r3, [r7, #2]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d102      	bne.n	800414c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_PCD_EP_Open+0xaa>
 8004156:	2302      	movs	r3, #2
 8004158:	e00e      	b.n	8004178 <HAL_PCD_EP_Open+0xc8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	4618      	mov	r0, r3
 800416a:	f006 f919 	bl	800a3a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004176:	7afb      	ldrb	r3, [r7, #11]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800418c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004190:	2b00      	cmp	r3, #0
 8004192:	da0f      	bge.n	80041b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	f003 020f 	and.w	r2, r3, #15
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3338      	adds	r3, #56	; 0x38
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	3304      	adds	r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	705a      	strb	r2, [r3, #1]
 80041b2:	e00f      	b.n	80041d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	f003 020f 	and.w	r2, r3, #15
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	3304      	adds	r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_PCD_EP_Close+0x6e>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e00e      	b.n	800420c <HAL_PCD_EP_Close+0x8c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68f9      	ldr	r1, [r7, #12]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f006 f957 	bl	800a4b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	460b      	mov	r3, r1
 8004222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	b2da      	uxtb	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d102      	bne.n	8004270 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004270:	7afb      	ldrb	r3, [r7, #11]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	6979      	ldr	r1, [r7, #20]
 8004288:	f006 fc3a 	bl	800ab00 <USB_EP0StartXfer>
 800428c:	e008      	b.n	80042a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	6979      	ldr	r1, [r7, #20]
 800429c:	f006 f9e4 	bl	800a668 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042cc:	681b      	ldr	r3, [r3, #0]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b086      	sub	sp, #24
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	460b      	mov	r3, r1
 80042e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ea:	7afb      	ldrb	r3, [r7, #11]
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	3338      	adds	r3, #56	; 0x38
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4413      	add	r3, r2
 80042fe:	3304      	adds	r3, #4
 8004300:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2201      	movs	r2, #1
 8004318:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800431a:	7afb      	ldrb	r3, [r7, #11]
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	b2da      	uxtb	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d102      	bne.n	8004334 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004334:	7afb      	ldrb	r3, [r7, #11]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6979      	ldr	r1, [r7, #20]
 800434c:	f006 fbd8 	bl	800ab00 <USB_EP0StartXfer>
 8004350:	e008      	b.n	8004364 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	6979      	ldr	r1, [r7, #20]
 8004360:	f006 f982 	bl	800a668 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	f003 020f 	and.w	r2, r3, #15
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	d901      	bls.n	800438c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e050      	b.n	800442e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800438c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004390:	2b00      	cmp	r3, #0
 8004392:	da0f      	bge.n	80043b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	f003 020f 	and.w	r2, r3, #15
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	3338      	adds	r3, #56	; 0x38
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	3304      	adds	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	705a      	strb	r2, [r3, #1]
 80043b2:	e00d      	b.n	80043d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_PCD_EP_SetStall+0x82>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e01e      	b.n	800442e <HAL_PCD_EP_SetStall+0xc0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68f9      	ldr	r1, [r7, #12]
 80043fe:	4618      	mov	r0, r3
 8004400:	f006 fd6c 	bl	800aedc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	b2d9      	uxtb	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800441e:	461a      	mov	r2, r3
 8004420:	f006 ff5e 	bl	800b2e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 020f 	and.w	r2, r3, #15
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d901      	bls.n	8004454 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e042      	b.n	80044da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004458:	2b00      	cmp	r3, #0
 800445a:	da0f      	bge.n	800447c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	3338      	adds	r3, #56	; 0x38
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4413      	add	r3, r2
 8004470:	3304      	adds	r3, #4
 8004472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	705a      	strb	r2, [r3, #1]
 800447a:	e00f      	b.n	800449c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	3304      	adds	r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_PCD_EP_ClrStall+0x86>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e00e      	b.n	80044da <HAL_PCD_EP_ClrStall+0xa4>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f006 fd74 	bl	800afb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_PCD_EP_Flush+0x1a>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e01b      	b.n	8004534 <HAL_PCD_EP_Flush+0x52>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004508:	2b00      	cmp	r3, #0
 800450a:	da09      	bge.n	8004520 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f005 febb 	bl	800a294 <USB_FlushTxFifo>
 800451e:	e004      	b.n	800452a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f005 fedb 	bl	800a2e0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	3338      	adds	r3, #56	; 0x38
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	4413      	add	r3, r2
 8004560:	3304      	adds	r3, #4
 8004562:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	429a      	cmp	r2, r3
 800456e:	d901      	bls.n	8004574 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e06c      	b.n	800464e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	429a      	cmp	r2, r3
 8004588:	d902      	bls.n	8004590 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3303      	adds	r3, #3
 8004594:	089b      	lsrs	r3, r3, #2
 8004596:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004598:	e02b      	b.n	80045f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d902      	bls.n	80045b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3303      	adds	r3, #3
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68d9      	ldr	r1, [r3, #12]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4603      	mov	r3, r0
 80045d4:	6978      	ldr	r0, [r7, #20]
 80045d6:	f006 fbeb 	bl	800adb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	441a      	add	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	441a      	add	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	b29b      	uxth	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	d809      	bhi.n	800461c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004610:	429a      	cmp	r2, r3
 8004612:	d203      	bcs.n	800461c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1be      	bne.n	800459a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	d811      	bhi.n	800464c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	2201      	movs	r2, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	43db      	mvns	r3, r3
 8004642:	6939      	ldr	r1, [r7, #16]
 8004644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004648:	4013      	ands	r3, r2
 800464a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	333c      	adds	r3, #60	; 0x3c
 8004670:	3304      	adds	r3, #4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b01      	cmp	r3, #1
 800468c:	f040 80a0 	bne.w	80047d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d015      	beq.n	80046c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a72      	ldr	r2, [pc, #456]	; (8004868 <PCD_EP_OutXfrComplete_int+0x210>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	f240 80dd 	bls.w	800485e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80d7 	beq.w	800485e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	461a      	mov	r2, r3
 80046be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c2:	6093      	str	r3, [r2, #8]
 80046c4:	e0cb      	b.n	800485e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	2320      	movs	r3, #32
 80046e0:	6093      	str	r3, [r2, #8]
 80046e2:	e0bc      	b.n	800485e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 80b7 	bne.w	800485e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a5d      	ldr	r2, [pc, #372]	; (8004868 <PCD_EP_OutXfrComplete_int+0x210>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d90f      	bls.n	8004718 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	461a      	mov	r2, r3
 8004710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004714:	6093      	str	r3, [r2, #8]
 8004716:	e0a2      	b.n	800485e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800472a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	0159      	lsls	r1, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	440b      	add	r3, r1
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800473e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4403      	add	r3, r0
 800474e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004752:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4403      	add	r3, r0
 8004776:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4419      	add	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	4613      	mov	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4403      	add	r3, r0
 800478c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004790:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d114      	bne.n	80047c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d108      	bne.n	80047c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047ba:	461a      	mov	r2, r3
 80047bc:	2101      	movs	r1, #1
 80047be:	f006 fd8f 	bl	800b2e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f00a f893 	bl	800e8f4 <HAL_PCD_DataOutStageCallback>
 80047ce:	e046      	b.n	800485e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a26      	ldr	r2, [pc, #152]	; (800486c <PCD_EP_OutXfrComplete_int+0x214>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d124      	bne.n	8004822 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	461a      	mov	r2, r3
 80047f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f4:	6093      	str	r3, [r2, #8]
 80047f6:	e032      	b.n	800485e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	2320      	movs	r3, #32
 8004812:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f00a f86a 	bl	800e8f4 <HAL_PCD_DataOutStageCallback>
 8004820:	e01d      	b.n	800485e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d114      	bne.n	8004852 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d108      	bne.n	8004852 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800484a:	461a      	mov	r2, r3
 800484c:	2100      	movs	r1, #0
 800484e:	f006 fd47 	bl	800b2e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f00a f84b 	bl	800e8f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	4f54300a 	.word	0x4f54300a
 800486c:	4f54310a 	.word	0x4f54310a

08004870 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	333c      	adds	r3, #60	; 0x3c
 8004888:	3304      	adds	r3, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d90e      	bls.n	80048c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	461a      	mov	r2, r3
 80048be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f00a f803 	bl	800e8d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d90c      	bls.n	80048ec <PCD_EP_OutSetupPacket_int+0x7c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d108      	bne.n	80048ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048e4:	461a      	mov	r2, r3
 80048e6:	2101      	movs	r1, #1
 80048e8:	f006 fcfa 	bl	800b2e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	4f54300a 	.word	0x4f54300a

080048fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
 8004908:	4613      	mov	r3, r2
 800490a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800491a:	883b      	ldrh	r3, [r7, #0]
 800491c:	0419      	lsls	r1, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	430a      	orrs	r2, r1
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
 8004928:	e028      	b.n	800497c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004938:	2300      	movs	r3, #0
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	e00d      	b.n	800495a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	3340      	adds	r3, #64	; 0x40
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4413      	add	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	3301      	adds	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
 800495a:	7bfa      	ldrb	r2, [r7, #15]
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	3b01      	subs	r3, #1
 8004960:	429a      	cmp	r2, r3
 8004962:	d3ec      	bcc.n	800493e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004964:	883b      	ldrh	r3, [r7, #0]
 8004966:	0418      	lsls	r0, r3, #16
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	3b01      	subs	r3, #1
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	4302      	orrs	r2, r0
 8004974:	3340      	adds	r3, #64	; 0x40
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	10000003 	.word	0x10000003

080049f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_PWREx_ConfigSupply+0x70>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d00a      	beq.n	8004a36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a20:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <HAL_PWREx_ConfigSupply+0x70>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d001      	beq.n	8004a32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e01f      	b.n	8004a72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e01d      	b.n	8004a72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_PWREx_ConfigSupply+0x70>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f023 0207 	bic.w	r2, r3, #7
 8004a3e:	490f      	ldr	r1, [pc, #60]	; (8004a7c <HAL_PWREx_ConfigSupply+0x70>)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a46:	f7fd f8d1 	bl	8001bec <HAL_GetTick>
 8004a4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a4c:	e009      	b.n	8004a62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a4e:	f7fd f8cd 	bl	8001bec <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a5c:	d901      	bls.n	8004a62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e007      	b.n	8004a72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_PWREx_ConfigSupply+0x70>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6e:	d1ee      	bne.n	8004a4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	58024800 	.word	0x58024800

08004a80 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	60d3      	str	r3, [r2, #12]
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	58024800 	.word	0x58024800

08004aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08c      	sub	sp, #48	; 0x30
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e3ff      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8087 	beq.w	8004bce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac0:	4b99      	ldr	r3, [pc, #612]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aca:	4b97      	ldr	r3, [pc, #604]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d007      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x46>
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	2b18      	cmp	r3, #24
 8004ada:	d110      	bne.n	8004afe <HAL_RCC_OscConfig+0x5e>
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae6:	4b90      	ldr	r3, [pc, #576]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d06c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x12c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d168      	bne.n	8004bcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e3d9      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x76>
 8004b08:	4b87      	ldr	r3, [pc, #540]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a86      	ldr	r2, [pc, #536]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e02e      	b.n	8004b74 <HAL_RCC_OscConfig+0xd4>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x98>
 8004b1e:	4b82      	ldr	r3, [pc, #520]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a81      	ldr	r2, [pc, #516]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b7f      	ldr	r3, [pc, #508]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7e      	ldr	r2, [pc, #504]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xd4>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0xbc>
 8004b42:	4b79      	ldr	r3, [pc, #484]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a78      	ldr	r2, [pc, #480]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b76      	ldr	r3, [pc, #472]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a75      	ldr	r2, [pc, #468]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xd4>
 8004b5c:	4b72      	ldr	r3, [pc, #456]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a71      	ldr	r2, [pc, #452]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b6f      	ldr	r3, [pc, #444]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6e      	ldr	r2, [pc, #440]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd f836 	bl	8001bec <HAL_GetTick>
 8004b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd f832 	bl	8001bec <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e38d      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b96:	4b64      	ldr	r3, [pc, #400]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe4>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd f822 	bl	8001bec <HAL_GetTick>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fd f81e 	bl	8001bec <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e379      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bbe:	4b5a      	ldr	r3, [pc, #360]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x10c>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80ae 	beq.w	8004d38 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bdc:	4b52      	ldr	r3, [pc, #328]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004be6:	4b50      	ldr	r3, [pc, #320]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_RCC_OscConfig+0x162>
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	2b18      	cmp	r3, #24
 8004bf6:	d13a      	bne.n	8004c6e <HAL_RCC_OscConfig+0x1ce>
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d135      	bne.n	8004c6e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c02:	4b49      	ldr	r3, [pc, #292]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e34b      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	f7fd f817 	bl	8001c4c <HAL_GetREVID>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d817      	bhi.n	8004c58 <HAL_RCC_OscConfig+0x1b8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d108      	bne.n	8004c42 <HAL_RCC_OscConfig+0x1a2>
 8004c30:	4b3d      	ldr	r3, [pc, #244]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c38:	4a3b      	ldr	r2, [pc, #236]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	e07a      	b.n	8004d38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c42:	4b39      	ldr	r3, [pc, #228]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	031b      	lsls	r3, r3, #12
 8004c50:	4935      	ldr	r1, [pc, #212]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c56:	e06f      	b.n	8004d38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b33      	ldr	r3, [pc, #204]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	4930      	ldr	r1, [pc, #192]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c6c:	e064      	b.n	8004d38 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d045      	beq.n	8004d02 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c76:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 0219 	bic.w	r2, r3, #25
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	4929      	ldr	r1, [pc, #164]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fc ffb0 	bl	8001bec <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fc ffac 	bl	8001bec <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e307      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cae:	f7fc ffcd 	bl	8001c4c <HAL_GetREVID>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d817      	bhi.n	8004cec <HAL_RCC_OscConfig+0x24c>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d108      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x236>
 8004cc4:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ccc:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd2:	6053      	str	r3, [r2, #4]
 8004cd4:	e030      	b.n	8004d38 <HAL_RCC_OscConfig+0x298>
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	031b      	lsls	r3, r3, #12
 8004ce4:	4910      	ldr	r1, [pc, #64]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
 8004cea:	e025      	b.n	8004d38 <HAL_RCC_OscConfig+0x298>
 8004cec:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	490b      	ldr	r1, [pc, #44]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
 8004d00:	e01a      	b.n	8004d38 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <HAL_RCC_OscConfig+0x288>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fc ff6d 	bl	8001bec <HAL_GetTick>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d16:	f7fc ff69 	bl	8001bec <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d903      	bls.n	8004d2c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e2c4      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
 8004d28:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d2c:	4ba4      	ldr	r3, [pc, #656]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ee      	bne.n	8004d16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80a9 	beq.w	8004e98 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d46:	4b9e      	ldr	r3, [pc, #632]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d50:	4b9b      	ldr	r3, [pc, #620]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d007      	beq.n	8004d6c <HAL_RCC_OscConfig+0x2cc>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b18      	cmp	r3, #24
 8004d60:	d13a      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x338>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d135      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d6c:	4b94      	ldr	r3, [pc, #592]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_OscConfig+0x2e4>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e296      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d84:	f7fc ff62 	bl	8001c4c <HAL_GetREVID>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d817      	bhi.n	8004dc2 <HAL_RCC_OscConfig+0x322>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d108      	bne.n	8004dac <HAL_RCC_OscConfig+0x30c>
 8004d9a:	4b89      	ldr	r3, [pc, #548]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004da2:	4a87      	ldr	r2, [pc, #540]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004daa:	e075      	b.n	8004e98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dac:	4b84      	ldr	r3, [pc, #528]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	069b      	lsls	r3, r3, #26
 8004dba:	4981      	ldr	r1, [pc, #516]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dc0:	e06a      	b.n	8004e98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dc2:	4b7f      	ldr	r3, [pc, #508]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	497b      	ldr	r1, [pc, #492]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd6:	e05f      	b.n	8004e98 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d042      	beq.n	8004e66 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004de0:	4b77      	ldr	r3, [pc, #476]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a76      	ldr	r2, [pc, #472]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fc fefe 	bl	8001bec <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004df4:	f7fc fefa 	bl	8001bec <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e255      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e06:	4b6e      	ldr	r3, [pc, #440]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e12:	f7fc ff1b 	bl	8001c4c <HAL_GetREVID>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d817      	bhi.n	8004e50 <HAL_RCC_OscConfig+0x3b0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d108      	bne.n	8004e3a <HAL_RCC_OscConfig+0x39a>
 8004e28:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e30:	4a63      	ldr	r2, [pc, #396]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e36:	6053      	str	r3, [r2, #4]
 8004e38:	e02e      	b.n	8004e98 <HAL_RCC_OscConfig+0x3f8>
 8004e3a:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	069b      	lsls	r3, r3, #26
 8004e48:	495d      	ldr	r1, [pc, #372]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
 8004e4e:	e023      	b.n	8004e98 <HAL_RCC_OscConfig+0x3f8>
 8004e50:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	4958      	ldr	r1, [pc, #352]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60cb      	str	r3, [r1, #12]
 8004e64:	e018      	b.n	8004e98 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e66:	4b56      	ldr	r3, [pc, #344]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a55      	ldr	r2, [pc, #340]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e72:	f7fc febb 	bl	8001bec <HAL_GetTick>
 8004e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e7a:	f7fc feb7 	bl	8001bec <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e212      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e8c:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d036      	beq.n	8004f12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d019      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eac:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	4a43      	ldr	r2, [pc, #268]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fc fe98 	bl	8001bec <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec0:	f7fc fe94 	bl	8001bec <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1ef      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ed2:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x420>
 8004ede:	e018      	b.n	8004f12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee0:	4b37      	ldr	r3, [pc, #220]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee4:	4a36      	ldr	r2, [pc, #216]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eec:	f7fc fe7e 	bl	8001bec <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ef4:	f7fc fe7a 	bl	8001bec <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e1d5      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f06:	4b2e      	ldr	r3, [pc, #184]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d036      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d019      	beq.n	8004f5a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f26:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f32:	f7fc fe5b 	bl	8001bec <HAL_GetTick>
 8004f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f3a:	f7fc fe57 	bl	8001bec <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e1b2      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f4c:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x49a>
 8004f58:	e018      	b.n	8004f8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f5a:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f66:	f7fc fe41 	bl	8001bec <HAL_GetTick>
 8004f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f6e:	f7fc fe3d 	bl	8001bec <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e198      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <HAL_RCC_OscConfig+0x520>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8085 	beq.w	80050a4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_RCC_OscConfig+0x524>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <HAL_RCC_OscConfig+0x524>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fe21 	bl	8001bec <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fac:	e00c      	b.n	8004fc8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fae:	f7fc fe1d 	bl	8001bec <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b64      	cmp	r3, #100	; 0x64
 8004fba:	d905      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e178      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc8:	4b96      	ldr	r3, [pc, #600]	; (8005224 <HAL_RCC_OscConfig+0x784>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ec      	beq.n	8004fae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d106      	bne.n	8004fea <HAL_RCC_OscConfig+0x54a>
 8004fdc:	4b92      	ldr	r3, [pc, #584]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	4a91      	ldr	r2, [pc, #580]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe8:	e02d      	b.n	8005046 <HAL_RCC_OscConfig+0x5a6>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10c      	bne.n	800500c <HAL_RCC_OscConfig+0x56c>
 8004ff2:	4b8d      	ldr	r3, [pc, #564]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	4a8c      	ldr	r2, [pc, #560]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffe:	4b8a      	ldr	r3, [pc, #552]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	4a89      	ldr	r2, [pc, #548]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005004:	f023 0304 	bic.w	r3, r3, #4
 8005008:	6713      	str	r3, [r2, #112]	; 0x70
 800500a:	e01c      	b.n	8005046 <HAL_RCC_OscConfig+0x5a6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b05      	cmp	r3, #5
 8005012:	d10c      	bne.n	800502e <HAL_RCC_OscConfig+0x58e>
 8005014:	4b84      	ldr	r3, [pc, #528]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a83      	ldr	r2, [pc, #524]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800501a:	f043 0304 	orr.w	r3, r3, #4
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
 8005020:	4b81      	ldr	r3, [pc, #516]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	4a80      	ldr	r2, [pc, #512]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	6713      	str	r3, [r2, #112]	; 0x70
 800502c:	e00b      	b.n	8005046 <HAL_RCC_OscConfig+0x5a6>
 800502e:	4b7e      	ldr	r3, [pc, #504]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	4a7d      	ldr	r2, [pc, #500]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	6713      	str	r3, [r2, #112]	; 0x70
 800503a:	4b7b      	ldr	r3, [pc, #492]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a7a      	ldr	r2, [pc, #488]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d015      	beq.n	800507a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504e:	f7fc fdcd 	bl	8001bec <HAL_GetTick>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005054:	e00a      	b.n	800506c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fc fdc9 	bl	8001bec <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e122      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800506c:	4b6e      	ldr	r3, [pc, #440]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ee      	beq.n	8005056 <HAL_RCC_OscConfig+0x5b6>
 8005078:	e014      	b.n	80050a4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fc fdb7 	bl	8001bec <HAL_GetTick>
 800507e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005080:	e00a      	b.n	8005098 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fc fdb3 	bl	8001bec <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e10c      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005098:	4b63      	ldr	r3, [pc, #396]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ee      	bne.n	8005082 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8101 	beq.w	80052b0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050ae:	4b5e      	ldr	r3, [pc, #376]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050b6:	2b18      	cmp	r3, #24
 80050b8:	f000 80bc 	beq.w	8005234 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	f040 8095 	bne.w	80051f0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c6:	4b58      	ldr	r3, [pc, #352]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a57      	ldr	r2, [pc, #348]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80050cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fc fd8b 	bl	8001bec <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050da:	f7fc fd87 	bl	8001bec <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e0e2      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050ec:	4b4e      	ldr	r3, [pc, #312]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f0      	bne.n	80050da <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f8:	4b4b      	ldr	r3, [pc, #300]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80050fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fc:	4b4b      	ldr	r3, [pc, #300]	; (800522c <HAL_RCC_OscConfig+0x78c>)
 80050fe:	4013      	ands	r3, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005108:	0112      	lsls	r2, r2, #4
 800510a:	430a      	orrs	r2, r1
 800510c:	4946      	ldr	r1, [pc, #280]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800510e:	4313      	orrs	r3, r2
 8005110:	628b      	str	r3, [r1, #40]	; 0x28
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	3b01      	subs	r3, #1
 8005118:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005120:	3b01      	subs	r3, #1
 8005122:	025b      	lsls	r3, r3, #9
 8005124:	b29b      	uxth	r3, r3
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	3b01      	subs	r3, #1
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	3b01      	subs	r3, #1
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005142:	4939      	ldr	r1, [pc, #228]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005144:	4313      	orrs	r3, r2
 8005146:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005148:	4b37      	ldr	r3, [pc, #220]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	4a36      	ldr	r2, [pc, #216]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005154:	4b34      	ldr	r3, [pc, #208]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005158:	4b35      	ldr	r3, [pc, #212]	; (8005230 <HAL_RCC_OscConfig+0x790>)
 800515a:	4013      	ands	r3, r2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005160:	00d2      	lsls	r2, r2, #3
 8005162:	4931      	ldr	r1, [pc, #196]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005164:	4313      	orrs	r3, r2
 8005166:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005168:	4b2f      	ldr	r3, [pc, #188]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	f023 020c 	bic.w	r2, r3, #12
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	492c      	ldr	r1, [pc, #176]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005176:	4313      	orrs	r3, r2
 8005178:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800517a:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	f023 0202 	bic.w	r2, r3, #2
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	4928      	ldr	r1, [pc, #160]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005188:	4313      	orrs	r3, r2
 800518a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800518c:	4b26      	ldr	r3, [pc, #152]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005198:	4b23      	ldr	r3, [pc, #140]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 800519e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051a4:	4b20      	ldr	r3, [pc, #128]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051bc:	4b1a      	ldr	r3, [pc, #104]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a19      	ldr	r2, [pc, #100]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fc fd10 	bl	8001bec <HAL_GetTick>
 80051cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fc fd0c 	bl	8001bec <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e067      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x730>
 80051ee:	e05f      	b.n	80052b0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f0:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0c      	ldr	r2, [pc, #48]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 80051f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fc fcf6 	bl	8001bec <HAL_GetTick>
 8005200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005204:	f7fc fcf2 	bl	8001bec <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e04d      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005216:	4b04      	ldr	r3, [pc, #16]	; (8005228 <HAL_RCC_OscConfig+0x788>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x764>
 8005222:	e045      	b.n	80052b0 <HAL_RCC_OscConfig+0x810>
 8005224:	58024800 	.word	0x58024800
 8005228:	58024400 	.word	0x58024400
 800522c:	fffffc0c 	.word	0xfffffc0c
 8005230:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005234:	4b21      	ldr	r3, [pc, #132]	; (80052bc <HAL_RCC_OscConfig+0x81c>)
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800523a:	4b20      	ldr	r3, [pc, #128]	; (80052bc <HAL_RCC_OscConfig+0x81c>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b01      	cmp	r3, #1
 8005246:	d031      	beq.n	80052ac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f003 0203 	and.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d12a      	bne.n	80052ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005262:	429a      	cmp	r2, r3
 8005264:	d122      	bne.n	80052ac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d11a      	bne.n	80052ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	0a5b      	lsrs	r3, r3, #9
 800527a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005282:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d111      	bne.n	80052ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	0c1b      	lsrs	r3, r3, #16
 800528c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d108      	bne.n	80052ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0e1b      	lsrs	r3, r3, #24
 800529e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	; 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	58024400 	.word	0x58024400

080052c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e19c      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d4:	4b8a      	ldr	r3, [pc, #552]	; (8005500 <HAL_RCC_ClockConfig+0x240>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d910      	bls.n	8005304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e2:	4b87      	ldr	r3, [pc, #540]	; (8005500 <HAL_RCC_ClockConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 020f 	bic.w	r2, r3, #15
 80052ea:	4985      	ldr	r1, [pc, #532]	; (8005500 <HAL_RCC_ClockConfig+0x240>)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f2:	4b83      	ldr	r3, [pc, #524]	; (8005500 <HAL_RCC_ClockConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e184      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d010      	beq.n	8005332 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	4b7b      	ldr	r3, [pc, #492]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800531c:	429a      	cmp	r2, r3
 800531e:	d908      	bls.n	8005332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005320:	4b78      	ldr	r3, [pc, #480]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4975      	ldr	r1, [pc, #468]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 800532e:	4313      	orrs	r3, r2
 8005330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	4b70      	ldr	r3, [pc, #448]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800534a:	429a      	cmp	r2, r3
 800534c:	d908      	bls.n	8005360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800534e:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	496a      	ldr	r1, [pc, #424]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 800535c:	4313      	orrs	r3, r2
 800535e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	4b64      	ldr	r3, [pc, #400]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005378:	429a      	cmp	r2, r3
 800537a:	d908      	bls.n	800538e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800537c:	4b61      	ldr	r3, [pc, #388]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	495e      	ldr	r1, [pc, #376]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 800538a:	4313      	orrs	r3, r2
 800538c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d010      	beq.n	80053bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	4b59      	ldr	r3, [pc, #356]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d908      	bls.n	80053bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053aa:	4b56      	ldr	r3, [pc, #344]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	4953      	ldr	r1, [pc, #332]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d010      	beq.n	80053ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	4b4d      	ldr	r3, [pc, #308]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d908      	bls.n	80053ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d8:	4b4a      	ldr	r3, [pc, #296]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f023 020f 	bic.w	r2, r3, #15
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4947      	ldr	r1, [pc, #284]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d055      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053f6:	4b43      	ldr	r3, [pc, #268]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	4940      	ldr	r1, [pc, #256]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005404:	4313      	orrs	r3, r2
 8005406:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d107      	bne.n	8005420 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005410:	4b3c      	ldr	r3, [pc, #240]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d121      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0f6      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d107      	bne.n	8005438 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d115      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0ea      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d107      	bne.n	8005450 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005440:	4b30      	ldr	r3, [pc, #192]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0de      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005450:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0d6      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005460:	4b28      	ldr	r3, [pc, #160]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f023 0207 	bic.w	r2, r3, #7
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4925      	ldr	r1, [pc, #148]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 800546e:	4313      	orrs	r3, r2
 8005470:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005472:	f7fc fbbb 	bl	8001bec <HAL_GetTick>
 8005476:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005478:	e00a      	b.n	8005490 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547a:	f7fc fbb7 	bl	8001bec <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	; 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e0be      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005490:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	429a      	cmp	r2, r3
 80054a0:	d1eb      	bne.n	800547a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	4b14      	ldr	r3, [pc, #80]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d208      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f023 020f 	bic.w	r2, r3, #15
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	490e      	ldr	r1, [pc, #56]	; (8005504 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054d0:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <HAL_RCC_ClockConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d214      	bcs.n	8005508 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054de:	4b08      	ldr	r3, [pc, #32]	; (8005500 <HAL_RCC_ClockConfig+0x240>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 020f 	bic.w	r2, r3, #15
 80054e6:	4906      	ldr	r1, [pc, #24]	; (8005500 <HAL_RCC_ClockConfig+0x240>)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <HAL_RCC_ClockConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d005      	beq.n	8005508 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e086      	b.n	800560e <HAL_RCC_ClockConfig+0x34e>
 8005500:	52002000 	.word	0x52002000
 8005504:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d010      	beq.n	8005536 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005520:	429a      	cmp	r2, r3
 8005522:	d208      	bcs.n	8005536 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005524:	4b3c      	ldr	r3, [pc, #240]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	4939      	ldr	r1, [pc, #228]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005532:	4313      	orrs	r3, r2
 8005534:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d010      	beq.n	8005564 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	4b34      	ldr	r3, [pc, #208]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800554e:	429a      	cmp	r2, r3
 8005550:	d208      	bcs.n	8005564 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005552:	4b31      	ldr	r3, [pc, #196]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	492e      	ldr	r1, [pc, #184]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005560:	4313      	orrs	r3, r2
 8005562:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	4b28      	ldr	r3, [pc, #160]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800557c:	429a      	cmp	r2, r3
 800557e:	d208      	bcs.n	8005592 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005580:	4b25      	ldr	r3, [pc, #148]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	4922      	ldr	r1, [pc, #136]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 800558e:	4313      	orrs	r3, r2
 8005590:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d208      	bcs.n	80055c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80055ae:	4b1a      	ldr	r3, [pc, #104]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	4917      	ldr	r1, [pc, #92]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055c0:	f000 f834 	bl	800562c <HAL_RCC_GetSysClockFreq>
 80055c4:	4602      	mov	r2, r0
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	4912      	ldr	r1, [pc, #72]	; (800561c <HAL_RCC_ClockConfig+0x35c>)
 80055d2:	5ccb      	ldrb	r3, [r1, r3]
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
 80055dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055de:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <HAL_RCC_ClockConfig+0x358>)
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	4a0d      	ldr	r2, [pc, #52]	; (800561c <HAL_RCC_ClockConfig+0x35c>)
 80055e8:	5cd3      	ldrb	r3, [r2, r3]
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <HAL_RCC_ClockConfig+0x360>)
 80055f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055f8:	4a0a      	ldr	r2, [pc, #40]	; (8005624 <HAL_RCC_ClockConfig+0x364>)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <HAL_RCC_ClockConfig+0x368>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fc faa8 	bl	8001b58 <HAL_InitTick>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	58024400 	.word	0x58024400
 800561c:	0800ef4c 	.word	0x0800ef4c
 8005620:	24000004 	.word	0x24000004
 8005624:	24000000 	.word	0x24000000
 8005628:	24000008 	.word	0x24000008

0800562c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800562c:	b480      	push	{r7}
 800562e:	b089      	sub	sp, #36	; 0x24
 8005630:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005632:	4bb3      	ldr	r3, [pc, #716]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563a:	2b18      	cmp	r3, #24
 800563c:	f200 8155 	bhi.w	80058ea <HAL_RCC_GetSysClockFreq+0x2be>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	080056ad 	.word	0x080056ad
 800564c:	080058eb 	.word	0x080058eb
 8005650:	080058eb 	.word	0x080058eb
 8005654:	080058eb 	.word	0x080058eb
 8005658:	080058eb 	.word	0x080058eb
 800565c:	080058eb 	.word	0x080058eb
 8005660:	080058eb 	.word	0x080058eb
 8005664:	080058eb 	.word	0x080058eb
 8005668:	080056d3 	.word	0x080056d3
 800566c:	080058eb 	.word	0x080058eb
 8005670:	080058eb 	.word	0x080058eb
 8005674:	080058eb 	.word	0x080058eb
 8005678:	080058eb 	.word	0x080058eb
 800567c:	080058eb 	.word	0x080058eb
 8005680:	080058eb 	.word	0x080058eb
 8005684:	080058eb 	.word	0x080058eb
 8005688:	080056d9 	.word	0x080056d9
 800568c:	080058eb 	.word	0x080058eb
 8005690:	080058eb 	.word	0x080058eb
 8005694:	080058eb 	.word	0x080058eb
 8005698:	080058eb 	.word	0x080058eb
 800569c:	080058eb 	.word	0x080058eb
 80056a0:	080058eb 	.word	0x080058eb
 80056a4:	080058eb 	.word	0x080058eb
 80056a8:	080056df 	.word	0x080056df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ac:	4b94      	ldr	r3, [pc, #592]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d009      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056b8:	4b91      	ldr	r3, [pc, #580]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	08db      	lsrs	r3, r3, #3
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	4a90      	ldr	r2, [pc, #576]	; (8005904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
 80056c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80056ca:	e111      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80056cc:	4b8d      	ldr	r3, [pc, #564]	; (8005904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056ce:	61bb      	str	r3, [r7, #24]
    break;
 80056d0:	e10e      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80056d2:	4b8d      	ldr	r3, [pc, #564]	; (8005908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056d4:	61bb      	str	r3, [r7, #24]
    break;
 80056d6:	e10b      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80056d8:	4b8c      	ldr	r3, [pc, #560]	; (800590c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056da:	61bb      	str	r3, [r7, #24]
    break;
 80056dc:	e108      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056de:	4b88      	ldr	r3, [pc, #544]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80056e8:	4b85      	ldr	r3, [pc, #532]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056f4:	4b82      	ldr	r3, [pc, #520]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80056fe:	4b80      	ldr	r3, [pc, #512]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	08db      	lsrs	r3, r3, #3
 8005704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005716:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80e1 	beq.w	80058e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b02      	cmp	r3, #2
 8005726:	f000 8083 	beq.w	8005830 <HAL_RCC_GetSysClockFreq+0x204>
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b02      	cmp	r3, #2
 800572e:	f200 80a1 	bhi.w	8005874 <HAL_RCC_GetSysClockFreq+0x248>
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x114>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d056      	beq.n	80057ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800573e:	e099      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005740:	4b6f      	ldr	r3, [pc, #444]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02d      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800574c:	4b6c      	ldr	r3, [pc, #432]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	4a6b      	ldr	r2, [pc, #428]	; (8005904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005776:	4b62      	ldr	r3, [pc, #392]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005786:	ed97 6a02 	vldr	s12, [r7, #8]
 800578a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800578e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80057a6:	e087      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005914 <HAL_RCC_GetSysClockFreq+0x2e8>
 80057b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ba:	4b51      	ldr	r3, [pc, #324]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005910 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ea:	e065      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005918 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fe:	4b40      	ldr	r3, [pc, #256]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800580e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005812:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005910 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800581e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800582e:	e043      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800591c <HAL_RCC_GetSysClockFreq+0x2f0>
 800583e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005842:	4b2f      	ldr	r3, [pc, #188]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005852:	ed97 6a02 	vldr	s12, [r7, #8]
 8005856:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800585a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800585e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005872:	e021      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005918 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005886:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005896:	ed97 6a02 	vldr	s12, [r7, #8]
 800589a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800589e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	0a5b      	lsrs	r3, r3, #9
 80058be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c2:	3301      	adds	r3, #1
 80058c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	ee07 3a90 	vmov	s15, r3
 80058cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058dc:	ee17 3a90 	vmov	r3, s15
 80058e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80058e2:	e005      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]
    break;
 80058e8:	e002      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058ec:	61bb      	str	r3, [r7, #24]
    break;
 80058ee:	bf00      	nop
  }

  return sysclockfreq;
 80058f0:	69bb      	ldr	r3, [r7, #24]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3724      	adds	r7, #36	; 0x24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	58024400 	.word	0x58024400
 8005904:	03d09000 	.word	0x03d09000
 8005908:	003d0900 	.word	0x003d0900
 800590c:	017d7840 	.word	0x017d7840
 8005910:	46000000 	.word	0x46000000
 8005914:	4c742400 	.word	0x4c742400
 8005918:	4a742400 	.word	0x4a742400
 800591c:	4bbebc20 	.word	0x4bbebc20

08005920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005926:	f7ff fe81 	bl	800562c <HAL_RCC_GetSysClockFreq>
 800592a:	4602      	mov	r2, r0
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <HAL_RCC_GetHCLKFreq+0x50>)
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	490f      	ldr	r1, [pc, #60]	; (8005974 <HAL_RCC_GetHCLKFreq+0x54>)
 8005938:	5ccb      	ldrb	r3, [r1, r3]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	fa22 f303 	lsr.w	r3, r2, r3
 8005942:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005944:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <HAL_RCC_GetHCLKFreq+0x50>)
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <HAL_RCC_GetHCLKFreq+0x54>)
 800594e:	5cd3      	ldrb	r3, [r2, r3]
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	fa22 f303 	lsr.w	r3, r2, r3
 800595a:	4a07      	ldr	r2, [pc, #28]	; (8005978 <HAL_RCC_GetHCLKFreq+0x58>)
 800595c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800595e:	4a07      	ldr	r2, [pc, #28]	; (800597c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <HAL_RCC_GetHCLKFreq+0x58>)
 8005966:	681b      	ldr	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	58024400 	.word	0x58024400
 8005974:	0800ef4c 	.word	0x0800ef4c
 8005978:	24000004 	.word	0x24000004
 800597c:	24000000 	.word	0x24000000

08005980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005984:	f7ff ffcc 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005988:	4602      	mov	r2, r0
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	4904      	ldr	r1, [pc, #16]	; (80059a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005996:	5ccb      	ldrb	r3, [r1, r3]
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	58024400 	.word	0x58024400
 80059a8:	0800ef4c 	.word	0x0800ef4c

080059ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80059b0:	f7ff ffb6 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 80059b4:	4602      	mov	r2, r0
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	0a1b      	lsrs	r3, r3, #8
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	4904      	ldr	r1, [pc, #16]	; (80059d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059c2:	5ccb      	ldrb	r3, [r1, r3]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	58024400 	.word	0x58024400
 80059d4:	0800ef4c 	.word	0x0800ef4c

080059d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059e0:	2300      	movs	r3, #0
 80059e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059e4:	2300      	movs	r3, #0
 80059e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d03f      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059fc:	d02a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a02:	d824      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a08:	d018      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a0e:	d81e      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a18:	d007      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a1a:	e018      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1c:	4bab      	ldr	r3, [pc, #684]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	4aaa      	ldr	r2, [pc, #680]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a28:	e015      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2102      	movs	r1, #2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 fff3 	bl	8007a1c <RCCEx_PLL2_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a3a:	e00c      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3324      	adds	r3, #36	; 0x24
 8005a40:	2102      	movs	r1, #2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f002 f89c 	bl	8007b80 <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005a4c:	e003      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	75fb      	strb	r3, [r7, #23]
      break;
 8005a52:	e000      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a5c:	4b9b      	ldr	r3, [pc, #620]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a68:	4998      	ldr	r1, [pc, #608]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8005a6e:	e001      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d03d      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d826      	bhi.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa5 	.word	0x08005aa5
 8005a94:	08005ab3 	.word	0x08005ab3
 8005a98:	08005ac5 	.word	0x08005ac5
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005add 	.word	0x08005add
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa4:	4b89      	ldr	r3, [pc, #548]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	4a88      	ldr	r2, [pc, #544]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ab0:	e015      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 ffaf 	bl	8007a1c <RCCEx_PLL2_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ac2:	e00c      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 f858 	bl	8007b80 <RCCEx_PLL3_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ad4:	e003      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8005ada:	e000      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ae4:	4b79      	ldr	r3, [pc, #484]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	f023 0207 	bic.w	r2, r3, #7
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	4976      	ldr	r1, [pc, #472]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	650b      	str	r3, [r1, #80]	; 0x50
 8005af6:	e001      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d042      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b10:	d02b      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b16:	d825      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b18:	2bc0      	cmp	r3, #192	; 0xc0
 8005b1a:	d028      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b1c:	2bc0      	cmp	r3, #192	; 0xc0
 8005b1e:	d821      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d016      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d81d      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005b2c:	2b40      	cmp	r3, #64	; 0x40
 8005b2e:	d007      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005b30:	e018      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b32:	4b66      	ldr	r3, [pc, #408]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	4a65      	ldr	r2, [pc, #404]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b3e:	e017      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 ff68 	bl	8007a1c <RCCEx_PLL2_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b50:	e00e      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3324      	adds	r3, #36	; 0x24
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f002 f811 	bl	8007b80 <RCCEx_PLL3_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005b62:	e005      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	75fb      	strb	r3, [r7, #23]
      break;
 8005b68:	e002      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b76:	4b55      	ldr	r3, [pc, #340]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b82:	4952      	ldr	r1, [pc, #328]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	650b      	str	r3, [r1, #80]	; 0x50
 8005b88:	e001      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d049      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ba4:	d030      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005baa:	d82a      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bb0:	d02c      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005bb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bb6:	d824      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bbc:	d018      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc2:	d81e      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005bc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bcc:	d007      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005bce:	e018      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	4a3d      	ldr	r2, [pc, #244]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bdc:	e017      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2100      	movs	r1, #0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 ff19 	bl	8007a1c <RCCEx_PLL2_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005bee:	e00e      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3324      	adds	r3, #36	; 0x24
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 ffc2 	bl	8007b80 <RCCEx_PLL3_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c00:	e005      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
      break;
 8005c06:	e002      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c14:	4b2d      	ldr	r3, [pc, #180]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c22:	492a      	ldr	r1, [pc, #168]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	658b      	str	r3, [r1, #88]	; 0x58
 8005c28:	e001      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d04c      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c44:	d030      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c4a:	d82a      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c50:	d02c      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c56:	d824      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c5c:	d018      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c62:	d81e      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c6c:	d007      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005c6e:	e018      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c70:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c7c:	e017      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 fec9 	bl	8007a1c <RCCEx_PLL2_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c8e:	e00e      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3324      	adds	r3, #36	; 0x24
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 ff72 	bl	8007b80 <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ca0:	e005      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca6:	e002      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005ca8:	bf00      	nop
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10d      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cc2:	4902      	ldr	r1, [pc, #8]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	658b      	str	r3, [r1, #88]	; 0x58
 8005cc8:	e004      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d032      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce4:	2b30      	cmp	r3, #48	; 0x30
 8005ce6:	d01c      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d817      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d00c      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d813      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d016      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d10f      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfc:	4baf      	ldr	r3, [pc, #700]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	4aae      	ldr	r2, [pc, #696]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d08:	e00e      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	2102      	movs	r1, #2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fe83 	bl	8007a1c <RCCEx_PLL2_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005d1a:	e005      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d20:	e002      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005d22:	bf00      	nop
 8005d24:	e000      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d2e:	4ba3      	ldr	r3, [pc, #652]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d3a:	49a0      	ldr	r1, [pc, #640]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d40:	e001      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d047      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d5a:	d030      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d60:	d82a      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d66:	d02c      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005d68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d6c:	d824      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d72:	d018      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d78:	d81e      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	d007      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005d84:	e018      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d86:	4b8d      	ldr	r3, [pc, #564]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	4a8c      	ldr	r2, [pc, #560]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d92:	e017      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fe3e 	bl	8007a1c <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005da4:	e00e      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fee7 	bl	8007b80 <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005db6:	e005      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005dca:	4b7c      	ldr	r3, [pc, #496]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd6:	4979      	ldr	r1, [pc, #484]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	650b      	str	r3, [r1, #80]	; 0x50
 8005ddc:	e001      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d049      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005df6:	d02e      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dfc:	d828      	bhi.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e02:	d02a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005e04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e08:	d822      	bhi.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e0e:	d026      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005e10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e14:	d81c      	bhi.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e1a:	d010      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e20:	d816      	bhi.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01d      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2a:	d111      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	2101      	movs	r1, #1
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 fdf2 	bl	8007a1c <RCCEx_PLL2_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e3c:	e012      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3324      	adds	r3, #36	; 0x24
 8005e42:	2101      	movs	r1, #1
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fe9b 	bl	8007b80 <RCCEx_PLL3_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005e4e:	e009      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	75fb      	strb	r3, [r7, #23]
      break;
 8005e54:	e006      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e56:	bf00      	nop
 8005e58:	e004      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e5a:	bf00      	nop
 8005e5c:	e002      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e000      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e6a:	4b54      	ldr	r3, [pc, #336]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	4951      	ldr	r1, [pc, #324]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	650b      	str	r3, [r1, #80]	; 0x50
 8005e7c:	e001      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d04b      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e98:	d02e      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e9e:	d828      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea4:	d02a      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eaa:	d822      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005eac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eb0:	d026      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005eb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eb6:	d81c      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ebc:	d010      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec2:	d816      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01d      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ecc:	d111      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 fda1 	bl	8007a1c <RCCEx_PLL2_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ede:	e012      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fe4a 	bl	8007b80 <RCCEx_PLL3_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ef0:	e009      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef6:	e006      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ef8:	bf00      	nop
 8005efa:	e004      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005efc:	bf00      	nop
 8005efe:	e002      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f00:	bf00      	nop
 8005f02:	e000      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f0c:	4b2b      	ldr	r3, [pc, #172]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f10:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f1a:	4928      	ldr	r1, [pc, #160]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	658b      	str	r3, [r1, #88]	; 0x58
 8005f20:	e001      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02f      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f3a:	d00e      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f40:	d814      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d015      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f4a:	d10f      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f58:	e00c      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fd5b 	bl	8007a1c <RCCEx_PLL2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f6a:	e003      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f70:	e000      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f7a:	4b10      	ldr	r3, [pc, #64]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f86:	490d      	ldr	r1, [pc, #52]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	650b      	str	r3, [r1, #80]	; 0x50
 8005f8c:	e001      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d033      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d81c      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fe7 	.word	0x08005fe7
 8005fb0:	08005fc1 	.word	0x08005fc1
 8005fb4:	08005fcf 	.word	0x08005fcf
 8005fb8:	08005fe7 	.word	0x08005fe7
 8005fbc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc0:	4bb8      	ldr	r3, [pc, #736]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	4ab7      	ldr	r2, [pc, #732]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fcc:	e00c      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 fd21 	bl	8007a1c <RCCEx_PLL2_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005fde:	e003      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005fee:	4bad      	ldr	r3, [pc, #692]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff2:	f023 0203 	bic.w	r2, r3, #3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	49aa      	ldr	r1, [pc, #680]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006000:	e001      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
 8006004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8086 	beq.w	8006120 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006014:	4ba4      	ldr	r3, [pc, #656]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4aa3      	ldr	r2, [pc, #652]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800601a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006020:	f7fb fde4 	bl	8001bec <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006026:	e009      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006028:	f7fb fde0 	bl	8001bec <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d902      	bls.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	75fb      	strb	r3, [r7, #23]
        break;
 800603a:	e005      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800603c:	4b9a      	ldr	r3, [pc, #616]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0ef      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d166      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800604e:	4b95      	ldr	r3, [pc, #596]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006058:	4053      	eors	r3, r2
 800605a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605e:	2b00      	cmp	r3, #0
 8006060:	d013      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006062:	4b90      	ldr	r3, [pc, #576]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800606c:	4b8d      	ldr	r3, [pc, #564]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a8c      	ldr	r2, [pc, #560]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006078:	4b8a      	ldr	r3, [pc, #552]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a89      	ldr	r2, [pc, #548]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800607e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006084:	4a87      	ldr	r2, [pc, #540]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006094:	d115      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006096:	f7fb fda9 	bl	8001bec <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800609c:	e00b      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609e:	f7fb fda5 	bl	8001bec <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d902      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	75fb      	strb	r3, [r7, #23]
            break;
 80060b4:	e005      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060b6:	4b7b      	ldr	r3, [pc, #492]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ed      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d126      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060d6:	d10d      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80060d8:	4b72      	ldr	r3, [pc, #456]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060e6:	0919      	lsrs	r1, r3, #4
 80060e8:	4b70      	ldr	r3, [pc, #448]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80060ea:	400b      	ands	r3, r1
 80060ec:	496d      	ldr	r1, [pc, #436]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	610b      	str	r3, [r1, #16]
 80060f2:	e005      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80060f4:	4b6b      	ldr	r3, [pc, #428]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	4a6a      	ldr	r2, [pc, #424]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060fe:	6113      	str	r3, [r2, #16]
 8006100:	4b68      	ldr	r3, [pc, #416]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800610a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800610e:	4965      	ldr	r1, [pc, #404]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006110:	4313      	orrs	r3, r2
 8006112:	670b      	str	r3, [r1, #112]	; 0x70
 8006114:	e004      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006116:	7dfb      	ldrb	r3, [r7, #23]
 8006118:	75bb      	strb	r3, [r7, #22]
 800611a:	e001      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d07e      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006130:	2b28      	cmp	r3, #40	; 0x28
 8006132:	d867      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006134:	a201      	add	r2, pc, #4	; (adr r2, 800613c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	0800620b 	.word	0x0800620b
 8006140:	08006205 	.word	0x08006205
 8006144:	08006205 	.word	0x08006205
 8006148:	08006205 	.word	0x08006205
 800614c:	08006205 	.word	0x08006205
 8006150:	08006205 	.word	0x08006205
 8006154:	08006205 	.word	0x08006205
 8006158:	08006205 	.word	0x08006205
 800615c:	080061e1 	.word	0x080061e1
 8006160:	08006205 	.word	0x08006205
 8006164:	08006205 	.word	0x08006205
 8006168:	08006205 	.word	0x08006205
 800616c:	08006205 	.word	0x08006205
 8006170:	08006205 	.word	0x08006205
 8006174:	08006205 	.word	0x08006205
 8006178:	08006205 	.word	0x08006205
 800617c:	080061f3 	.word	0x080061f3
 8006180:	08006205 	.word	0x08006205
 8006184:	08006205 	.word	0x08006205
 8006188:	08006205 	.word	0x08006205
 800618c:	08006205 	.word	0x08006205
 8006190:	08006205 	.word	0x08006205
 8006194:	08006205 	.word	0x08006205
 8006198:	08006205 	.word	0x08006205
 800619c:	0800620b 	.word	0x0800620b
 80061a0:	08006205 	.word	0x08006205
 80061a4:	08006205 	.word	0x08006205
 80061a8:	08006205 	.word	0x08006205
 80061ac:	08006205 	.word	0x08006205
 80061b0:	08006205 	.word	0x08006205
 80061b4:	08006205 	.word	0x08006205
 80061b8:	08006205 	.word	0x08006205
 80061bc:	0800620b 	.word	0x0800620b
 80061c0:	08006205 	.word	0x08006205
 80061c4:	08006205 	.word	0x08006205
 80061c8:	08006205 	.word	0x08006205
 80061cc:	08006205 	.word	0x08006205
 80061d0:	08006205 	.word	0x08006205
 80061d4:	08006205 	.word	0x08006205
 80061d8:	08006205 	.word	0x08006205
 80061dc:	0800620b 	.word	0x0800620b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	2101      	movs	r1, #1
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 fc18 	bl	8007a1c <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80061f0:	e00c      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3324      	adds	r3, #36	; 0x24
 80061f6:	2101      	movs	r1, #1
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 fcc1 	bl	8007b80 <RCCEx_PLL3_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006202:	e003      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	e000      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800620a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800621e:	4921      	ldr	r1, [pc, #132]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006220:	4313      	orrs	r3, r2
 8006222:	654b      	str	r3, [r1, #84]	; 0x54
 8006224:	e001      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d03e      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623a:	2b05      	cmp	r3, #5
 800623c:	d820      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006287 	.word	0x08006287
 8006248:	0800625d 	.word	0x0800625d
 800624c:	0800626f 	.word	0x0800626f
 8006250:	08006287 	.word	0x08006287
 8006254:	08006287 	.word	0x08006287
 8006258:	08006287 	.word	0x08006287
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	2101      	movs	r1, #1
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fbda 	bl	8007a1c <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800626c:	e00c      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3324      	adds	r3, #36	; 0x24
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fc83 	bl	8007b80 <RCCEx_PLL3_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800627e:	e003      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	75fb      	strb	r3, [r7, #23]
      break;
 8006284:	e000      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d110      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800628e:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006292:	f023 0207 	bic.w	r2, r3, #7
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629a:	4902      	ldr	r1, [pc, #8]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800629c:	4313      	orrs	r3, r2
 800629e:	654b      	str	r3, [r1, #84]	; 0x54
 80062a0:	e008      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80062a2:	bf00      	nop
 80062a4:	58024400 	.word	0x58024400
 80062a8:	58024800 	.word	0x58024800
 80062ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d039      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	d820      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	08006313 	.word	0x08006313
 80062d4:	080062e9 	.word	0x080062e9
 80062d8:	080062fb 	.word	0x080062fb
 80062dc:	08006313 	.word	0x08006313
 80062e0:	08006313 	.word	0x08006313
 80062e4:	08006313 	.word	0x08006313
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	2101      	movs	r1, #1
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 fb94 	bl	8007a1c <RCCEx_PLL2_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062f8:	e00c      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3324      	adds	r3, #36	; 0x24
 80062fe:	2101      	movs	r1, #1
 8006300:	4618      	mov	r0, r3
 8006302:	f001 fc3d 	bl	8007b80 <RCCEx_PLL3_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800630a:	e003      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]
      break;
 8006310:	e000      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800631a:	4bb7      	ldr	r3, [pc, #732]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	f023 0207 	bic.w	r2, r3, #7
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006328:	49b3      	ldr	r1, [pc, #716]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800632a:	4313      	orrs	r3, r2
 800632c:	658b      	str	r3, [r1, #88]	; 0x58
 800632e:	e001      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d04b      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800634a:	d02e      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800634c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006350:	d828      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006356:	d02a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635c:	d822      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800635e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006362:	d026      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006368:	d81c      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800636a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636e:	d010      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006374:	d816      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d01d      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800637a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800637e:	d111      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f001 fb48 	bl	8007a1c <RCCEx_PLL2_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006390:	e012      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3324      	adds	r3, #36	; 0x24
 8006396:	2102      	movs	r1, #2
 8006398:	4618      	mov	r0, r3
 800639a:	f001 fbf1 	bl	8007b80 <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80063a2:	e009      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	75fb      	strb	r3, [r7, #23]
      break;
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063aa:	bf00      	nop
 80063ac:	e004      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063ae:	bf00      	nop
 80063b0:	e002      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063b2:	bf00      	nop
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80063b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063be:	4b8e      	ldr	r3, [pc, #568]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063cc:	498a      	ldr	r1, [pc, #552]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	654b      	str	r3, [r1, #84]	; 0x54
 80063d2:	e001      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d04b      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063ee:	d02e      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80063f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063f4:	d828      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fa:	d02a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006400:	d822      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006406:	d026      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006408:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800640c:	d81c      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800640e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006412:	d010      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006418:	d816      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01d      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800641e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006422:	d111      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	2100      	movs	r1, #0
 800642a:	4618      	mov	r0, r3
 800642c:	f001 faf6 	bl	8007a1c <RCCEx_PLL2_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006434:	e012      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3324      	adds	r3, #36	; 0x24
 800643a:	2102      	movs	r1, #2
 800643c:	4618      	mov	r0, r3
 800643e:	f001 fb9f 	bl	8007b80 <RCCEx_PLL3_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006446:	e009      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
      break;
 800644c:	e006      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800644e:	bf00      	nop
 8006450:	e004      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006452:	bf00      	nop
 8006454:	e002      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006456:	bf00      	nop
 8006458:	e000      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800645a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006462:	4b65      	ldr	r3, [pc, #404]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006466:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006470:	4961      	ldr	r1, [pc, #388]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006472:	4313      	orrs	r3, r2
 8006474:	658b      	str	r3, [r1, #88]	; 0x58
 8006476:	e001      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b00      	cmp	r3, #0
 8006486:	d04b      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800648e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006492:	d02e      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006494:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006498:	d828      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800649a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800649e:	d02a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80064a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a4:	d822      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064aa:	d026      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80064ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80064b0:	d81c      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064b6:	d010      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80064b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064bc:	d816      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01d      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80064c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c6:	d111      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 faa4 	bl	8007a1c <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064d8:	e012      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3324      	adds	r3, #36	; 0x24
 80064de:	2102      	movs	r1, #2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 fb4d 	bl	8007b80 <RCCEx_PLL3_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80064ea:	e009      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
      break;
 80064f0:	e006      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064f2:	bf00      	nop
 80064f4:	e004      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064f6:	bf00      	nop
 80064f8:	e002      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80064fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006506:	4b3c      	ldr	r3, [pc, #240]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006514:	4938      	ldr	r1, [pc, #224]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006516:	4313      	orrs	r3, r2
 8006518:	658b      	str	r3, [r1, #88]	; 0x58
 800651a:	e001      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01a      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006536:	d10a      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3324      	adds	r3, #36	; 0x24
 800653c:	2102      	movs	r1, #2
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fb1e 	bl	8007b80 <RCCEx_PLL3_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800654e:	4b2a      	ldr	r3, [pc, #168]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006552:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800655c:	4926      	ldr	r1, [pc, #152]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800655e:	4313      	orrs	r3, r2
 8006560:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01a      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006578:	d10a      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3324      	adds	r3, #36	; 0x24
 800657e:	2102      	movs	r1, #2
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fafd 	bl	8007b80 <RCCEx_PLL3_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006590:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800659e:	4916      	ldr	r1, [pc, #88]	; (80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d036      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ba:	d01f      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80065bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c0:	d817      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80065c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ca:	d009      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80065cc:	e011      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 fa21 	bl	8007a1c <RCCEx_PLL2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065de:	e00e      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3324      	adds	r3, #36	; 0x24
 80065e4:	2102      	movs	r1, #2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 faca 	bl	8007b80 <RCCEx_PLL3_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80065f0:	e005      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
      break;
 80065f6:	e002      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80065f8:	58024400 	.word	0x58024400
      break;
 80065fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006604:	4b93      	ldr	r3, [pc, #588]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006612:	4990      	ldr	r1, [pc, #576]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006614:	4313      	orrs	r3, r2
 8006616:	658b      	str	r3, [r1, #88]	; 0x58
 8006618:	e001      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d033      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006630:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006634:	d01c      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006636:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800663a:	d816      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800663c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006640:	d003      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006646:	d007      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006648:	e00f      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800664a:	4b82      	ldr	r3, [pc, #520]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	4a81      	ldr	r2, [pc, #516]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006656:	e00c      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3324      	adds	r3, #36	; 0x24
 800665c:	2101      	movs	r1, #1
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fa8e 	bl	8007b80 <RCCEx_PLL3_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006668:	e003      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
      break;
 800666e:	e000      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006672:	7dfb      	ldrb	r3, [r7, #23]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006678:	4b76      	ldr	r3, [pc, #472]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800667a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006686:	4973      	ldr	r1, [pc, #460]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006688:	4313      	orrs	r3, r2
 800668a:	654b      	str	r3, [r1, #84]	; 0x54
 800668c:	e001      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d029      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80066a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066aa:	d007      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80066ac:	e00f      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ae:	4b69      	ldr	r3, [pc, #420]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	4a68      	ldr	r2, [pc, #416]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066ba:	e00b      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	2102      	movs	r1, #2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 f9aa 	bl	8007a1c <RCCEx_PLL2_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80066cc:	e002      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	75fb      	strb	r3, [r7, #23]
      break;
 80066d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066da:	4b5e      	ldr	r3, [pc, #376]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e6:	495b      	ldr	r1, [pc, #364]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066ec:	e001      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3324      	adds	r3, #36	; 0x24
 8006702:	2102      	movs	r1, #2
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fa3b 	bl	8007b80 <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d030      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006728:	d017      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800672a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800672e:	d811      	bhi.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006734:	d013      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800673a:	d80b      	bhi.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d010      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006744:	d106      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006746:	4b43      	ldr	r3, [pc, #268]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	4a42      	ldr	r2, [pc, #264]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800674c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006752:	e007      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	75fb      	strb	r3, [r7, #23]
      break;
 8006758:	e004      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800675a:	bf00      	nop
 800675c:	e002      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800675e:	bf00      	nop
 8006760:	e000      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800676a:	4b3a      	ldr	r3, [pc, #232]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006776:	4937      	ldr	r1, [pc, #220]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006778:	4313      	orrs	r3, r2
 800677a:	654b      	str	r3, [r1, #84]	; 0x54
 800677c:	e001      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	492e      	ldr	r1, [pc, #184]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800679c:	4313      	orrs	r3, r2
 800679e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067ac:	4b29      	ldr	r3, [pc, #164]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067ba:	4926      	ldr	r1, [pc, #152]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067cc:	4b21      	ldr	r3, [pc, #132]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067d8:	491e      	ldr	r1, [pc, #120]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	4a19      	ldr	r2, [pc, #100]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f4:	6113      	str	r3, [r2, #16]
 80067f6:	4b17      	ldr	r3, [pc, #92]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006800:	4914      	ldr	r1, [pc, #80]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006802:	4313      	orrs	r3, r2
 8006804:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da08      	bge.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800680e:	4b11      	ldr	r3, [pc, #68]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	490e      	ldr	r1, [pc, #56]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800681c:	4313      	orrs	r3, r2
 800681e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800682e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	4906      	ldr	r1, [pc, #24]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800683c:	4313      	orrs	r3, r2
 800683e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006840:	7dbb      	ldrb	r3, [r7, #22]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	e000      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	58024400 	.word	0x58024400

08006858 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b090      	sub	sp, #64	; 0x40
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	f040 8095 	bne.w	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800686a:	4bae      	ldr	r3, [pc, #696]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	2b04      	cmp	r3, #4
 8006878:	f200 8088 	bhi.w	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	08006899 	.word	0x08006899
 8006888:	080068c1 	.word	0x080068c1
 800688c:	080068e9 	.word	0x080068e9
 8006890:	08006985 	.word	0x08006985
 8006894:	08006911 	.word	0x08006911

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006898:	4ba2      	ldr	r3, [pc, #648]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068a4:	d108      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 ff64 	bl	8007778 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068b4:	f000 bc95 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068bc:	f000 bc91 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068c0:	4b98      	ldr	r3, [pc, #608]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068cc:	d108      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ce:	f107 0318 	add.w	r3, r7, #24
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fca8 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068dc:	f000 bc81 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068e4:	f000 bc7d 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068e8:	4b8e      	ldr	r3, [pc, #568]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f4:	d108      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068f6:	f107 030c 	add.w	r3, r7, #12
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fde8 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006904:	f000 bc6d 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800690c:	f000 bc69 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006910:	4b84      	ldr	r3, [pc, #528]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006918:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800691a:	4b82      	ldr	r3, [pc, #520]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b04      	cmp	r3, #4
 8006924:	d10c      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006928:	2b00      	cmp	r3, #0
 800692a:	d109      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800692c:	4b7d      	ldr	r3, [pc, #500]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	08db      	lsrs	r3, r3, #3
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	4a7c      	ldr	r2, [pc, #496]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800693e:	e01f      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006940:	4b78      	ldr	r3, [pc, #480]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694c:	d106      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006954:	d102      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006956:	4b75      	ldr	r3, [pc, #468]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800695a:	e011      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800695c:	4b71      	ldr	r3, [pc, #452]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006968:	d106      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006970:	d102      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006972:	4b6f      	ldr	r3, [pc, #444]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006976:	e003      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800697c:	f000 bc31 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006980:	f000 bc2f 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006984:	4b6b      	ldr	r3, [pc, #428]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006988:	f000 bc2b 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006990:	f000 bc27 	b.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699a:	f040 8095 	bne.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800699e:	4b61      	ldr	r3, [pc, #388]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80069a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ae:	d04d      	beq.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b6:	f200 8084 	bhi.w	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	2bc0      	cmp	r3, #192	; 0xc0
 80069be:	d07d      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	2bc0      	cmp	r3, #192	; 0xc0
 80069c4:	d87d      	bhi.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	2b80      	cmp	r3, #128	; 0x80
 80069ca:	d02d      	beq.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d877      	bhi.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d012      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80069de:	e070      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069e0:	4b50      	ldr	r3, [pc, #320]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ec:	d107      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fec0 	bl	8007778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069fc:	e3f1      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a02:	e3ee      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a04:	4b47      	ldr	r3, [pc, #284]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a10:	d107      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a12:	f107 0318 	add.w	r3, r7, #24
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fc06 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a20:	e3df      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a26:	e3dc      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a28:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a34:	d107      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a36:	f107 030c 	add.w	r3, r7, #12
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fd48 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a44:	e3cd      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a4a:	e3ca      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a4c:	4b35      	ldr	r3, [pc, #212]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a56:	4b33      	ldr	r3, [pc, #204]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d109      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a68:	4b2e      	ldr	r3, [pc, #184]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	08db      	lsrs	r3, r3, #3
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	4a2d      	ldr	r2, [pc, #180]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a7a:	e01e      	b.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a7c:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a88:	d106      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a90:	d102      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a92:	4b26      	ldr	r3, [pc, #152]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a96:	e010      	b.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a98:	4b22      	ldr	r3, [pc, #136]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa4:	d106      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aac:	d102      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab2:	e002      	b.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ab8:	e393      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006aba:	e392      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006abc:	4b1d      	ldr	r3, [pc, #116]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac0:	e38f      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac6:	e38c      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ace:	f040 80a7 	bne.w	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006ad2:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ae2:	d05f      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aea:	f200 8096 	bhi.w	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006af4:	f000 808e 	beq.w	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006afe:	f200 808c 	bhi.w	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b08:	d03a      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b10:	f200 8083 	bhi.w	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b20:	d01c      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006b22:	e07a      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006b24:	58024400 	.word	0x58024400
 8006b28:	03d09000 	.word	0x03d09000
 8006b2c:	003d0900 	.word	0x003d0900
 8006b30:	017d7840 	.word	0x017d7840
 8006b34:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b38:	4baa      	ldr	r3, [pc, #680]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b44:	d107      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fe14 	bl	8007778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b54:	e345      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b5a:	e342      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b5c:	4ba1      	ldr	r3, [pc, #644]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b68:	d107      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6a:	f107 0318 	add.w	r3, r7, #24
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fb5a 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b78:	e333      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b7e:	e330      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b80:	4b98      	ldr	r3, [pc, #608]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b8e:	f107 030c 	add.w	r3, r7, #12
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fc9c 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b9c:	e321      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ba2:	e31e      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ba4:	4b8f      	ldr	r3, [pc, #572]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bae:	4b8d      	ldr	r3, [pc, #564]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bc0:	4b88      	ldr	r3, [pc, #544]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	08db      	lsrs	r3, r3, #3
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	4a87      	ldr	r2, [pc, #540]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd2:	e01e      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bd4:	4b83      	ldr	r3, [pc, #524]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be0:	d106      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be8:	d102      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bea:	4b80      	ldr	r3, [pc, #512]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bee:	e010      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bf0:	4b7c      	ldr	r3, [pc, #496]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bfc:	d106      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c04:	d102      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c06:	4b7a      	ldr	r3, [pc, #488]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0a:	e002      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c10:	e2e7      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c12:	e2e6      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c14:	4b77      	ldr	r3, [pc, #476]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c18:	e2e3      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c1e:	e2e0      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c26:	f040 809c 	bne.w	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006c2a:	4b6e      	ldr	r3, [pc, #440]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006c32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c3a:	d054      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c42:	f200 808b 	bhi.w	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c4c:	f000 8083 	beq.w	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c56:	f200 8081 	bhi.w	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c60:	d02f      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c68:	d878      	bhi.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c76:	d012      	beq.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006c78:	e070      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c7a:	4b5a      	ldr	r3, [pc, #360]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c86:	d107      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fd73 	bl	8007778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c96:	e2a4      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c9c:	e2a1      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c9e:	4b51      	ldr	r3, [pc, #324]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006caa:	d107      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cac:	f107 0318 	add.w	r3, r7, #24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fab9 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006cba:	e292      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cc0:	e28f      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cc2:	4b48      	ldr	r3, [pc, #288]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cce:	d107      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd0:	f107 030c 	add.w	r3, r7, #12
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fbfb 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cde:	e280      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ce4:	e27d      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ce6:	4b3f      	ldr	r3, [pc, #252]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cf0:	4b3c      	ldr	r3, [pc, #240]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d10c      	bne.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d02:	4b38      	ldr	r3, [pc, #224]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	08db      	lsrs	r3, r3, #3
 8006d08:	f003 0303 	and.w	r3, r3, #3
 8006d0c:	4a36      	ldr	r2, [pc, #216]	; (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d14:	e01e      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d16:	4b33      	ldr	r3, [pc, #204]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d22:	d106      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d2a:	d102      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d2c:	4b2f      	ldr	r3, [pc, #188]	; (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d30:	e010      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d32:	4b2c      	ldr	r3, [pc, #176]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d3e:	d106      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d46:	d102      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d48:	4b29      	ldr	r3, [pc, #164]	; (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d4c:	e002      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d52:	e246      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d54:	e245      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d56:	4b27      	ldr	r3, [pc, #156]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d5a:	e242      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d60:	e23f      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d68:	f040 80a8 	bne.w	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d7c:	d060      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d84:	f200 8097 	bhi.w	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d8e:	f000 808f 	beq.w	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d98:	f200 808d 	bhi.w	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da2:	d03b      	beq.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006daa:	f200 8084 	bhi.w	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dba:	d01d      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006dbc:	e07b      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dca:	d107      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fcd1 	bl	8007778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dda:	e202      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de0:	e1ff      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006de2:	bf00      	nop
 8006de4:	58024400 	.word	0x58024400
 8006de8:	03d09000 	.word	0x03d09000
 8006dec:	003d0900 	.word	0x003d0900
 8006df0:	017d7840 	.word	0x017d7840
 8006df4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006df8:	4ba3      	ldr	r3, [pc, #652]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e04:	d107      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e06:	f107 0318 	add.w	r3, r7, #24
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fa0c 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e14:	e1e5      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e1a:	e1e2      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e1c:	4b9a      	ldr	r3, [pc, #616]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e28:	d107      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e2a:	f107 030c 	add.w	r3, r7, #12
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fb4e 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e38:	e1d3      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e3e:	e1d0      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e40:	4b91      	ldr	r3, [pc, #580]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e4a:	4b8f      	ldr	r3, [pc, #572]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d109      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e5c:	4b8a      	ldr	r3, [pc, #552]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	08db      	lsrs	r3, r3, #3
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	4a89      	ldr	r2, [pc, #548]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e6e:	e01e      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e70:	4b85      	ldr	r3, [pc, #532]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7c:	d106      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e84:	d102      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e86:	4b82      	ldr	r3, [pc, #520]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8a:	e010      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e8c:	4b7e      	ldr	r3, [pc, #504]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e98:	d106      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea0:	d102      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ea2:	4b7c      	ldr	r3, [pc, #496]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea6:	e002      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006eac:	e199      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006eae:	e198      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006eb0:	4b79      	ldr	r3, [pc, #484]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb4:	e195      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eba:	e192      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ec2:	d173      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006ec4:	4b70      	ldr	r3, [pc, #448]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ecc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ed4:	d02f      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006edc:	d863      	bhi.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eea:	d012      	beq.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006eec:	e05b      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eee:	4b66      	ldr	r3, [pc, #408]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006efa:	d107      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006efc:	f107 0318 	add.w	r3, r7, #24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f991 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f0a:	e16a      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f10:	e167      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f12:	4b5d      	ldr	r3, [pc, #372]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f20:	f107 030c 	add.w	r3, r7, #12
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fad3 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f2e:	e158      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f34:	e155      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f36:	4b54      	ldr	r3, [pc, #336]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f40:	4b51      	ldr	r3, [pc, #324]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d10c      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f52:	4b4d      	ldr	r3, [pc, #308]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	08db      	lsrs	r3, r3, #3
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	4a4b      	ldr	r2, [pc, #300]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f64:	e01e      	b.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f66:	4b48      	ldr	r3, [pc, #288]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f72:	d106      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f7a:	d102      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f7c:	4b44      	ldr	r3, [pc, #272]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f80:	e010      	b.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f82:	4b41      	ldr	r3, [pc, #260]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f8e:	d106      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f96:	d102      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f98:	4b3e      	ldr	r3, [pc, #248]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f9c:	e002      	b.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006fa2:	e11e      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006fa4:	e11d      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006faa:	e11a      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb2:	d133      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006fb4:	4b34      	ldr	r3, [pc, #208]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fca:	d012      	beq.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006fcc:	e023      	b.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fda:	d107      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fbc9 	bl	8007778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fea:	e0fa      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ff0:	e0f7      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ff2:	4b25      	ldr	r3, [pc, #148]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ffe:	d107      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007000:	f107 0318 	add.w	r3, r7, #24
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f90f 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800700e:	e0e8      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007014:	e0e5      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800701a:	e0e2      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007022:	f040 808f 	bne.w	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007026:	4b18      	ldr	r3, [pc, #96]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800702e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007036:	d075      	beq.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800703e:	d87e      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007046:	d060      	beq.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704e:	d876      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007056:	d045      	beq.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800705e:	d86e      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007066:	d02b      	beq.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706e:	d866      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800707c:	d00e      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800707e:	e05e      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007080:	f000 f8bc 	bl	80071fc <HAL_RCCEx_GetD3PCLK1Freq>
 8007084:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007086:	e0ac      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007088:	58024400 	.word	0x58024400
 800708c:	03d09000 	.word	0x03d09000
 8007090:	003d0900 	.word	0x003d0900
 8007094:	017d7840 	.word	0x017d7840
 8007098:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800709c:	4b53      	ldr	r3, [pc, #332]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070a8:	d107      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070aa:	f107 0318 	add.w	r3, r7, #24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 f8ba 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070b8:	e093      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070be:	e090      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070c0:	4b4a      	ldr	r3, [pc, #296]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070cc:	d107      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ce:	f107 030c 	add.w	r3, r7, #12
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 f9fc 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80070dc:	e081      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e2:	e07e      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070e4:	4b41      	ldr	r3, [pc, #260]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d109      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070f0:	4b3e      	ldr	r3, [pc, #248]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	08db      	lsrs	r3, r3, #3
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	4a3d      	ldr	r2, [pc, #244]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007102:	e06e      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007108:	e06b      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800710a:	4b38      	ldr	r3, [pc, #224]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007116:	d102      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007118:	4b36      	ldr	r3, [pc, #216]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800711a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800711c:	e061      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007122:	e05e      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007124:	4b31      	ldr	r3, [pc, #196]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007130:	d102      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007132:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007136:	e054      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713c:	e051      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007142:	e04e      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714a:	d148      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800714c:	4b27      	ldr	r3, [pc, #156]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007154:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715c:	d02a      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007164:	d838      	bhi.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007172:	d00d      	beq.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007174:	e030      	b.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007176:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007182:	d102      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007184:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007188:	e02b      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800718e:	e028      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007190:	4b16      	ldr	r3, [pc, #88]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800719c:	d107      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800719e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fae8 	bl	8007778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071ac:	e019      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b2:	e016      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071b4:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c0:	d107      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071c2:	f107 0318 	add.w	r3, r7, #24
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f82e 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071d0:	e007      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d6:	e004      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071dc:	e001      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80071e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3740      	adds	r7, #64	; 0x40
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	58024400 	.word	0x58024400
 80071f0:	03d09000 	.word	0x03d09000
 80071f4:	003d0900 	.word	0x003d0900
 80071f8:	017d7840 	.word	0x017d7840

080071fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007200:	f7fe fb8e 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8007204:	4602      	mov	r2, r0
 8007206:	4b06      	ldr	r3, [pc, #24]	; (8007220 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	091b      	lsrs	r3, r3, #4
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	4904      	ldr	r1, [pc, #16]	; (8007224 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007212:	5ccb      	ldrb	r3, [r1, r3]
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800721c:	4618      	mov	r0, r3
 800721e:	bd80      	pop	{r7, pc}
 8007220:	58024400 	.word	0x58024400
 8007224:	0800ef4c 	.word	0x0800ef4c

08007228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007228:	b480      	push	{r7}
 800722a:	b089      	sub	sp, #36	; 0x24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007230:	4ba1      	ldr	r3, [pc, #644]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800723a:	4b9f      	ldr	r3, [pc, #636]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	0b1b      	lsrs	r3, r3, #12
 8007240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007244:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007246:	4b9c      	ldr	r3, [pc, #624]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	091b      	lsrs	r3, r3, #4
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007252:	4b99      	ldr	r3, [pc, #612]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	08db      	lsrs	r3, r3, #3
 8007258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	fb02 f303 	mul.w	r3, r2, r3
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 8111 	beq.w	8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b02      	cmp	r3, #2
 800727a:	f000 8083 	beq.w	8007384 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b02      	cmp	r3, #2
 8007282:	f200 80a1 	bhi.w	80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d056      	beq.n	8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007292:	e099      	b.n	80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007294:	4b88      	ldr	r3, [pc, #544]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d02d      	beq.n	80072fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072a0:	4b85      	ldr	r3, [pc, #532]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	08db      	lsrs	r3, r3, #3
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	4a84      	ldr	r2, [pc, #528]	; (80074bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
 80072b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ca:	4b7b      	ldr	r3, [pc, #492]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a03 	vldr	s12, [r7, #12]
 80072de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072fa:	e087      	b.n	800740c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b6a      	ldr	r3, [pc, #424]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007322:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800733e:	e065      	b.n	800740c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b59      	ldr	r3, [pc, #356]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a03 	vldr	s12, [r7, #12]
 8007366:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007382:	e043      	b.n	800740c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007396:	4b48      	ldr	r3, [pc, #288]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073c6:	e021      	b.n	800740c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073da:	4b37      	ldr	r3, [pc, #220]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800740a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800740c:	4b2a      	ldr	r3, [pc, #168]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	0a5b      	lsrs	r3, r3, #9
 8007412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007426:	edd7 6a07 	vldr	s13, [r7, #28]
 800742a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800742e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007432:	ee17 2a90 	vmov	r2, s15
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800743a:	4b1f      	ldr	r3, [pc, #124]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743e:	0c1b      	lsrs	r3, r3, #16
 8007440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007454:	edd7 6a07 	vldr	s13, [r7, #28]
 8007458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800745c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007460:	ee17 2a90 	vmov	r2, s15
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007468:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	0e1b      	lsrs	r3, r3, #24
 800746e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800747e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007482:	edd7 6a07 	vldr	s13, [r7, #28]
 8007486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748e:	ee17 2a90 	vmov	r2, s15
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007496:	e008      	b.n	80074aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	609a      	str	r2, [r3, #8]
}
 80074aa:	bf00      	nop
 80074ac:	3724      	adds	r7, #36	; 0x24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	58024400 	.word	0x58024400
 80074bc:	03d09000 	.word	0x03d09000
 80074c0:	46000000 	.word	0x46000000
 80074c4:	4c742400 	.word	0x4c742400
 80074c8:	4a742400 	.word	0x4a742400
 80074cc:	4bbebc20 	.word	0x4bbebc20

080074d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b089      	sub	sp, #36	; 0x24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074d8:	4ba1      	ldr	r3, [pc, #644]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80074e2:	4b9f      	ldr	r3, [pc, #636]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e6:	0d1b      	lsrs	r3, r3, #20
 80074e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80074ee:	4b9c      	ldr	r3, [pc, #624]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	0a1b      	lsrs	r3, r3, #8
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80074fa:	4b99      	ldr	r3, [pc, #612]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	08db      	lsrs	r3, r3, #3
 8007500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	fb02 f303 	mul.w	r3, r2, r3
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 8111 	beq.w	8007740 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	2b02      	cmp	r3, #2
 8007522:	f000 8083 	beq.w	800762c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	2b02      	cmp	r3, #2
 800752a:	f200 80a1 	bhi.w	8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d056      	beq.n	80075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800753a:	e099      	b.n	8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800753c:	4b88      	ldr	r3, [pc, #544]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d02d      	beq.n	80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007548:	4b85      	ldr	r3, [pc, #532]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	08db      	lsrs	r3, r3, #3
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	4a84      	ldr	r2, [pc, #528]	; (8007764 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007554:	fa22 f303 	lsr.w	r3, r2, r3
 8007558:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007572:	4b7b      	ldr	r3, [pc, #492]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007582:	ed97 6a03 	vldr	s12, [r7, #12]
 8007586:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800758a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075a2:	e087      	b.n	80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800776c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b6:	4b6a      	ldr	r3, [pc, #424]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075e6:	e065      	b.n	80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fa:	4b59      	ldr	r3, [pc, #356]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760a:	ed97 6a03 	vldr	s12, [r7, #12]
 800760e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800762a:	e043      	b.n	80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800763a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763e:	4b48      	ldr	r3, [pc, #288]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007652:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800766e:	e021      	b.n	80076b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800767e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007682:	4b37      	ldr	r3, [pc, #220]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007692:	ed97 6a03 	vldr	s12, [r7, #12]
 8007696:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800769a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80076b4:	4b2a      	ldr	r3, [pc, #168]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	0a5b      	lsrs	r3, r3, #9
 80076ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80076d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076da:	ee17 2a90 	vmov	r2, s15
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80076e2:	4b1f      	ldr	r3, [pc, #124]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007708:	ee17 2a90 	vmov	r2, s15
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007710:	4b13      	ldr	r3, [pc, #76]	; (8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	0e1b      	lsrs	r3, r3, #24
 8007716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800772a:	edd7 6a07 	vldr	s13, [r7, #28]
 800772e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007736:	ee17 2a90 	vmov	r2, s15
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800773e:	e008      	b.n	8007752 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	609a      	str	r2, [r3, #8]
}
 8007752:	bf00      	nop
 8007754:	3724      	adds	r7, #36	; 0x24
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
 8007764:	03d09000 	.word	0x03d09000
 8007768:	46000000 	.word	0x46000000
 800776c:	4c742400 	.word	0x4c742400
 8007770:	4a742400 	.word	0x4a742400
 8007774:	4bbebc20 	.word	0x4bbebc20

08007778 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	; 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007780:	4ba0      	ldr	r3, [pc, #640]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800778a:	4b9e      	ldr	r3, [pc, #632]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	091b      	lsrs	r3, r3, #4
 8007790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007794:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007796:	4b9b      	ldr	r3, [pc, #620]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077a0:	4b98      	ldr	r3, [pc, #608]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a4:	08db      	lsrs	r3, r3, #3
 80077a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	fb02 f303 	mul.w	r3, r2, r3
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 8111 	beq.w	80079e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	f000 8083 	beq.w	80078d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	f200 80a1 	bhi.w	8007916 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d056      	beq.n	800788e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80077e0:	e099      	b.n	8007916 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e2:	4b88      	ldr	r3, [pc, #544]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d02d      	beq.n	800784a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077ee:	4b85      	ldr	r3, [pc, #532]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	08db      	lsrs	r3, r3, #3
 80077f4:	f003 0303 	and.w	r3, r3, #3
 80077f8:	4a83      	ldr	r2, [pc, #524]	; (8007a08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80077fa:	fa22 f303 	lsr.w	r3, r2, r3
 80077fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007818:	4b7a      	ldr	r3, [pc, #488]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007820:	ee07 3a90 	vmov	s15, r3
 8007824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007828:	ed97 6a03 	vldr	s12, [r7, #12]
 800782c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007844:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007848:	e087      	b.n	800795a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007854:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785c:	4b69      	ldr	r3, [pc, #420]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007870:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007888:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800788c:	e065      	b.n	800795a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007898:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800789c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a0:	4b58      	ldr	r3, [pc, #352]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078d0:	e043      	b.n	800795a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80078e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e4:	4b47      	ldr	r3, [pc, #284]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007914:	e021      	b.n	800795a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	ee07 3a90 	vmov	s15, r3
 800791c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007920:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007928:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007938:	ed97 6a03 	vldr	s12, [r7, #12]
 800793c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800794c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007954:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007958:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800795a:	4b2a      	ldr	r3, [pc, #168]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	0a5b      	lsrs	r3, r3, #9
 8007960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007974:	edd7 6a07 	vldr	s13, [r7, #28]
 8007978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007980:	ee17 2a90 	vmov	r2, s15
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800799e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ae:	ee17 2a90 	vmov	r2, s15
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80079b6:	4b13      	ldr	r3, [pc, #76]	; (8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	0e1b      	lsrs	r3, r3, #24
 80079bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079dc:	ee17 2a90 	vmov	r2, s15
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079e4:	e008      	b.n	80079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	609a      	str	r2, [r3, #8]
}
 80079f8:	bf00      	nop
 80079fa:	3724      	adds	r7, #36	; 0x24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	58024400 	.word	0x58024400
 8007a08:	03d09000 	.word	0x03d09000
 8007a0c:	46000000 	.word	0x46000000
 8007a10:	4c742400 	.word	0x4c742400
 8007a14:	4a742400 	.word	0x4a742400
 8007a18:	4bbebc20 	.word	0x4bbebc20

08007a1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a2a:	4b53      	ldr	r3, [pc, #332]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d101      	bne.n	8007a3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e099      	b.n	8007b6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a3a:	4b4f      	ldr	r3, [pc, #316]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a4e      	ldr	r2, [pc, #312]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a46:	f7fa f8d1 	bl	8001bec <HAL_GetTick>
 8007a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a4c:	e008      	b.n	8007a60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a4e:	f7fa f8cd 	bl	8001bec <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d901      	bls.n	8007a60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e086      	b.n	8007b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a60:	4b45      	ldr	r3, [pc, #276]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f0      	bne.n	8007a4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a6c:	4b42      	ldr	r3, [pc, #264]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	493f      	ldr	r1, [pc, #252]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	025b      	lsls	r3, r3, #9
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	041b      	lsls	r3, r3, #16
 8007a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	061b      	lsls	r3, r3, #24
 8007aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ab0:	4931      	ldr	r1, [pc, #196]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ab6:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	492d      	ldr	r1, [pc, #180]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ac8:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	f023 0220 	bic.w	r2, r3, #32
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	4928      	ldr	r1, [pc, #160]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ada:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	4a26      	ldr	r2, [pc, #152]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	f023 0310 	bic.w	r3, r3, #16
 8007ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ae6:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <RCCEx_PLL2_Config+0x160>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	69d2      	ldr	r2, [r2, #28]
 8007af2:	00d2      	lsls	r2, r2, #3
 8007af4:	4920      	ldr	r1, [pc, #128]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007afa:	4b1f      	ldr	r3, [pc, #124]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	4a1e      	ldr	r2, [pc, #120]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b00:	f043 0310 	orr.w	r3, r3, #16
 8007b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b18:	e00f      	b.n	8007b3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d106      	bne.n	8007b2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b20:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b2c:	e005      	b.n	8007b3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	4a11      	ldr	r2, [pc, #68]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b46:	f7fa f851 	bl	8001bec <HAL_GetTick>
 8007b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b4c:	e008      	b.n	8007b60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b4e:	f7fa f84d 	bl	8001bec <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e006      	b.n	8007b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	ffff0007 	.word	0xffff0007

08007b80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b8e:	4b53      	ldr	r3, [pc, #332]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d101      	bne.n	8007b9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e099      	b.n	8007cd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b9e:	4b4f      	ldr	r3, [pc, #316]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a4e      	ldr	r2, [pc, #312]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007baa:	f7fa f81f 	bl	8001bec <HAL_GetTick>
 8007bae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bb0:	e008      	b.n	8007bc4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bb2:	f7fa f81b 	bl	8001bec <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e086      	b.n	8007cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bc4:	4b45      	ldr	r3, [pc, #276]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f0      	bne.n	8007bb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007bd0:	4b42      	ldr	r3, [pc, #264]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	051b      	lsls	r3, r3, #20
 8007bde:	493f      	ldr	r1, [pc, #252]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	628b      	str	r3, [r1, #40]	; 0x28
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	025b      	lsls	r3, r3, #9
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	041b      	lsls	r3, r3, #16
 8007c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	061b      	lsls	r3, r3, #24
 8007c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c14:	4931      	ldr	r1, [pc, #196]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c1a:	4b30      	ldr	r3, [pc, #192]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	492d      	ldr	r1, [pc, #180]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c2c:	4b2b      	ldr	r3, [pc, #172]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	4928      	ldr	r1, [pc, #160]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c3e:	4b27      	ldr	r3, [pc, #156]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	4a26      	ldr	r2, [pc, #152]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c4a:	4b24      	ldr	r3, [pc, #144]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c4e:	4b24      	ldr	r3, [pc, #144]	; (8007ce0 <RCCEx_PLL3_Config+0x160>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	69d2      	ldr	r2, [r2, #28]
 8007c56:	00d2      	lsls	r2, r2, #3
 8007c58:	4920      	ldr	r1, [pc, #128]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c5e:	4b1f      	ldr	r3, [pc, #124]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a1e      	ldr	r2, [pc, #120]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c70:	4b1a      	ldr	r3, [pc, #104]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c7c:	e00f      	b.n	8007c9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d106      	bne.n	8007c92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c84:	4b15      	ldr	r3, [pc, #84]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	4a14      	ldr	r2, [pc, #80]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c90:	e005      	b.n	8007c9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c92:	4b12      	ldr	r3, [pc, #72]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a0e      	ldr	r2, [pc, #56]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007caa:	f7f9 ff9f 	bl	8001bec <HAL_GetTick>
 8007cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cb0:	e008      	b.n	8007cc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007cb2:	f7f9 ff9b 	bl	8001bec <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e006      	b.n	8007cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	58024400 	.word	0x58024400
 8007ce0:	ffff0007 	.word	0xffff0007

08007ce4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d067      	beq.n	8007dc6 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d106      	bne.n	8007d10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7f9 f972 	bl	8000ff4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	22ca      	movs	r2, #202	; 0xca
 8007d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2253      	movs	r2, #83	; 0x53
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f879 	bl	8007e20 <RTC_EnterInitMode>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d13b      	bne.n	8007db0 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6899      	ldr	r1, [r3, #8]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b23      	ldr	r3, [pc, #140]	; (8007dd0 <HAL_RTC_Init+0xec>)
 8007d44:	400b      	ands	r3, r1
 8007d46:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6899      	ldr	r1, [r3, #8]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	0419      	lsls	r1, r3, #16
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f881 	bl	8007e80 <RTC_ExitInitMode>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d113      	bne.n	8007db0 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0203 	bic.w	r2, r2, #3
 8007d96:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69da      	ldr	r2, [r3, #28]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	22ff      	movs	r2, #255	; 0xff
 8007db6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	ff8fffbf 	.word	0xff8fffbf

08007dd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dea:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8007dec:	f7f9 fefe 	bl	8001bec <HAL_GetTick>
 8007df0:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007df2:	e009      	b.n	8007e08 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007df4:	f7f9 fefa 	bl	8001bec <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e02:	d901      	bls.n	8007e08 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e007      	b.n	8007e18 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0ee      	beq.n	8007df4 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d11d      	bne.n	8007e76 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e44:	f7f9 fed2 	bl	8001bec <HAL_GetTick>
 8007e48:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e4a:	e00d      	b.n	8007e68 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e4c:	f7f9 fece 	bl	8001bec <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e5a:	d905      	bls.n	8007e68 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2203      	movs	r2, #3
 8007e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0ea      	beq.n	8007e4c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <RTC_ExitInitMode+0x78>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <RTC_ExitInitMode+0x78>)
 8007e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e96:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007e98:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <RTC_ExitInitMode+0x78>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff95 	bl	8007dd4 <HAL_RTC_WaitForSynchro>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01e      	beq.n	8007eee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	73fb      	strb	r3, [r7, #15]
 8007ebc:	e017      	b.n	8007eee <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007ebe:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <RTC_ExitInitMode+0x78>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <RTC_ExitInitMode+0x78>)
 8007ec4:	f023 0320 	bic.w	r3, r3, #32
 8007ec8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff ff82 	bl	8007dd4 <HAL_RTC_WaitForSynchro>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2203      	movs	r2, #3
 8007eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <RTC_ExitInitMode+0x78>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	4a04      	ldr	r2, [pc, #16]	; (8007ef8 <RTC_ExitInitMode+0x78>)
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	58004000 	.word	0x58004000

08007efc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e0eb      	b.n	80080ea <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a75      	ldr	r2, [pc, #468]	; (80080f4 <HAL_SPI_Init+0x1f8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00f      	beq.n	8007f42 <HAL_SPI_Init+0x46>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a74      	ldr	r2, [pc, #464]	; (80080f8 <HAL_SPI_Init+0x1fc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00a      	beq.n	8007f42 <HAL_SPI_Init+0x46>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a72      	ldr	r2, [pc, #456]	; (80080fc <HAL_SPI_Init+0x200>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d005      	beq.n	8007f42 <HAL_SPI_Init+0x46>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	2b0f      	cmp	r3, #15
 8007f3c:	d901      	bls.n	8007f42 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e0d3      	b.n	80080ea <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8dc 	bl	8008100 <SPI_GetPacketSize>
 8007f48:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a69      	ldr	r2, [pc, #420]	; (80080f4 <HAL_SPI_Init+0x1f8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d00c      	beq.n	8007f6e <HAL_SPI_Init+0x72>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a67      	ldr	r2, [pc, #412]	; (80080f8 <HAL_SPI_Init+0x1fc>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d007      	beq.n	8007f6e <HAL_SPI_Init+0x72>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a66      	ldr	r2, [pc, #408]	; (80080fc <HAL_SPI_Init+0x200>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d002      	beq.n	8007f6e <HAL_SPI_Init+0x72>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d811      	bhi.n	8007f92 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f72:	4a60      	ldr	r2, [pc, #384]	; (80080f4 <HAL_SPI_Init+0x1f8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d009      	beq.n	8007f8c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a5e      	ldr	r2, [pc, #376]	; (80080f8 <HAL_SPI_Init+0x1fc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d004      	beq.n	8007f8c <HAL_SPI_Init+0x90>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a5d      	ldr	r2, [pc, #372]	; (80080fc <HAL_SPI_Init+0x200>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d104      	bne.n	8007f96 <HAL_SPI_Init+0x9a>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b10      	cmp	r3, #16
 8007f90:	d901      	bls.n	8007f96 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e0a9      	b.n	80080ea <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7f9 f900 	bl	80011b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fd0:	d119      	bne.n	8008006 <HAL_SPI_Init+0x10a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fda:	d103      	bne.n	8007fe4 <HAL_SPI_Init+0xe8>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d008      	beq.n	8007ff6 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10c      	bne.n	8008006 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ff4:	d107      	bne.n	8008006 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008004:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69da      	ldr	r2, [r3, #28]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	431a      	orrs	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008018:	ea42 0103 	orr.w	r1, r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	431a      	orrs	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008066:	ea42 0103 	orr.w	r1, r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d113      	bne.n	80080a6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008090:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 0201 	bic.w	r2, r2, #1
 80080b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	40013000 	.word	0x40013000
 80080f8:	40003800 	.word	0x40003800
 80080fc:	40003c00 	.word	0x40003c00

08008100 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810c:	095b      	lsrs	r3, r3, #5
 800810e:	3301      	adds	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3307      	adds	r3, #7
 800811e:	08db      	lsrs	r3, r3, #3
 8008120:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	fb02 f303 	mul.w	r3, r2, r3
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e049      	b.n	80081dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d106      	bne.n	8008162 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7f9 fa57 	bl	8001610 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f000 f945 	bl	8008404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e0fd      	b.n	80083fa <HAL_TIM_PWM_ConfigChannel+0x216>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b14      	cmp	r3, #20
 800820a:	f200 80f0 	bhi.w	80083ee <HAL_TIM_PWM_ConfigChannel+0x20a>
 800820e:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	08008269 	.word	0x08008269
 8008218:	080083ef 	.word	0x080083ef
 800821c:	080083ef 	.word	0x080083ef
 8008220:	080083ef 	.word	0x080083ef
 8008224:	080082a9 	.word	0x080082a9
 8008228:	080083ef 	.word	0x080083ef
 800822c:	080083ef 	.word	0x080083ef
 8008230:	080083ef 	.word	0x080083ef
 8008234:	080082eb 	.word	0x080082eb
 8008238:	080083ef 	.word	0x080083ef
 800823c:	080083ef 	.word	0x080083ef
 8008240:	080083ef 	.word	0x080083ef
 8008244:	0800832b 	.word	0x0800832b
 8008248:	080083ef 	.word	0x080083ef
 800824c:	080083ef 	.word	0x080083ef
 8008250:	080083ef 	.word	0x080083ef
 8008254:	0800836d 	.word	0x0800836d
 8008258:	080083ef 	.word	0x080083ef
 800825c:	080083ef 	.word	0x080083ef
 8008260:	080083ef 	.word	0x080083ef
 8008264:	080083ad 	.word	0x080083ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f962 	bl	8008538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699a      	ldr	r2, [r3, #24]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0208 	orr.w	r2, r2, #8
 8008282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699a      	ldr	r2, [r3, #24]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0204 	bic.w	r2, r2, #4
 8008292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6999      	ldr	r1, [r3, #24]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	619a      	str	r2, [r3, #24]
      break;
 80082a6:	e0a3      	b.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68b9      	ldr	r1, [r7, #8]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f9d2 	bl	8008658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699a      	ldr	r2, [r3, #24]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6999      	ldr	r1, [r3, #24]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	021a      	lsls	r2, r3, #8
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	619a      	str	r2, [r3, #24]
      break;
 80082e8:	e082      	b.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68b9      	ldr	r1, [r7, #8]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fa3b 	bl	800876c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69da      	ldr	r2, [r3, #28]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0208 	orr.w	r2, r2, #8
 8008304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0204 	bic.w	r2, r2, #4
 8008314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69d9      	ldr	r1, [r3, #28]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	61da      	str	r2, [r3, #28]
      break;
 8008328:	e062      	b.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	4618      	mov	r0, r3
 8008332:	f000 faa1 	bl	8008878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69da      	ldr	r2, [r3, #28]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69da      	ldr	r2, [r3, #28]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69d9      	ldr	r1, [r3, #28]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	021a      	lsls	r2, r3, #8
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	61da      	str	r2, [r3, #28]
      break;
 800836a:	e041      	b.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fae8 	bl	8008948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0208 	orr.w	r2, r2, #8
 8008386:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0204 	bic.w	r2, r2, #4
 8008396:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083aa:	e021      	b.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68b9      	ldr	r1, [r7, #8]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fb2a 	bl	8008a0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	021a      	lsls	r2, r3, #8
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083ec:	e000      	b.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80083ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop

08008404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a40      	ldr	r2, [pc, #256]	; (8008518 <TIM_Base_SetConfig+0x114>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d013      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008422:	d00f      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a3d      	ldr	r2, [pc, #244]	; (800851c <TIM_Base_SetConfig+0x118>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00b      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a3c      	ldr	r2, [pc, #240]	; (8008520 <TIM_Base_SetConfig+0x11c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d007      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a3b      	ldr	r2, [pc, #236]	; (8008524 <TIM_Base_SetConfig+0x120>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d003      	beq.n	8008444 <TIM_Base_SetConfig+0x40>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a3a      	ldr	r2, [pc, #232]	; (8008528 <TIM_Base_SetConfig+0x124>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d108      	bne.n	8008456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a2f      	ldr	r2, [pc, #188]	; (8008518 <TIM_Base_SetConfig+0x114>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d01f      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008464:	d01b      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a2c      	ldr	r2, [pc, #176]	; (800851c <TIM_Base_SetConfig+0x118>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d017      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a2b      	ldr	r2, [pc, #172]	; (8008520 <TIM_Base_SetConfig+0x11c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d013      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a2a      	ldr	r2, [pc, #168]	; (8008524 <TIM_Base_SetConfig+0x120>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d00f      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a29      	ldr	r2, [pc, #164]	; (8008528 <TIM_Base_SetConfig+0x124>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00b      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a28      	ldr	r2, [pc, #160]	; (800852c <TIM_Base_SetConfig+0x128>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d007      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a27      	ldr	r2, [pc, #156]	; (8008530 <TIM_Base_SetConfig+0x12c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d003      	beq.n	800849e <TIM_Base_SetConfig+0x9a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a26      	ldr	r2, [pc, #152]	; (8008534 <TIM_Base_SetConfig+0x130>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d108      	bne.n	80084b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a10      	ldr	r2, [pc, #64]	; (8008518 <TIM_Base_SetConfig+0x114>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00f      	beq.n	80084fc <TIM_Base_SetConfig+0xf8>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a12      	ldr	r2, [pc, #72]	; (8008528 <TIM_Base_SetConfig+0x124>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00b      	beq.n	80084fc <TIM_Base_SetConfig+0xf8>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a11      	ldr	r2, [pc, #68]	; (800852c <TIM_Base_SetConfig+0x128>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d007      	beq.n	80084fc <TIM_Base_SetConfig+0xf8>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a10      	ldr	r2, [pc, #64]	; (8008530 <TIM_Base_SetConfig+0x12c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d003      	beq.n	80084fc <TIM_Base_SetConfig+0xf8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a0f      	ldr	r2, [pc, #60]	; (8008534 <TIM_Base_SetConfig+0x130>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d103      	bne.n	8008504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	615a      	str	r2, [r3, #20]
}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	40010000 	.word	0x40010000
 800851c:	40000400 	.word	0x40000400
 8008520:	40000800 	.word	0x40000800
 8008524:	40000c00 	.word	0x40000c00
 8008528:	40010400 	.word	0x40010400
 800852c:	40014000 	.word	0x40014000
 8008530:	40014400 	.word	0x40014400
 8008534:	40014800 	.word	0x40014800

08008538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f023 0201 	bic.w	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4b37      	ldr	r3, [pc, #220]	; (8008640 <TIM_OC1_SetConfig+0x108>)
 8008564:	4013      	ands	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 0302 	bic.w	r3, r3, #2
 8008580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4313      	orrs	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a2d      	ldr	r2, [pc, #180]	; (8008644 <TIM_OC1_SetConfig+0x10c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00f      	beq.n	80085b4 <TIM_OC1_SetConfig+0x7c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a2c      	ldr	r2, [pc, #176]	; (8008648 <TIM_OC1_SetConfig+0x110>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00b      	beq.n	80085b4 <TIM_OC1_SetConfig+0x7c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a2b      	ldr	r2, [pc, #172]	; (800864c <TIM_OC1_SetConfig+0x114>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d007      	beq.n	80085b4 <TIM_OC1_SetConfig+0x7c>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a2a      	ldr	r2, [pc, #168]	; (8008650 <TIM_OC1_SetConfig+0x118>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d003      	beq.n	80085b4 <TIM_OC1_SetConfig+0x7c>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a29      	ldr	r2, [pc, #164]	; (8008654 <TIM_OC1_SetConfig+0x11c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d10c      	bne.n	80085ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f023 0308 	bic.w	r3, r3, #8
 80085ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f023 0304 	bic.w	r3, r3, #4
 80085cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a1c      	ldr	r2, [pc, #112]	; (8008644 <TIM_OC1_SetConfig+0x10c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d00f      	beq.n	80085f6 <TIM_OC1_SetConfig+0xbe>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a1b      	ldr	r2, [pc, #108]	; (8008648 <TIM_OC1_SetConfig+0x110>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00b      	beq.n	80085f6 <TIM_OC1_SetConfig+0xbe>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a1a      	ldr	r2, [pc, #104]	; (800864c <TIM_OC1_SetConfig+0x114>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d007      	beq.n	80085f6 <TIM_OC1_SetConfig+0xbe>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a19      	ldr	r2, [pc, #100]	; (8008650 <TIM_OC1_SetConfig+0x118>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d003      	beq.n	80085f6 <TIM_OC1_SetConfig+0xbe>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a18      	ldr	r2, [pc, #96]	; (8008654 <TIM_OC1_SetConfig+0x11c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d111      	bne.n	800861a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	4313      	orrs	r3, r2
 800860e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	621a      	str	r2, [r3, #32]
}
 8008634:	bf00      	nop
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	fffeff8f 	.word	0xfffeff8f
 8008644:	40010000 	.word	0x40010000
 8008648:	40010400 	.word	0x40010400
 800864c:	40014000 	.word	0x40014000
 8008650:	40014400 	.word	0x40014400
 8008654:	40014800 	.word	0x40014800

08008658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	f023 0210 	bic.w	r2, r3, #16
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4b34      	ldr	r3, [pc, #208]	; (8008754 <TIM_OC2_SetConfig+0xfc>)
 8008684:	4013      	ands	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800868e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	021b      	lsls	r3, r3, #8
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f023 0320 	bic.w	r3, r3, #32
 80086a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a29      	ldr	r2, [pc, #164]	; (8008758 <TIM_OC2_SetConfig+0x100>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_OC2_SetConfig+0x68>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a28      	ldr	r2, [pc, #160]	; (800875c <TIM_OC2_SetConfig+0x104>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10d      	bne.n	80086dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a1e      	ldr	r2, [pc, #120]	; (8008758 <TIM_OC2_SetConfig+0x100>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00f      	beq.n	8008704 <TIM_OC2_SetConfig+0xac>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a1d      	ldr	r2, [pc, #116]	; (800875c <TIM_OC2_SetConfig+0x104>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_OC2_SetConfig+0xac>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a1c      	ldr	r2, [pc, #112]	; (8008760 <TIM_OC2_SetConfig+0x108>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_OC2_SetConfig+0xac>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a1b      	ldr	r2, [pc, #108]	; (8008764 <TIM_OC2_SetConfig+0x10c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_OC2_SetConfig+0xac>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a1a      	ldr	r2, [pc, #104]	; (8008768 <TIM_OC2_SetConfig+0x110>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d113      	bne.n	800872c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800870a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	621a      	str	r2, [r3, #32]
}
 8008746:	bf00      	nop
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	feff8fff 	.word	0xfeff8fff
 8008758:	40010000 	.word	0x40010000
 800875c:	40010400 	.word	0x40010400
 8008760:	40014000 	.word	0x40014000
 8008764:	40014400 	.word	0x40014400
 8008768:	40014800 	.word	0x40014800

0800876c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	021b      	lsls	r3, r3, #8
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	4313      	orrs	r3, r2
 80087c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a27      	ldr	r2, [pc, #156]	; (8008864 <TIM_OC3_SetConfig+0xf8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d003      	beq.n	80087d2 <TIM_OC3_SetConfig+0x66>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a26      	ldr	r2, [pc, #152]	; (8008868 <TIM_OC3_SetConfig+0xfc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d10d      	bne.n	80087ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a1c      	ldr	r2, [pc, #112]	; (8008864 <TIM_OC3_SetConfig+0xf8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00f      	beq.n	8008816 <TIM_OC3_SetConfig+0xaa>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a1b      	ldr	r2, [pc, #108]	; (8008868 <TIM_OC3_SetConfig+0xfc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00b      	beq.n	8008816 <TIM_OC3_SetConfig+0xaa>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a1a      	ldr	r2, [pc, #104]	; (800886c <TIM_OC3_SetConfig+0x100>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d007      	beq.n	8008816 <TIM_OC3_SetConfig+0xaa>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a19      	ldr	r2, [pc, #100]	; (8008870 <TIM_OC3_SetConfig+0x104>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d003      	beq.n	8008816 <TIM_OC3_SetConfig+0xaa>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a18      	ldr	r2, [pc, #96]	; (8008874 <TIM_OC3_SetConfig+0x108>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d113      	bne.n	800883e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800881c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	011b      	lsls	r3, r3, #4
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	4313      	orrs	r3, r2
 8008830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	621a      	str	r2, [r3, #32]
}
 8008858:	bf00      	nop
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	40010000 	.word	0x40010000
 8008868:	40010400 	.word	0x40010400
 800886c:	40014000 	.word	0x40014000
 8008870:	40014400 	.word	0x40014400
 8008874:	40014800 	.word	0x40014800

08008878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	031b      	lsls	r3, r3, #12
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a18      	ldr	r2, [pc, #96]	; (8008934 <TIM_OC4_SetConfig+0xbc>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00f      	beq.n	80088f8 <TIM_OC4_SetConfig+0x80>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a17      	ldr	r2, [pc, #92]	; (8008938 <TIM_OC4_SetConfig+0xc0>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00b      	beq.n	80088f8 <TIM_OC4_SetConfig+0x80>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a16      	ldr	r2, [pc, #88]	; (800893c <TIM_OC4_SetConfig+0xc4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d007      	beq.n	80088f8 <TIM_OC4_SetConfig+0x80>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a15      	ldr	r2, [pc, #84]	; (8008940 <TIM_OC4_SetConfig+0xc8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d003      	beq.n	80088f8 <TIM_OC4_SetConfig+0x80>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a14      	ldr	r2, [pc, #80]	; (8008944 <TIM_OC4_SetConfig+0xcc>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d109      	bne.n	800890c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	019b      	lsls	r3, r3, #6
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	40010000 	.word	0x40010000
 8008938:	40010400 	.word	0x40010400
 800893c:	40014000 	.word	0x40014000
 8008940:	40014400 	.word	0x40014400
 8008944:	40014800 	.word	0x40014800

08008948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	041b      	lsls	r3, r3, #16
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	4313      	orrs	r3, r2
 8008994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <TIM_OC5_SetConfig+0xb0>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00f      	beq.n	80089be <TIM_OC5_SetConfig+0x76>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a16      	ldr	r2, [pc, #88]	; (80089fc <TIM_OC5_SetConfig+0xb4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00b      	beq.n	80089be <TIM_OC5_SetConfig+0x76>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a15      	ldr	r2, [pc, #84]	; (8008a00 <TIM_OC5_SetConfig+0xb8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d007      	beq.n	80089be <TIM_OC5_SetConfig+0x76>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a14      	ldr	r2, [pc, #80]	; (8008a04 <TIM_OC5_SetConfig+0xbc>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d003      	beq.n	80089be <TIM_OC5_SetConfig+0x76>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a13      	ldr	r2, [pc, #76]	; (8008a08 <TIM_OC5_SetConfig+0xc0>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d109      	bne.n	80089d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	021b      	lsls	r3, r3, #8
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	621a      	str	r2, [r3, #32]
}
 80089ec:	bf00      	nop
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	40010000 	.word	0x40010000
 80089fc:	40010400 	.word	0x40010400
 8008a00:	40014000 	.word	0x40014000
 8008a04:	40014400 	.word	0x40014400
 8008a08:	40014800 	.word	0x40014800

08008a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	051b      	lsls	r3, r3, #20
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a18      	ldr	r2, [pc, #96]	; (8008ac0 <TIM_OC6_SetConfig+0xb4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d00f      	beq.n	8008a84 <TIM_OC6_SetConfig+0x78>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a17      	ldr	r2, [pc, #92]	; (8008ac4 <TIM_OC6_SetConfig+0xb8>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00b      	beq.n	8008a84 <TIM_OC6_SetConfig+0x78>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a16      	ldr	r2, [pc, #88]	; (8008ac8 <TIM_OC6_SetConfig+0xbc>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d007      	beq.n	8008a84 <TIM_OC6_SetConfig+0x78>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a15      	ldr	r2, [pc, #84]	; (8008acc <TIM_OC6_SetConfig+0xc0>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <TIM_OC6_SetConfig+0x78>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a14      	ldr	r2, [pc, #80]	; (8008ad0 <TIM_OC6_SetConfig+0xc4>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d109      	bne.n	8008a98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	029b      	lsls	r3, r3, #10
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	621a      	str	r2, [r3, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	40010000 	.word	0x40010000
 8008ac4:	40010400 	.word	0x40010400
 8008ac8:	40014000 	.word	0x40014000
 8008acc:	40014400 	.word	0x40014400
 8008ad0:	40014800 	.word	0x40014800

08008ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e068      	b.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a2e      	ldr	r2, [pc, #184]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d004      	beq.n	8008b20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a2d      	ldr	r2, [pc, #180]	; (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d108      	bne.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a1e      	ldr	r2, [pc, #120]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d01d      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5e:	d018      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1b      	ldr	r2, [pc, #108]	; (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d013      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1a      	ldr	r2, [pc, #104]	; (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00e      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d009      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a13      	ldr	r2, [pc, #76]	; (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d004      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a14      	ldr	r2, [pc, #80]	; (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d10c      	bne.n	8008bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40010000 	.word	0x40010000
 8008bd0:	40010400 	.word	0x40010400
 8008bd4:	40000400 	.word	0x40000400
 8008bd8:	40000800 	.word	0x40000800
 8008bdc:	40000c00 	.word	0x40000c00
 8008be0:	40001800 	.word	0x40001800

08008be4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e065      	b.n	8008ccc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	041b      	lsls	r3, r3, #16
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a16      	ldr	r2, [pc, #88]	; (8008cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d004      	beq.n	8008c8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a14      	ldr	r2, [pc, #80]	; (8008cdc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d115      	bne.n	8008cba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	051b      	lsls	r3, r3, #20
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	40010000 	.word	0x40010000
 8008cdc:	40010400 	.word	0x40010400

08008ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e042      	b.n	8008d78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7f8 fdc5 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2224      	movs	r2, #36	; 0x24
 8008d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f82c 	bl	8008d80 <UART_SetConfig>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d101      	bne.n	8008d32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e022      	b.n	8008d78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fd80 	bl	8009840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fe07 	bl	8009984 <UART_CheckIdleState>
 8008d76:	4603      	mov	r3, r0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d80:	b5b0      	push	{r4, r5, r7, lr}
 8008d82:	b08e      	sub	sp, #56	; 0x38
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	431a      	orrs	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	4bbf      	ldr	r3, [pc, #764]	; (80090ac <UART_SetConfig+0x32c>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6812      	ldr	r2, [r2, #0]
 8008db4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008db6:	430b      	orrs	r3, r1
 8008db8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4ab5      	ldr	r2, [pc, #724]	; (80090b0 <UART_SetConfig+0x330>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d004      	beq.n	8008dea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008de6:	4313      	orrs	r3, r2
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	4bb0      	ldr	r3, [pc, #704]	; (80090b4 <UART_SetConfig+0x334>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	f023 010f 	bic.w	r1, r3, #15
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4aa7      	ldr	r2, [pc, #668]	; (80090b8 <UART_SetConfig+0x338>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d176      	bne.n	8008f0c <UART_SetConfig+0x18c>
 8008e1e:	4ba7      	ldr	r3, [pc, #668]	; (80090bc <UART_SetConfig+0x33c>)
 8008e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e26:	2b28      	cmp	r3, #40	; 0x28
 8008e28:	d86c      	bhi.n	8008f04 <UART_SetConfig+0x184>
 8008e2a:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <UART_SetConfig+0xb0>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008ed5 	.word	0x08008ed5
 8008e34:	08008f05 	.word	0x08008f05
 8008e38:	08008f05 	.word	0x08008f05
 8008e3c:	08008f05 	.word	0x08008f05
 8008e40:	08008f05 	.word	0x08008f05
 8008e44:	08008f05 	.word	0x08008f05
 8008e48:	08008f05 	.word	0x08008f05
 8008e4c:	08008f05 	.word	0x08008f05
 8008e50:	08008edd 	.word	0x08008edd
 8008e54:	08008f05 	.word	0x08008f05
 8008e58:	08008f05 	.word	0x08008f05
 8008e5c:	08008f05 	.word	0x08008f05
 8008e60:	08008f05 	.word	0x08008f05
 8008e64:	08008f05 	.word	0x08008f05
 8008e68:	08008f05 	.word	0x08008f05
 8008e6c:	08008f05 	.word	0x08008f05
 8008e70:	08008ee5 	.word	0x08008ee5
 8008e74:	08008f05 	.word	0x08008f05
 8008e78:	08008f05 	.word	0x08008f05
 8008e7c:	08008f05 	.word	0x08008f05
 8008e80:	08008f05 	.word	0x08008f05
 8008e84:	08008f05 	.word	0x08008f05
 8008e88:	08008f05 	.word	0x08008f05
 8008e8c:	08008f05 	.word	0x08008f05
 8008e90:	08008eed 	.word	0x08008eed
 8008e94:	08008f05 	.word	0x08008f05
 8008e98:	08008f05 	.word	0x08008f05
 8008e9c:	08008f05 	.word	0x08008f05
 8008ea0:	08008f05 	.word	0x08008f05
 8008ea4:	08008f05 	.word	0x08008f05
 8008ea8:	08008f05 	.word	0x08008f05
 8008eac:	08008f05 	.word	0x08008f05
 8008eb0:	08008ef5 	.word	0x08008ef5
 8008eb4:	08008f05 	.word	0x08008f05
 8008eb8:	08008f05 	.word	0x08008f05
 8008ebc:	08008f05 	.word	0x08008f05
 8008ec0:	08008f05 	.word	0x08008f05
 8008ec4:	08008f05 	.word	0x08008f05
 8008ec8:	08008f05 	.word	0x08008f05
 8008ecc:	08008f05 	.word	0x08008f05
 8008ed0:	08008efd 	.word	0x08008efd
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eda:	e222      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008edc:	2304      	movs	r3, #4
 8008ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee2:	e21e      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eea:	e21a      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008eec:	2310      	movs	r3, #16
 8008eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ef2:	e216      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008ef4:	2320      	movs	r3, #32
 8008ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008efa:	e212      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f02:	e20e      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f0a:	e20a      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a6b      	ldr	r2, [pc, #428]	; (80090c0 <UART_SetConfig+0x340>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d130      	bne.n	8008f78 <UART_SetConfig+0x1f8>
 8008f16:	4b69      	ldr	r3, [pc, #420]	; (80090bc <UART_SetConfig+0x33c>)
 8008f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d826      	bhi.n	8008f70 <UART_SetConfig+0x1f0>
 8008f22:	a201      	add	r2, pc, #4	; (adr r2, 8008f28 <UART_SetConfig+0x1a8>)
 8008f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f28:	08008f41 	.word	0x08008f41
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	08008f51 	.word	0x08008f51
 8008f34:	08008f59 	.word	0x08008f59
 8008f38:	08008f61 	.word	0x08008f61
 8008f3c:	08008f69 	.word	0x08008f69
 8008f40:	2300      	movs	r3, #0
 8008f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f46:	e1ec      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4e:	e1e8      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f50:	2308      	movs	r3, #8
 8008f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f56:	e1e4      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5e:	e1e0      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f60:	2320      	movs	r3, #32
 8008f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f66:	e1dc      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f68:	2340      	movs	r3, #64	; 0x40
 8008f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6e:	e1d8      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f70:	2380      	movs	r3, #128	; 0x80
 8008f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f76:	e1d4      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a51      	ldr	r2, [pc, #324]	; (80090c4 <UART_SetConfig+0x344>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d130      	bne.n	8008fe4 <UART_SetConfig+0x264>
 8008f82:	4b4e      	ldr	r3, [pc, #312]	; (80090bc <UART_SetConfig+0x33c>)
 8008f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b05      	cmp	r3, #5
 8008f8c:	d826      	bhi.n	8008fdc <UART_SetConfig+0x25c>
 8008f8e:	a201      	add	r2, pc, #4	; (adr r2, 8008f94 <UART_SetConfig+0x214>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fad 	.word	0x08008fad
 8008f98:	08008fb5 	.word	0x08008fb5
 8008f9c:	08008fbd 	.word	0x08008fbd
 8008fa0:	08008fc5 	.word	0x08008fc5
 8008fa4:	08008fcd 	.word	0x08008fcd
 8008fa8:	08008fd5 	.word	0x08008fd5
 8008fac:	2300      	movs	r3, #0
 8008fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb2:	e1b6      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008fb4:	2304      	movs	r3, #4
 8008fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fba:	e1b2      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008fbc:	2308      	movs	r3, #8
 8008fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc2:	e1ae      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fca:	e1aa      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008fcc:	2320      	movs	r3, #32
 8008fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd2:	e1a6      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008fd4:	2340      	movs	r3, #64	; 0x40
 8008fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fda:	e1a2      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008fdc:	2380      	movs	r3, #128	; 0x80
 8008fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe2:	e19e      	b.n	8009322 <UART_SetConfig+0x5a2>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a37      	ldr	r2, [pc, #220]	; (80090c8 <UART_SetConfig+0x348>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d130      	bne.n	8009050 <UART_SetConfig+0x2d0>
 8008fee:	4b33      	ldr	r3, [pc, #204]	; (80090bc <UART_SetConfig+0x33c>)
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b05      	cmp	r3, #5
 8008ff8:	d826      	bhi.n	8009048 <UART_SetConfig+0x2c8>
 8008ffa:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <UART_SetConfig+0x280>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009019 	.word	0x08009019
 8009004:	08009021 	.word	0x08009021
 8009008:	08009029 	.word	0x08009029
 800900c:	08009031 	.word	0x08009031
 8009010:	08009039 	.word	0x08009039
 8009014:	08009041 	.word	0x08009041
 8009018:	2300      	movs	r3, #0
 800901a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901e:	e180      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009020:	2304      	movs	r3, #4
 8009022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009026:	e17c      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009028:	2308      	movs	r3, #8
 800902a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902e:	e178      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009030:	2310      	movs	r3, #16
 8009032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009036:	e174      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009038:	2320      	movs	r3, #32
 800903a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903e:	e170      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009040:	2340      	movs	r3, #64	; 0x40
 8009042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009046:	e16c      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009048:	2380      	movs	r3, #128	; 0x80
 800904a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904e:	e168      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a1d      	ldr	r2, [pc, #116]	; (80090cc <UART_SetConfig+0x34c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d142      	bne.n	80090e0 <UART_SetConfig+0x360>
 800905a:	4b18      	ldr	r3, [pc, #96]	; (80090bc <UART_SetConfig+0x33c>)
 800905c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	2b05      	cmp	r3, #5
 8009064:	d838      	bhi.n	80090d8 <UART_SetConfig+0x358>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <UART_SetConfig+0x2ec>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	08009085 	.word	0x08009085
 8009070:	0800908d 	.word	0x0800908d
 8009074:	08009095 	.word	0x08009095
 8009078:	0800909d 	.word	0x0800909d
 800907c:	080090a5 	.word	0x080090a5
 8009080:	080090d1 	.word	0x080090d1
 8009084:	2300      	movs	r3, #0
 8009086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908a:	e14a      	b.n	8009322 <UART_SetConfig+0x5a2>
 800908c:	2304      	movs	r3, #4
 800908e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009092:	e146      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009094:	2308      	movs	r3, #8
 8009096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909a:	e142      	b.n	8009322 <UART_SetConfig+0x5a2>
 800909c:	2310      	movs	r3, #16
 800909e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a2:	e13e      	b.n	8009322 <UART_SetConfig+0x5a2>
 80090a4:	2320      	movs	r3, #32
 80090a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090aa:	e13a      	b.n	8009322 <UART_SetConfig+0x5a2>
 80090ac:	cfff69f3 	.word	0xcfff69f3
 80090b0:	58000c00 	.word	0x58000c00
 80090b4:	11fff4ff 	.word	0x11fff4ff
 80090b8:	40011000 	.word	0x40011000
 80090bc:	58024400 	.word	0x58024400
 80090c0:	40004400 	.word	0x40004400
 80090c4:	40004800 	.word	0x40004800
 80090c8:	40004c00 	.word	0x40004c00
 80090cc:	40005000 	.word	0x40005000
 80090d0:	2340      	movs	r3, #64	; 0x40
 80090d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090d6:	e124      	b.n	8009322 <UART_SetConfig+0x5a2>
 80090d8:	2380      	movs	r3, #128	; 0x80
 80090da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090de:	e120      	b.n	8009322 <UART_SetConfig+0x5a2>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4acc      	ldr	r2, [pc, #816]	; (8009418 <UART_SetConfig+0x698>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d176      	bne.n	80091d8 <UART_SetConfig+0x458>
 80090ea:	4bcc      	ldr	r3, [pc, #816]	; (800941c <UART_SetConfig+0x69c>)
 80090ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090f2:	2b28      	cmp	r3, #40	; 0x28
 80090f4:	d86c      	bhi.n	80091d0 <UART_SetConfig+0x450>
 80090f6:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <UART_SetConfig+0x37c>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	080091a1 	.word	0x080091a1
 8009100:	080091d1 	.word	0x080091d1
 8009104:	080091d1 	.word	0x080091d1
 8009108:	080091d1 	.word	0x080091d1
 800910c:	080091d1 	.word	0x080091d1
 8009110:	080091d1 	.word	0x080091d1
 8009114:	080091d1 	.word	0x080091d1
 8009118:	080091d1 	.word	0x080091d1
 800911c:	080091a9 	.word	0x080091a9
 8009120:	080091d1 	.word	0x080091d1
 8009124:	080091d1 	.word	0x080091d1
 8009128:	080091d1 	.word	0x080091d1
 800912c:	080091d1 	.word	0x080091d1
 8009130:	080091d1 	.word	0x080091d1
 8009134:	080091d1 	.word	0x080091d1
 8009138:	080091d1 	.word	0x080091d1
 800913c:	080091b1 	.word	0x080091b1
 8009140:	080091d1 	.word	0x080091d1
 8009144:	080091d1 	.word	0x080091d1
 8009148:	080091d1 	.word	0x080091d1
 800914c:	080091d1 	.word	0x080091d1
 8009150:	080091d1 	.word	0x080091d1
 8009154:	080091d1 	.word	0x080091d1
 8009158:	080091d1 	.word	0x080091d1
 800915c:	080091b9 	.word	0x080091b9
 8009160:	080091d1 	.word	0x080091d1
 8009164:	080091d1 	.word	0x080091d1
 8009168:	080091d1 	.word	0x080091d1
 800916c:	080091d1 	.word	0x080091d1
 8009170:	080091d1 	.word	0x080091d1
 8009174:	080091d1 	.word	0x080091d1
 8009178:	080091d1 	.word	0x080091d1
 800917c:	080091c1 	.word	0x080091c1
 8009180:	080091d1 	.word	0x080091d1
 8009184:	080091d1 	.word	0x080091d1
 8009188:	080091d1 	.word	0x080091d1
 800918c:	080091d1 	.word	0x080091d1
 8009190:	080091d1 	.word	0x080091d1
 8009194:	080091d1 	.word	0x080091d1
 8009198:	080091d1 	.word	0x080091d1
 800919c:	080091c9 	.word	0x080091c9
 80091a0:	2301      	movs	r3, #1
 80091a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a6:	e0bc      	b.n	8009322 <UART_SetConfig+0x5a2>
 80091a8:	2304      	movs	r3, #4
 80091aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ae:	e0b8      	b.n	8009322 <UART_SetConfig+0x5a2>
 80091b0:	2308      	movs	r3, #8
 80091b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b6:	e0b4      	b.n	8009322 <UART_SetConfig+0x5a2>
 80091b8:	2310      	movs	r3, #16
 80091ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091be:	e0b0      	b.n	8009322 <UART_SetConfig+0x5a2>
 80091c0:	2320      	movs	r3, #32
 80091c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c6:	e0ac      	b.n	8009322 <UART_SetConfig+0x5a2>
 80091c8:	2340      	movs	r3, #64	; 0x40
 80091ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ce:	e0a8      	b.n	8009322 <UART_SetConfig+0x5a2>
 80091d0:	2380      	movs	r3, #128	; 0x80
 80091d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d6:	e0a4      	b.n	8009322 <UART_SetConfig+0x5a2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a90      	ldr	r2, [pc, #576]	; (8009420 <UART_SetConfig+0x6a0>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d130      	bne.n	8009244 <UART_SetConfig+0x4c4>
 80091e2:	4b8e      	ldr	r3, [pc, #568]	; (800941c <UART_SetConfig+0x69c>)
 80091e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d826      	bhi.n	800923c <UART_SetConfig+0x4bc>
 80091ee:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <UART_SetConfig+0x474>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	0800920d 	.word	0x0800920d
 80091f8:	08009215 	.word	0x08009215
 80091fc:	0800921d 	.word	0x0800921d
 8009200:	08009225 	.word	0x08009225
 8009204:	0800922d 	.word	0x0800922d
 8009208:	08009235 	.word	0x08009235
 800920c:	2300      	movs	r3, #0
 800920e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009212:	e086      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009214:	2304      	movs	r3, #4
 8009216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800921a:	e082      	b.n	8009322 <UART_SetConfig+0x5a2>
 800921c:	2308      	movs	r3, #8
 800921e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009222:	e07e      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009224:	2310      	movs	r3, #16
 8009226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922a:	e07a      	b.n	8009322 <UART_SetConfig+0x5a2>
 800922c:	2320      	movs	r3, #32
 800922e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009232:	e076      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e072      	b.n	8009322 <UART_SetConfig+0x5a2>
 800923c:	2380      	movs	r3, #128	; 0x80
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	e06e      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a76      	ldr	r2, [pc, #472]	; (8009424 <UART_SetConfig+0x6a4>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d130      	bne.n	80092b0 <UART_SetConfig+0x530>
 800924e:	4b73      	ldr	r3, [pc, #460]	; (800941c <UART_SetConfig+0x69c>)
 8009250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	2b05      	cmp	r3, #5
 8009258:	d826      	bhi.n	80092a8 <UART_SetConfig+0x528>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <UART_SetConfig+0x4e0>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	08009279 	.word	0x08009279
 8009264:	08009281 	.word	0x08009281
 8009268:	08009289 	.word	0x08009289
 800926c:	08009291 	.word	0x08009291
 8009270:	08009299 	.word	0x08009299
 8009274:	080092a1 	.word	0x080092a1
 8009278:	2300      	movs	r3, #0
 800927a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800927e:	e050      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009280:	2304      	movs	r3, #4
 8009282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009286:	e04c      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009288:	2308      	movs	r3, #8
 800928a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928e:	e048      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009290:	2310      	movs	r3, #16
 8009292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009296:	e044      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009298:	2320      	movs	r3, #32
 800929a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929e:	e040      	b.n	8009322 <UART_SetConfig+0x5a2>
 80092a0:	2340      	movs	r3, #64	; 0x40
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a6:	e03c      	b.n	8009322 <UART_SetConfig+0x5a2>
 80092a8:	2380      	movs	r3, #128	; 0x80
 80092aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ae:	e038      	b.n	8009322 <UART_SetConfig+0x5a2>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a5c      	ldr	r2, [pc, #368]	; (8009428 <UART_SetConfig+0x6a8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d130      	bne.n	800931c <UART_SetConfig+0x59c>
 80092ba:	4b58      	ldr	r3, [pc, #352]	; (800941c <UART_SetConfig+0x69c>)
 80092bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092be:	f003 0307 	and.w	r3, r3, #7
 80092c2:	2b05      	cmp	r3, #5
 80092c4:	d826      	bhi.n	8009314 <UART_SetConfig+0x594>
 80092c6:	a201      	add	r2, pc, #4	; (adr r2, 80092cc <UART_SetConfig+0x54c>)
 80092c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092cc:	080092e5 	.word	0x080092e5
 80092d0:	080092ed 	.word	0x080092ed
 80092d4:	080092f5 	.word	0x080092f5
 80092d8:	080092fd 	.word	0x080092fd
 80092dc:	08009305 	.word	0x08009305
 80092e0:	0800930d 	.word	0x0800930d
 80092e4:	2302      	movs	r3, #2
 80092e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ea:	e01a      	b.n	8009322 <UART_SetConfig+0x5a2>
 80092ec:	2304      	movs	r3, #4
 80092ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f2:	e016      	b.n	8009322 <UART_SetConfig+0x5a2>
 80092f4:	2308      	movs	r3, #8
 80092f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fa:	e012      	b.n	8009322 <UART_SetConfig+0x5a2>
 80092fc:	2310      	movs	r3, #16
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e00e      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009304:	2320      	movs	r3, #32
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e00a      	b.n	8009322 <UART_SetConfig+0x5a2>
 800930c:	2340      	movs	r3, #64	; 0x40
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e006      	b.n	8009322 <UART_SetConfig+0x5a2>
 8009314:	2380      	movs	r3, #128	; 0x80
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e002      	b.n	8009322 <UART_SetConfig+0x5a2>
 800931c:	2380      	movs	r3, #128	; 0x80
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a40      	ldr	r2, [pc, #256]	; (8009428 <UART_SetConfig+0x6a8>)
 8009328:	4293      	cmp	r3, r2
 800932a:	f040 80ef 	bne.w	800950c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800932e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009332:	2b20      	cmp	r3, #32
 8009334:	dc46      	bgt.n	80093c4 <UART_SetConfig+0x644>
 8009336:	2b02      	cmp	r3, #2
 8009338:	f2c0 8081 	blt.w	800943e <UART_SetConfig+0x6be>
 800933c:	3b02      	subs	r3, #2
 800933e:	2b1e      	cmp	r3, #30
 8009340:	d87d      	bhi.n	800943e <UART_SetConfig+0x6be>
 8009342:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <UART_SetConfig+0x5c8>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	080093cb 	.word	0x080093cb
 800934c:	0800943f 	.word	0x0800943f
 8009350:	080093d3 	.word	0x080093d3
 8009354:	0800943f 	.word	0x0800943f
 8009358:	0800943f 	.word	0x0800943f
 800935c:	0800943f 	.word	0x0800943f
 8009360:	080093e3 	.word	0x080093e3
 8009364:	0800943f 	.word	0x0800943f
 8009368:	0800943f 	.word	0x0800943f
 800936c:	0800943f 	.word	0x0800943f
 8009370:	0800943f 	.word	0x0800943f
 8009374:	0800943f 	.word	0x0800943f
 8009378:	0800943f 	.word	0x0800943f
 800937c:	0800943f 	.word	0x0800943f
 8009380:	080093f3 	.word	0x080093f3
 8009384:	0800943f 	.word	0x0800943f
 8009388:	0800943f 	.word	0x0800943f
 800938c:	0800943f 	.word	0x0800943f
 8009390:	0800943f 	.word	0x0800943f
 8009394:	0800943f 	.word	0x0800943f
 8009398:	0800943f 	.word	0x0800943f
 800939c:	0800943f 	.word	0x0800943f
 80093a0:	0800943f 	.word	0x0800943f
 80093a4:	0800943f 	.word	0x0800943f
 80093a8:	0800943f 	.word	0x0800943f
 80093ac:	0800943f 	.word	0x0800943f
 80093b0:	0800943f 	.word	0x0800943f
 80093b4:	0800943f 	.word	0x0800943f
 80093b8:	0800943f 	.word	0x0800943f
 80093bc:	0800943f 	.word	0x0800943f
 80093c0:	08009431 	.word	0x08009431
 80093c4:	2b40      	cmp	r3, #64	; 0x40
 80093c6:	d036      	beq.n	8009436 <UART_SetConfig+0x6b6>
 80093c8:	e039      	b.n	800943e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093ca:	f7fd ff17 	bl	80071fc <HAL_RCCEx_GetD3PCLK1Freq>
 80093ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093d0:	e03b      	b.n	800944a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093d2:	f107 0314 	add.w	r3, r7, #20
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fd ff26 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093e0:	e033      	b.n	800944a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e2:	f107 0308 	add.w	r3, r7, #8
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe f872 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093f0:	e02b      	b.n	800944a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093f2:	4b0a      	ldr	r3, [pc, #40]	; (800941c <UART_SetConfig+0x69c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d009      	beq.n	8009412 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093fe:	4b07      	ldr	r3, [pc, #28]	; (800941c <UART_SetConfig+0x69c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	08db      	lsrs	r3, r3, #3
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	4a08      	ldr	r2, [pc, #32]	; (800942c <UART_SetConfig+0x6ac>)
 800940a:	fa22 f303 	lsr.w	r3, r2, r3
 800940e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009410:	e01b      	b.n	800944a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009412:	4b06      	ldr	r3, [pc, #24]	; (800942c <UART_SetConfig+0x6ac>)
 8009414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009416:	e018      	b.n	800944a <UART_SetConfig+0x6ca>
 8009418:	40011400 	.word	0x40011400
 800941c:	58024400 	.word	0x58024400
 8009420:	40007800 	.word	0x40007800
 8009424:	40007c00 	.word	0x40007c00
 8009428:	58000c00 	.word	0x58000c00
 800942c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009430:	4bc4      	ldr	r3, [pc, #784]	; (8009744 <UART_SetConfig+0x9c4>)
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009434:	e009      	b.n	800944a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800943c:	e005      	b.n	800944a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800944a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 81da 	beq.w	8009806 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	4abc      	ldr	r2, [pc, #752]	; (8009748 <UART_SetConfig+0x9c8>)
 8009458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800945c:	461a      	mov	r2, r3
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	fbb3 f3f2 	udiv	r3, r3, r2
 8009464:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	4413      	add	r3, r2
 8009470:	6a3a      	ldr	r2, [r7, #32]
 8009472:	429a      	cmp	r2, r3
 8009474:	d305      	bcc.n	8009482 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800947c:	6a3a      	ldr	r2, [r7, #32]
 800947e:	429a      	cmp	r2, r3
 8009480:	d903      	bls.n	800948a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009488:	e1bd      	b.n	8009806 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	4618      	mov	r0, r3
 800948e:	f04f 0100 	mov.w	r1, #0
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	4aac      	ldr	r2, [pc, #688]	; (8009748 <UART_SetConfig+0x9c8>)
 8009498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800949c:	b29a      	uxth	r2, r3
 800949e:	f04f 0300 	mov.w	r3, #0
 80094a2:	f7f6 ff19 	bl	80002d8 <__aeabi_uldivmod>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4610      	mov	r0, r2
 80094ac:	4619      	mov	r1, r3
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	f04f 0300 	mov.w	r3, #0
 80094b6:	020b      	lsls	r3, r1, #8
 80094b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094bc:	0202      	lsls	r2, r0, #8
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	6849      	ldr	r1, [r1, #4]
 80094c2:	0849      	lsrs	r1, r1, #1
 80094c4:	4608      	mov	r0, r1
 80094c6:	f04f 0100 	mov.w	r1, #0
 80094ca:	1814      	adds	r4, r2, r0
 80094cc:	eb43 0501 	adc.w	r5, r3, r1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	461a      	mov	r2, r3
 80094d6:	f04f 0300 	mov.w	r3, #0
 80094da:	4620      	mov	r0, r4
 80094dc:	4629      	mov	r1, r5
 80094de:	f7f6 fefb 	bl	80002d8 <__aeabi_uldivmod>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4613      	mov	r3, r2
 80094e8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094f0:	d308      	bcc.n	8009504 <UART_SetConfig+0x784>
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094f8:	d204      	bcs.n	8009504 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009500:	60da      	str	r2, [r3, #12]
 8009502:	e180      	b.n	8009806 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800950a:	e17c      	b.n	8009806 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009514:	f040 80bf 	bne.w	8009696 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009518:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800951c:	2b20      	cmp	r3, #32
 800951e:	dc49      	bgt.n	80095b4 <UART_SetConfig+0x834>
 8009520:	2b00      	cmp	r3, #0
 8009522:	db7c      	blt.n	800961e <UART_SetConfig+0x89e>
 8009524:	2b20      	cmp	r3, #32
 8009526:	d87a      	bhi.n	800961e <UART_SetConfig+0x89e>
 8009528:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <UART_SetConfig+0x7b0>)
 800952a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952e:	bf00      	nop
 8009530:	080095bb 	.word	0x080095bb
 8009534:	080095c3 	.word	0x080095c3
 8009538:	0800961f 	.word	0x0800961f
 800953c:	0800961f 	.word	0x0800961f
 8009540:	080095cb 	.word	0x080095cb
 8009544:	0800961f 	.word	0x0800961f
 8009548:	0800961f 	.word	0x0800961f
 800954c:	0800961f 	.word	0x0800961f
 8009550:	080095db 	.word	0x080095db
 8009554:	0800961f 	.word	0x0800961f
 8009558:	0800961f 	.word	0x0800961f
 800955c:	0800961f 	.word	0x0800961f
 8009560:	0800961f 	.word	0x0800961f
 8009564:	0800961f 	.word	0x0800961f
 8009568:	0800961f 	.word	0x0800961f
 800956c:	0800961f 	.word	0x0800961f
 8009570:	080095eb 	.word	0x080095eb
 8009574:	0800961f 	.word	0x0800961f
 8009578:	0800961f 	.word	0x0800961f
 800957c:	0800961f 	.word	0x0800961f
 8009580:	0800961f 	.word	0x0800961f
 8009584:	0800961f 	.word	0x0800961f
 8009588:	0800961f 	.word	0x0800961f
 800958c:	0800961f 	.word	0x0800961f
 8009590:	0800961f 	.word	0x0800961f
 8009594:	0800961f 	.word	0x0800961f
 8009598:	0800961f 	.word	0x0800961f
 800959c:	0800961f 	.word	0x0800961f
 80095a0:	0800961f 	.word	0x0800961f
 80095a4:	0800961f 	.word	0x0800961f
 80095a8:	0800961f 	.word	0x0800961f
 80095ac:	0800961f 	.word	0x0800961f
 80095b0:	08009611 	.word	0x08009611
 80095b4:	2b40      	cmp	r3, #64	; 0x40
 80095b6:	d02e      	beq.n	8009616 <UART_SetConfig+0x896>
 80095b8:	e031      	b.n	800961e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095ba:	f7fc f9e1 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 80095be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80095c0:	e033      	b.n	800962a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095c2:	f7fc f9f3 	bl	80059ac <HAL_RCC_GetPCLK2Freq>
 80095c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80095c8:	e02f      	b.n	800962a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ca:	f107 0314 	add.w	r3, r7, #20
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd fe2a 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095d8:	e027      	b.n	800962a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095da:	f107 0308 	add.w	r3, r7, #8
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd ff76 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095e8:	e01f      	b.n	800962a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ea:	4b58      	ldr	r3, [pc, #352]	; (800974c <UART_SetConfig+0x9cc>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f6:	4b55      	ldr	r3, [pc, #340]	; (800974c <UART_SetConfig+0x9cc>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	08db      	lsrs	r3, r3, #3
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	4a53      	ldr	r2, [pc, #332]	; (8009750 <UART_SetConfig+0x9d0>)
 8009602:	fa22 f303 	lsr.w	r3, r2, r3
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009608:	e00f      	b.n	800962a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800960a:	4b51      	ldr	r3, [pc, #324]	; (8009750 <UART_SetConfig+0x9d0>)
 800960c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800960e:	e00c      	b.n	800962a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009610:	4b4c      	ldr	r3, [pc, #304]	; (8009744 <UART_SetConfig+0x9c4>)
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009614:	e009      	b.n	800962a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800961a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800961c:	e005      	b.n	800962a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80ea 	beq.w	8009806 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	4a44      	ldr	r2, [pc, #272]	; (8009748 <UART_SetConfig+0x9c8>)
 8009638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800963c:	461a      	mov	r2, r3
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	fbb3 f3f2 	udiv	r3, r3, r2
 8009644:	005a      	lsls	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	085b      	lsrs	r3, r3, #1
 800964c:	441a      	add	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	fbb2 f3f3 	udiv	r3, r2, r3
 8009656:	b29b      	uxth	r3, r3
 8009658:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	2b0f      	cmp	r3, #15
 800965e:	d916      	bls.n	800968e <UART_SetConfig+0x90e>
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009666:	d212      	bcs.n	800968e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	b29b      	uxth	r3, r3
 800966c:	f023 030f 	bic.w	r3, r3, #15
 8009670:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	085b      	lsrs	r3, r3, #1
 8009676:	b29b      	uxth	r3, r3
 8009678:	f003 0307 	and.w	r3, r3, #7
 800967c:	b29a      	uxth	r2, r3
 800967e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009680:	4313      	orrs	r3, r2
 8009682:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800968a:	60da      	str	r2, [r3, #12]
 800968c:	e0bb      	b.n	8009806 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009694:	e0b7      	b.n	8009806 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009696:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800969a:	2b20      	cmp	r3, #32
 800969c:	dc4a      	bgt.n	8009734 <UART_SetConfig+0x9b4>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f2c0 8086 	blt.w	80097b0 <UART_SetConfig+0xa30>
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	f200 8083 	bhi.w	80097b0 <UART_SetConfig+0xa30>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <UART_SetConfig+0x930>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	0800973b 	.word	0x0800973b
 80096b4:	08009755 	.word	0x08009755
 80096b8:	080097b1 	.word	0x080097b1
 80096bc:	080097b1 	.word	0x080097b1
 80096c0:	0800975d 	.word	0x0800975d
 80096c4:	080097b1 	.word	0x080097b1
 80096c8:	080097b1 	.word	0x080097b1
 80096cc:	080097b1 	.word	0x080097b1
 80096d0:	0800976d 	.word	0x0800976d
 80096d4:	080097b1 	.word	0x080097b1
 80096d8:	080097b1 	.word	0x080097b1
 80096dc:	080097b1 	.word	0x080097b1
 80096e0:	080097b1 	.word	0x080097b1
 80096e4:	080097b1 	.word	0x080097b1
 80096e8:	080097b1 	.word	0x080097b1
 80096ec:	080097b1 	.word	0x080097b1
 80096f0:	0800977d 	.word	0x0800977d
 80096f4:	080097b1 	.word	0x080097b1
 80096f8:	080097b1 	.word	0x080097b1
 80096fc:	080097b1 	.word	0x080097b1
 8009700:	080097b1 	.word	0x080097b1
 8009704:	080097b1 	.word	0x080097b1
 8009708:	080097b1 	.word	0x080097b1
 800970c:	080097b1 	.word	0x080097b1
 8009710:	080097b1 	.word	0x080097b1
 8009714:	080097b1 	.word	0x080097b1
 8009718:	080097b1 	.word	0x080097b1
 800971c:	080097b1 	.word	0x080097b1
 8009720:	080097b1 	.word	0x080097b1
 8009724:	080097b1 	.word	0x080097b1
 8009728:	080097b1 	.word	0x080097b1
 800972c:	080097b1 	.word	0x080097b1
 8009730:	080097a3 	.word	0x080097a3
 8009734:	2b40      	cmp	r3, #64	; 0x40
 8009736:	d037      	beq.n	80097a8 <UART_SetConfig+0xa28>
 8009738:	e03a      	b.n	80097b0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800973a:	f7fc f921 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 800973e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009740:	e03c      	b.n	80097bc <UART_SetConfig+0xa3c>
 8009742:	bf00      	nop
 8009744:	003d0900 	.word	0x003d0900
 8009748:	0800ef5c 	.word	0x0800ef5c
 800974c:	58024400 	.word	0x58024400
 8009750:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009754:	f7fc f92a 	bl	80059ac <HAL_RCC_GetPCLK2Freq>
 8009758:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800975a:	e02f      	b.n	80097bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800975c:	f107 0314 	add.w	r3, r7, #20
 8009760:	4618      	mov	r0, r3
 8009762:	f7fd fd61 	bl	8007228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800976a:	e027      	b.n	80097bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800976c:	f107 0308 	add.w	r3, r7, #8
 8009770:	4618      	mov	r0, r3
 8009772:	f7fd fead 	bl	80074d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800977a:	e01f      	b.n	80097bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800977c:	4b2c      	ldr	r3, [pc, #176]	; (8009830 <UART_SetConfig+0xab0>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d009      	beq.n	800979c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009788:	4b29      	ldr	r3, [pc, #164]	; (8009830 <UART_SetConfig+0xab0>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	08db      	lsrs	r3, r3, #3
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	4a28      	ldr	r2, [pc, #160]	; (8009834 <UART_SetConfig+0xab4>)
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800979a:	e00f      	b.n	80097bc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800979c:	4b25      	ldr	r3, [pc, #148]	; (8009834 <UART_SetConfig+0xab4>)
 800979e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097a0:	e00c      	b.n	80097bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097a2:	4b25      	ldr	r3, [pc, #148]	; (8009838 <UART_SetConfig+0xab8>)
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097a6:	e009      	b.n	80097bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ae:	e005      	b.n	80097bc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80097ba:	bf00      	nop
    }

    if (pclk != 0U)
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d021      	beq.n	8009806 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	4a1d      	ldr	r2, [pc, #116]	; (800983c <UART_SetConfig+0xabc>)
 80097c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097cc:	461a      	mov	r2, r3
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	085b      	lsrs	r3, r3, #1
 80097da:	441a      	add	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	2b0f      	cmp	r3, #15
 80097ec:	d908      	bls.n	8009800 <UART_SetConfig+0xa80>
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097f4:	d204      	bcs.n	8009800 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	e002      	b.n	8009806 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009826:	4618      	mov	r0, r3
 8009828:	3738      	adds	r7, #56	; 0x38
 800982a:	46bd      	mov	sp, r7
 800982c:	bdb0      	pop	{r4, r5, r7, pc}
 800982e:	bf00      	nop
 8009830:	58024400 	.word	0x58024400
 8009834:	03d09000 	.word	0x03d09000
 8009838:	003d0900 	.word	0x003d0900
 800983c:	0800ef5c 	.word	0x0800ef5c

08009840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00a      	beq.n	800986a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	f003 0304 	and.w	r3, r3, #4
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	f003 0308 	and.w	r3, r3, #8
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d4:	f003 0310 	and.w	r3, r3, #16
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00a      	beq.n	80098f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	430a      	orrs	r2, r1
 8009912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01a      	beq.n	8009956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	430a      	orrs	r2, r1
 8009934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800993a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800993e:	d10a      	bne.n	8009956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00a      	beq.n	8009978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	430a      	orrs	r2, r1
 8009976:	605a      	str	r2, [r3, #4]
  }
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af02      	add	r7, sp, #8
 800998a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009994:	f7f8 f92a 	bl	8001bec <HAL_GetTick>
 8009998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0308 	and.w	r3, r3, #8
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d10e      	bne.n	80099c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f82f 	bl	8009a1a <UART_WaitOnFlagUntilTimeout>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e025      	b.n	8009a12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d10e      	bne.n	80099f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f819 	bl	8009a1a <UART_WaitOnFlagUntilTimeout>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e00f      	b.n	8009a12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	603b      	str	r3, [r7, #0]
 8009a26:	4613      	mov	r3, r2
 8009a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a2a:	e062      	b.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a32:	d05e      	beq.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a34:	f7f8 f8da 	bl	8001bec <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d302      	bcc.n	8009a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d11d      	bne.n	8009a86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689a      	ldr	r2, [r3, #8]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f022 0201 	bic.w	r2, r2, #1
 8009a68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e045      	b.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d02e      	beq.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aa2:	d126      	bne.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009aac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009abc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0201 	bic.w	r2, r2, #1
 8009acc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e00f      	b.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69da      	ldr	r2, [r3, #28]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4013      	ands	r3, r2
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	bf0c      	ite	eq
 8009b02:	2301      	moveq	r3, #1
 8009b04:	2300      	movne	r3, #0
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d08d      	beq.n	8009a2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b085      	sub	sp, #20
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e027      	b.n	8009b80 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2224      	movs	r2, #36	; 0x24
 8009b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 0201 	bic.w	r2, r2, #1
 8009b56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d101      	bne.n	8009ba4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	e02d      	b.n	8009c00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2224      	movs	r2, #36	; 0x24
 8009bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 0201 	bic.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f84f 	bl	8009c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d101      	bne.n	8009c20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e02d      	b.n	8009c7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2224      	movs	r2, #36	; 0x24
 8009c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0201 	bic.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f811 	bl	8009c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d108      	bne.n	8009ca6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ca4:	e031      	b.n	8009d0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ca6:	2310      	movs	r3, #16
 8009ca8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009caa:	2310      	movs	r3, #16
 8009cac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	0e5b      	lsrs	r3, r3, #25
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	0f5b      	lsrs	r3, r3, #29
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 0307 	and.w	r3, r3, #7
 8009ccc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	7b3a      	ldrb	r2, [r7, #12]
 8009cd2:	4911      	ldr	r1, [pc, #68]	; (8009d18 <UARTEx_SetNbDataToProcess+0x94>)
 8009cd4:	5c8a      	ldrb	r2, [r1, r2]
 8009cd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cda:	7b3a      	ldrb	r2, [r7, #12]
 8009cdc:	490f      	ldr	r1, [pc, #60]	; (8009d1c <UARTEx_SetNbDataToProcess+0x98>)
 8009cde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	7b7a      	ldrb	r2, [r7, #13]
 8009cf0:	4909      	ldr	r1, [pc, #36]	; (8009d18 <UARTEx_SetNbDataToProcess+0x94>)
 8009cf2:	5c8a      	ldrb	r2, [r1, r2]
 8009cf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cf8:	7b7a      	ldrb	r2, [r7, #13]
 8009cfa:	4908      	ldr	r1, [pc, #32]	; (8009d1c <UARTEx_SetNbDataToProcess+0x98>)
 8009cfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	0800ef74 	.word	0x0800ef74
 8009d1c:	0800ef7c 	.word	0x0800ef7c

08009d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d20:	b084      	sub	sp, #16
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	f107 001c 	add.w	r0, r7, #28
 8009d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d120      	bne.n	8009d7a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68da      	ldr	r2, [r3, #12]
 8009d48:	4b2a      	ldr	r3, [pc, #168]	; (8009df4 <USB_CoreInit+0xd4>)
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d105      	bne.n	8009d6e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 fb14 	bl	800b39c <USB_CoreReset>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
 8009d78:	e01a      	b.n	8009db0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fb08 	bl	800b39c <USB_CoreReset>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	639a      	str	r2, [r3, #56]	; 0x38
 8009da2:	e005      	b.n	8009db0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d116      	bne.n	8009de4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <USB_CoreInit+0xd8>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	f043 0206 	orr.w	r2, r3, #6
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f043 0220 	orr.w	r2, r3, #32
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009df0:	b004      	add	sp, #16
 8009df2:	4770      	bx	lr
 8009df4:	ffbdffbf 	.word	0xffbdffbf
 8009df8:	03ee0000 	.word	0x03ee0000

08009dfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d165      	bne.n	8009edc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	4a41      	ldr	r2, [pc, #260]	; (8009f18 <USB_SetTurnaroundTime+0x11c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d906      	bls.n	8009e26 <USB_SetTurnaroundTime+0x2a>
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4a40      	ldr	r2, [pc, #256]	; (8009f1c <USB_SetTurnaroundTime+0x120>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d202      	bcs.n	8009e26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e20:	230f      	movs	r3, #15
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	e062      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	4a3c      	ldr	r2, [pc, #240]	; (8009f1c <USB_SetTurnaroundTime+0x120>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d306      	bcc.n	8009e3c <USB_SetTurnaroundTime+0x40>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	4a3b      	ldr	r2, [pc, #236]	; (8009f20 <USB_SetTurnaroundTime+0x124>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d202      	bcs.n	8009e3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e36:	230e      	movs	r3, #14
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	e057      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	4a38      	ldr	r2, [pc, #224]	; (8009f20 <USB_SetTurnaroundTime+0x124>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d306      	bcc.n	8009e52 <USB_SetTurnaroundTime+0x56>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	4a37      	ldr	r2, [pc, #220]	; (8009f24 <USB_SetTurnaroundTime+0x128>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d202      	bcs.n	8009e52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009e4c:	230d      	movs	r3, #13
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	e04c      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	4a33      	ldr	r2, [pc, #204]	; (8009f24 <USB_SetTurnaroundTime+0x128>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d306      	bcc.n	8009e68 <USB_SetTurnaroundTime+0x6c>
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	4a32      	ldr	r2, [pc, #200]	; (8009f28 <USB_SetTurnaroundTime+0x12c>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d802      	bhi.n	8009e68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009e62:	230c      	movs	r3, #12
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	e041      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	4a2f      	ldr	r2, [pc, #188]	; (8009f28 <USB_SetTurnaroundTime+0x12c>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d906      	bls.n	8009e7e <USB_SetTurnaroundTime+0x82>
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	4a2e      	ldr	r2, [pc, #184]	; (8009f2c <USB_SetTurnaroundTime+0x130>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d802      	bhi.n	8009e7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009e78:	230b      	movs	r3, #11
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	e036      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	4a2a      	ldr	r2, [pc, #168]	; (8009f2c <USB_SetTurnaroundTime+0x130>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d906      	bls.n	8009e94 <USB_SetTurnaroundTime+0x98>
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	4a29      	ldr	r2, [pc, #164]	; (8009f30 <USB_SetTurnaroundTime+0x134>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d802      	bhi.n	8009e94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009e8e:	230a      	movs	r3, #10
 8009e90:	617b      	str	r3, [r7, #20]
 8009e92:	e02b      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	4a26      	ldr	r2, [pc, #152]	; (8009f30 <USB_SetTurnaroundTime+0x134>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d906      	bls.n	8009eaa <USB_SetTurnaroundTime+0xae>
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	4a25      	ldr	r2, [pc, #148]	; (8009f34 <USB_SetTurnaroundTime+0x138>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d202      	bcs.n	8009eaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ea4:	2309      	movs	r3, #9
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	e020      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	4a21      	ldr	r2, [pc, #132]	; (8009f34 <USB_SetTurnaroundTime+0x138>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d306      	bcc.n	8009ec0 <USB_SetTurnaroundTime+0xc4>
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	4a20      	ldr	r2, [pc, #128]	; (8009f38 <USB_SetTurnaroundTime+0x13c>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d802      	bhi.n	8009ec0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009eba:	2308      	movs	r3, #8
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	e015      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	4a1d      	ldr	r2, [pc, #116]	; (8009f38 <USB_SetTurnaroundTime+0x13c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d906      	bls.n	8009ed6 <USB_SetTurnaroundTime+0xda>
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	4a1c      	ldr	r2, [pc, #112]	; (8009f3c <USB_SetTurnaroundTime+0x140>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d202      	bcs.n	8009ed6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009ed0:	2307      	movs	r3, #7
 8009ed2:	617b      	str	r3, [r7, #20]
 8009ed4:	e00a      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009ed6:	2306      	movs	r3, #6
 8009ed8:	617b      	str	r3, [r7, #20]
 8009eda:	e007      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d102      	bne.n	8009ee8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009ee2:	2309      	movs	r3, #9
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e001      	b.n	8009eec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009ee8:	2309      	movs	r3, #9
 8009eea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	029b      	lsls	r3, r3, #10
 8009f00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009f04:	431a      	orrs	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	00d8acbf 	.word	0x00d8acbf
 8009f1c:	00e4e1c0 	.word	0x00e4e1c0
 8009f20:	00f42400 	.word	0x00f42400
 8009f24:	01067380 	.word	0x01067380
 8009f28:	011a499f 	.word	0x011a499f
 8009f2c:	01312cff 	.word	0x01312cff
 8009f30:	014ca43f 	.word	0x014ca43f
 8009f34:	016e3600 	.word	0x016e3600
 8009f38:	01a6ab1f 	.word	0x01a6ab1f
 8009f3c:	01e84800 	.word	0x01e84800

08009f40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f043 0201 	orr.w	r2, r3, #1
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f023 0201 	bic.w	r2, r3, #1
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d106      	bne.n	8009fb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60da      	str	r2, [r3, #12]
 8009fae:	e00b      	b.n	8009fc8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d106      	bne.n	8009fc4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	60da      	str	r2, [r3, #12]
 8009fc2:	e001      	b.n	8009fc8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e003      	b.n	8009fd0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009fc8:	2032      	movs	r0, #50	; 0x32
 8009fca:	f7f7 fe1b 	bl	8001c04 <HAL_Delay>

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fd8:	b084      	sub	sp, #16
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b086      	sub	sp, #24
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	613b      	str	r3, [r7, #16]
 8009ff6:	e009      	b.n	800a00c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	3340      	adds	r3, #64	; 0x40
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	2200      	movs	r2, #0
 800a004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3301      	adds	r3, #1
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b0e      	cmp	r3, #14
 800a010:	d9f2      	bls.n	8009ff8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d11c      	bne.n	800a052 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a026:	f043 0302 	orr.w	r3, r3, #2
 800a02a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	e005      	b.n	800a05e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a056:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a064:	461a      	mov	r2, r3
 800a066:	2300      	movs	r3, #0
 800a068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a070:	4619      	mov	r1, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a078:	461a      	mov	r2, r3
 800a07a:	680b      	ldr	r3, [r1, #0]
 800a07c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	2b01      	cmp	r3, #1
 800a082:	d10c      	bne.n	800a09e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d104      	bne.n	800a094 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a08a:	2100      	movs	r1, #0
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f949 	bl	800a324 <USB_SetDevSpeed>
 800a092:	e008      	b.n	800a0a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a094:	2101      	movs	r1, #1
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f944 	bl	800a324 <USB_SetDevSpeed>
 800a09c:	e003      	b.n	800a0a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a09e:	2103      	movs	r1, #3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f93f 	bl	800a324 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0a6:	2110      	movs	r1, #16
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f8f3 	bl	800a294 <USB_FlushTxFifo>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f911 	bl	800a2e0 <USB_FlushRxFifo>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0da:	461a      	mov	r2, r3
 800a0dc:	2300      	movs	r3, #0
 800a0de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	613b      	str	r3, [r7, #16]
 800a0f0:	e043      	b.n	800a17a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	015a      	lsls	r2, r3, #5
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a108:	d118      	bne.n	800a13c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10a      	bne.n	800a126 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11c:	461a      	mov	r2, r3
 800a11e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	e013      	b.n	800a14e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	015a      	lsls	r2, r3, #5
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	4413      	add	r3, r2
 800a12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a132:	461a      	mov	r2, r3
 800a134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	e008      	b.n	800a14e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a148:	461a      	mov	r2, r3
 800a14a:	2300      	movs	r3, #0
 800a14c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15a:	461a      	mov	r2, r3
 800a15c:	2300      	movs	r3, #0
 800a15e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	461a      	mov	r2, r3
 800a16e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a172:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	3301      	adds	r3, #1
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d3b7      	bcc.n	800a0f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a182:	2300      	movs	r3, #0
 800a184:	613b      	str	r3, [r7, #16]
 800a186:	e043      	b.n	800a210 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a19a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a19e:	d118      	bne.n	800a1d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10a      	bne.n	800a1bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	e013      	b.n	800a1e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	e008      	b.n	800a1e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	015a      	lsls	r2, r3, #5
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1de:	461a      	mov	r2, r3
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a202:	461a      	mov	r2, r3
 800a204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	3301      	adds	r3, #1
 800a20e:	613b      	str	r3, [r7, #16]
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	429a      	cmp	r2, r3
 800a216:	d3b7      	bcc.n	800a188 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a22a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a238:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d105      	bne.n	800a24c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	f043 0210 	orr.w	r2, r3, #16
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	699a      	ldr	r2, [r3, #24]
 800a250:	4b0e      	ldr	r3, [pc, #56]	; (800a28c <USB_DevInit+0x2b4>)
 800a252:	4313      	orrs	r3, r2
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d005      	beq.n	800a26a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	f043 0208 	orr.w	r2, r3, #8
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d105      	bne.n	800a27c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	699a      	ldr	r2, [r3, #24]
 800a274:	4b06      	ldr	r3, [pc, #24]	; (800a290 <USB_DevInit+0x2b8>)
 800a276:	4313      	orrs	r3, r2
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a288:	b004      	add	sp, #16
 800a28a:	4770      	bx	lr
 800a28c:	803c3800 	.word	0x803c3800
 800a290:	40000004 	.word	0x40000004

0800a294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	019b      	lsls	r3, r3, #6
 800a2a6:	f043 0220 	orr.w	r2, r3, #32
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	4a09      	ldr	r2, [pc, #36]	; (800a2dc <USB_FlushTxFifo+0x48>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d901      	bls.n	800a2c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e006      	b.n	800a2ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f003 0320 	and.w	r3, r3, #32
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	d0f0      	beq.n	800a2ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	00030d40 	.word	0x00030d40

0800a2e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2210      	movs	r2, #16
 800a2f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4a09      	ldr	r2, [pc, #36]	; (800a320 <USB_FlushRxFifo+0x40>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d901      	bls.n	800a304 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e006      	b.n	800a312 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	f003 0310 	and.w	r3, r3, #16
 800a30c:	2b10      	cmp	r3, #16
 800a30e:	d0f0      	beq.n	800a2f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	00030d40 	.word	0x00030d40

0800a324 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a344:	4313      	orrs	r3, r2
 800a346:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a356:	b480      	push	{r7}
 800a358:	b087      	sub	sp, #28
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f003 0306 	and.w	r3, r3, #6
 800a36e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d102      	bne.n	800a37c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]
 800a37a:	e00a      	b.n	800a392 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d002      	beq.n	800a388 <USB_GetDevSpeed+0x32>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b06      	cmp	r3, #6
 800a386:	d102      	bne.n	800a38e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a388:	2302      	movs	r3, #2
 800a38a:	75fb      	strb	r3, [r7, #23]
 800a38c:	e001      	b.n	800a392 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a38e:	230f      	movs	r3, #15
 800a390:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a392:	7dfb      	ldrb	r3, [r7, #23]
}
 800a394:	4618      	mov	r0, r3
 800a396:	371c      	adds	r7, #28
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d139      	bne.n	800a430 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f003 030f 	and.w	r3, r3, #15
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	68f9      	ldr	r1, [r7, #12]
 800a3d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d153      	bne.n	800a49c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	78db      	ldrb	r3, [r3, #3]
 800a40e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a410:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	059b      	lsls	r3, r3, #22
 800a416:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a418:	431a      	orrs	r2, r3
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	0159      	lsls	r1, r3, #5
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	440b      	add	r3, r1
 800a422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a426:	4619      	mov	r1, r3
 800a428:	4b20      	ldr	r3, [pc, #128]	; (800a4ac <USB_ActivateEndpoint+0x10c>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	600b      	str	r3, [r1, #0]
 800a42e:	e035      	b.n	800a49c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a436:	69da      	ldr	r2, [r3, #28]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	f003 030f 	and.w	r3, r3, #15
 800a440:	2101      	movs	r1, #1
 800a442:	fa01 f303 	lsl.w	r3, r1, r3
 800a446:	041b      	lsls	r3, r3, #16
 800a448:	68f9      	ldr	r1, [r7, #12]
 800a44a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a44e:	4313      	orrs	r3, r2
 800a450:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d119      	bne.n	800a49c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	78db      	ldrb	r3, [r3, #3]
 800a482:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a484:	430b      	orrs	r3, r1
 800a486:	431a      	orrs	r2, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	0159      	lsls	r1, r3, #5
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	440b      	add	r3, r1
 800a490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a494:	4619      	mov	r1, r3
 800a496:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <USB_ActivateEndpoint+0x10c>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	10008000 	.word	0x10008000

0800a4b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	785b      	ldrb	r3, [r3, #1]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d161      	bne.n	800a590 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4e2:	d11f      	bne.n	800a524 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	0151      	lsls	r1, r2, #5
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	440a      	add	r2, r1
 800a4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a502:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	0151      	lsls	r1, r2, #5
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	440a      	add	r2, r1
 800a51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a51e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a522:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a52a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	f003 030f 	and.w	r3, r3, #15
 800a534:	2101      	movs	r1, #1
 800a536:	fa01 f303 	lsl.w	r3, r1, r3
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	43db      	mvns	r3, r3
 800a53e:	68f9      	ldr	r1, [r7, #12]
 800a540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a544:	4013      	ands	r3, r2
 800a546:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54e:	69da      	ldr	r2, [r3, #28]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	2101      	movs	r1, #1
 800a55a:	fa01 f303 	lsl.w	r3, r1, r3
 800a55e:	b29b      	uxth	r3, r3
 800a560:	43db      	mvns	r3, r3
 800a562:	68f9      	ldr	r1, [r7, #12]
 800a564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a568:	4013      	ands	r3, r2
 800a56a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	0159      	lsls	r1, r3, #5
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	440b      	add	r3, r1
 800a582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a586:	4619      	mov	r1, r3
 800a588:	4b35      	ldr	r3, [pc, #212]	; (800a660 <USB_DeactivateEndpoint+0x1b0>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	600b      	str	r3, [r1, #0]
 800a58e:	e060      	b.n	800a652 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5a6:	d11f      	bne.n	800a5e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	0151      	lsls	r1, r2, #5
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	440a      	add	r2, r1
 800a5de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fe:	041b      	lsls	r3, r3, #16
 800a600:	43db      	mvns	r3, r3
 800a602:	68f9      	ldr	r1, [r7, #12]
 800a604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a608:	4013      	ands	r3, r2
 800a60a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a612:	69da      	ldr	r2, [r3, #28]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 030f 	and.w	r3, r3, #15
 800a61c:	2101      	movs	r1, #1
 800a61e:	fa01 f303 	lsl.w	r3, r1, r3
 800a622:	041b      	lsls	r3, r3, #16
 800a624:	43db      	mvns	r3, r3
 800a626:	68f9      	ldr	r1, [r7, #12]
 800a628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a62c:	4013      	ands	r3, r2
 800a62e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	0159      	lsls	r1, r3, #5
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	440b      	add	r3, r1
 800a646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64a:	4619      	mov	r1, r3
 800a64c:	4b05      	ldr	r3, [pc, #20]	; (800a664 <USB_DeactivateEndpoint+0x1b4>)
 800a64e:	4013      	ands	r3, r2
 800a650:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	ec337800 	.word	0xec337800
 800a664:	eff37800 	.word	0xeff37800

0800a668 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08a      	sub	sp, #40	; 0x28
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	4613      	mov	r3, r2
 800a674:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	785b      	ldrb	r3, [r3, #1]
 800a684:	2b01      	cmp	r3, #1
 800a686:	f040 8163 	bne.w	800a950 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d132      	bne.n	800a6f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69e:	691a      	ldr	r2, [r3, #16]
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	0159      	lsls	r1, r3, #5
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	440b      	add	r3, r1
 800a6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4ba5      	ldr	r3, [pc, #660]	; (800a944 <USB_EPStartXfer+0x2dc>)
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	69ba      	ldr	r2, [r7, #24]
 800a6c4:	0151      	lsls	r1, r2, #5
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	440a      	add	r2, r1
 800a6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e0:	691a      	ldr	r2, [r3, #16]
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	0159      	lsls	r1, r3, #5
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	440b      	add	r3, r1
 800a6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4b95      	ldr	r3, [pc, #596]	; (800a948 <USB_EPStartXfer+0x2e0>)
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	610b      	str	r3, [r1, #16]
 800a6f6:	e074      	b.n	800a7e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a704:	691a      	ldr	r2, [r3, #16]
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	0159      	lsls	r1, r3, #5
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	440b      	add	r3, r1
 800a70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a712:	4619      	mov	r1, r3
 800a714:	4b8c      	ldr	r3, [pc, #560]	; (800a948 <USB_EPStartXfer+0x2e0>)
 800a716:	4013      	ands	r3, r2
 800a718:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a726:	691a      	ldr	r2, [r3, #16]
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	0159      	lsls	r1, r3, #5
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	440b      	add	r3, r1
 800a730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a734:	4619      	mov	r1, r3
 800a736:	4b83      	ldr	r3, [pc, #524]	; (800a944 <USB_EPStartXfer+0x2dc>)
 800a738:	4013      	ands	r3, r2
 800a73a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	015a      	lsls	r2, r3, #5
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	4413      	add	r3, r2
 800a744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a748:	691a      	ldr	r2, [r3, #16]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	6959      	ldr	r1, [r3, #20]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	440b      	add	r3, r1
 800a754:	1e59      	subs	r1, r3, #1
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a75e:	04d9      	lsls	r1, r3, #19
 800a760:	4b7a      	ldr	r3, [pc, #488]	; (800a94c <USB_EPStartXfer+0x2e4>)
 800a762:	400b      	ands	r3, r1
 800a764:	69b9      	ldr	r1, [r7, #24]
 800a766:	0148      	lsls	r0, r1, #5
 800a768:	69f9      	ldr	r1, [r7, #28]
 800a76a:	4401      	add	r1, r0
 800a76c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a770:	4313      	orrs	r3, r2
 800a772:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a780:	691a      	ldr	r2, [r3, #16]
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a78a:	69b9      	ldr	r1, [r7, #24]
 800a78c:	0148      	lsls	r0, r1, #5
 800a78e:	69f9      	ldr	r1, [r7, #28]
 800a790:	4401      	add	r1, r0
 800a792:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a796:	4313      	orrs	r3, r2
 800a798:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	78db      	ldrb	r3, [r3, #3]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d11f      	bne.n	800a7e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	0151      	lsls	r1, r2, #5
 800a7b4:	69fa      	ldr	r2, [r7, #28]
 800a7b6:	440a      	add	r2, r1
 800a7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a7c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	69ba      	ldr	r2, [r7, #24]
 800a7d2:	0151      	lsls	r1, r2, #5
 800a7d4:	69fa      	ldr	r2, [r7, #28]
 800a7d6:	440a      	add	r2, r1
 800a7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d14b      	bne.n	800a880 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d009      	beq.n	800a804 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	78db      	ldrb	r3, [r3, #3]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d128      	bne.n	800a85e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d110      	bne.n	800a83e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	69ba      	ldr	r2, [r7, #24]
 800a82c:	0151      	lsls	r1, r2, #5
 800a82e:	69fa      	ldr	r2, [r7, #28]
 800a830:	440a      	add	r2, r1
 800a832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	e00f      	b.n	800a85e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	0151      	lsls	r1, r2, #5
 800a850:	69fa      	ldr	r2, [r7, #28]
 800a852:	440a      	add	r2, r1
 800a854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a85c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	0151      	lsls	r1, r2, #5
 800a870:	69fa      	ldr	r2, [r7, #28]
 800a872:	440a      	add	r2, r1
 800a874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a878:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	e133      	b.n	800aae8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	015a      	lsls	r2, r3, #5
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	4413      	add	r3, r2
 800a888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	0151      	lsls	r1, r2, #5
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	440a      	add	r2, r1
 800a896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a89a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a89e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	78db      	ldrb	r3, [r3, #3]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d015      	beq.n	800a8d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 811b 	beq.w	800aae8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	f003 030f 	and.w	r3, r3, #15
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c8:	69f9      	ldr	r1, [r7, #28]
 800a8ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	634b      	str	r3, [r1, #52]	; 0x34
 800a8d2:	e109      	b.n	800aae8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d110      	bne.n	800a906 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	69ba      	ldr	r2, [r7, #24]
 800a8f4:	0151      	lsls	r1, r2, #5
 800a8f6:	69fa      	ldr	r2, [r7, #28]
 800a8f8:	440a      	add	r2, r1
 800a8fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	e00f      	b.n	800a926 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69ba      	ldr	r2, [r7, #24]
 800a916:	0151      	lsls	r1, r2, #5
 800a918:	69fa      	ldr	r2, [r7, #28]
 800a91a:	440a      	add	r2, r1
 800a91c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a924:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	68d9      	ldr	r1, [r3, #12]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	781a      	ldrb	r2, [r3, #0]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	b298      	uxth	r0, r3
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	4603      	mov	r3, r0
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 fa38 	bl	800adb0 <USB_WritePacket>
 800a940:	e0d2      	b.n	800aae8 <USB_EPStartXfer+0x480>
 800a942:	bf00      	nop
 800a944:	e007ffff 	.word	0xe007ffff
 800a948:	fff80000 	.word	0xfff80000
 800a94c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95c:	691a      	ldr	r2, [r3, #16]
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	0159      	lsls	r1, r3, #5
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	440b      	add	r3, r1
 800a966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96a:	4619      	mov	r1, r3
 800a96c:	4b61      	ldr	r3, [pc, #388]	; (800aaf4 <USB_EPStartXfer+0x48c>)
 800a96e:	4013      	ands	r3, r2
 800a970:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97e:	691a      	ldr	r2, [r3, #16]
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	0159      	lsls	r1, r3, #5
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	440b      	add	r3, r1
 800a988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98c:	4619      	mov	r1, r3
 800a98e:	4b5a      	ldr	r3, [pc, #360]	; (800aaf8 <USB_EPStartXfer+0x490>)
 800a990:	4013      	ands	r3, r2
 800a992:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d123      	bne.n	800a9e4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a8:	691a      	ldr	r2, [r3, #16]
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9b2:	69b9      	ldr	r1, [r7, #24]
 800a9b4:	0148      	lsls	r0, r1, #5
 800a9b6:	69f9      	ldr	r1, [r7, #28]
 800a9b8:	4401      	add	r1, r0
 800a9ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	0151      	lsls	r1, r2, #5
 800a9d4:	69fa      	ldr	r2, [r7, #28]
 800a9d6:	440a      	add	r2, r1
 800a9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9e0:	6113      	str	r3, [r2, #16]
 800a9e2:	e033      	b.n	800aa4c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	695a      	ldr	r2, [r3, #20]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	1e5a      	subs	r2, r3, #1
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa06:	691a      	ldr	r2, [r3, #16]
 800aa08:	8afb      	ldrh	r3, [r7, #22]
 800aa0a:	04d9      	lsls	r1, r3, #19
 800aa0c:	4b3b      	ldr	r3, [pc, #236]	; (800aafc <USB_EPStartXfer+0x494>)
 800aa0e:	400b      	ands	r3, r1
 800aa10:	69b9      	ldr	r1, [r7, #24]
 800aa12:	0148      	lsls	r0, r1, #5
 800aa14:	69f9      	ldr	r1, [r7, #28]
 800aa16:	4401      	add	r1, r0
 800aa18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2c:	691a      	ldr	r2, [r3, #16]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	8af9      	ldrh	r1, [r7, #22]
 800aa34:	fb01 f303 	mul.w	r3, r1, r3
 800aa38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa3c:	69b9      	ldr	r1, [r7, #24]
 800aa3e:	0148      	lsls	r0, r1, #5
 800aa40:	69f9      	ldr	r1, [r7, #28]
 800aa42:	4401      	add	r1, r0
 800aa44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d10d      	bne.n	800aa6e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d009      	beq.n	800aa6e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	68d9      	ldr	r1, [r3, #12]
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6a:	460a      	mov	r2, r1
 800aa6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	78db      	ldrb	r3, [r3, #3]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d128      	bne.n	800aac8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d110      	bne.n	800aaa8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	0151      	lsls	r1, r2, #5
 800aa98:	69fa      	ldr	r2, [r7, #28]
 800aa9a:	440a      	add	r2, r1
 800aa9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	e00f      	b.n	800aac8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69ba      	ldr	r2, [r7, #24]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	69fa      	ldr	r2, [r7, #28]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aac6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	0151      	lsls	r1, r2, #5
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	440a      	add	r2, r1
 800aade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3720      	adds	r7, #32
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	fff80000 	.word	0xfff80000
 800aaf8:	e007ffff 	.word	0xe007ffff
 800aafc:	1ff80000 	.word	0x1ff80000

0800ab00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b087      	sub	sp, #28
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	785b      	ldrb	r3, [r3, #1]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	f040 80cd 	bne.w	800acbc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d132      	bne.n	800ab90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab36:	691a      	ldr	r2, [r3, #16]
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	0159      	lsls	r1, r3, #5
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	440b      	add	r3, r1
 800ab40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab44:	4619      	mov	r1, r3
 800ab46:	4b98      	ldr	r3, [pc, #608]	; (800ada8 <USB_EP0StartXfer+0x2a8>)
 800ab48:	4013      	ands	r3, r2
 800ab4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	0151      	lsls	r1, r2, #5
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	440a      	add	r2, r1
 800ab62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	015a      	lsls	r2, r3, #5
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab78:	691a      	ldr	r2, [r3, #16]
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	0159      	lsls	r1, r3, #5
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	440b      	add	r3, r1
 800ab82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab86:	4619      	mov	r1, r3
 800ab88:	4b88      	ldr	r3, [pc, #544]	; (800adac <USB_EP0StartXfer+0x2ac>)
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	610b      	str	r3, [r1, #16]
 800ab8e:	e04e      	b.n	800ac2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9c:	691a      	ldr	r2, [r3, #16]
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	0159      	lsls	r1, r3, #5
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	440b      	add	r3, r1
 800aba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abaa:	4619      	mov	r1, r3
 800abac:	4b7f      	ldr	r3, [pc, #508]	; (800adac <USB_EP0StartXfer+0x2ac>)
 800abae:	4013      	ands	r3, r2
 800abb0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbe:	691a      	ldr	r2, [r3, #16]
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	0159      	lsls	r1, r3, #5
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	440b      	add	r3, r1
 800abc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abcc:	4619      	mov	r1, r3
 800abce:	4b76      	ldr	r3, [pc, #472]	; (800ada8 <USB_EP0StartXfer+0x2a8>)
 800abd0:	4013      	ands	r3, r2
 800abd2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	695a      	ldr	r2, [r3, #20]
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d903      	bls.n	800abe8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	0151      	lsls	r1, r2, #5
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	440a      	add	r2, r1
 800abfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	015a      	lsls	r2, r3, #5
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac14:	691a      	ldr	r2, [r3, #16]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac1e:	6939      	ldr	r1, [r7, #16]
 800ac20:	0148      	lsls	r0, r1, #5
 800ac22:	6979      	ldr	r1, [r7, #20]
 800ac24:	4401      	add	r1, r0
 800ac26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d11e      	bne.n	800ac72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d009      	beq.n	800ac50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	015a      	lsls	r2, r3, #5
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac48:	461a      	mov	r2, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	0151      	lsls	r1, r2, #5
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	440a      	add	r2, r1
 800ac66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac6e:	6013      	str	r3, [r2, #0]
 800ac70:	e092      	b.n	800ad98 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	0151      	lsls	r1, r2, #5
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	440a      	add	r2, r1
 800ac88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d07e      	beq.n	800ad98 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	f003 030f 	and.w	r3, r3, #15
 800acaa:	2101      	movs	r1, #1
 800acac:	fa01 f303 	lsl.w	r3, r1, r3
 800acb0:	6979      	ldr	r1, [r7, #20]
 800acb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acb6:	4313      	orrs	r3, r2
 800acb8:	634b      	str	r3, [r1, #52]	; 0x34
 800acba:	e06d      	b.n	800ad98 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	015a      	lsls	r2, r3, #5
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc8:	691a      	ldr	r2, [r3, #16]
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	0159      	lsls	r1, r3, #5
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	440b      	add	r3, r1
 800acd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd6:	4619      	mov	r1, r3
 800acd8:	4b34      	ldr	r3, [pc, #208]	; (800adac <USB_EP0StartXfer+0x2ac>)
 800acda:	4013      	ands	r3, r2
 800acdc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acea:	691a      	ldr	r2, [r3, #16]
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	0159      	lsls	r1, r3, #5
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	440b      	add	r3, r1
 800acf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf8:	4619      	mov	r1, r3
 800acfa:	4b2b      	ldr	r3, [pc, #172]	; (800ada8 <USB_EP0StartXfer+0x2a8>)
 800acfc:	4013      	ands	r3, r2
 800acfe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	695b      	ldr	r3, [r3, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	0151      	lsls	r1, r2, #5
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	440a      	add	r2, r1
 800ad26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3c:	691a      	ldr	r2, [r3, #16]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad46:	6939      	ldr	r1, [r7, #16]
 800ad48:	0148      	lsls	r0, r1, #5
 800ad4a:	6979      	ldr	r1, [r7, #20]
 800ad4c:	4401      	add	r1, r0
 800ad4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad52:	4313      	orrs	r3, r2
 800ad54:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ad56:	79fb      	ldrb	r3, [r7, #7]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d10d      	bne.n	800ad78 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d009      	beq.n	800ad78 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	68d9      	ldr	r1, [r3, #12]
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad74:	460a      	mov	r2, r1
 800ad76:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	0151      	lsls	r1, r2, #5
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	440a      	add	r2, r1
 800ad8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	e007ffff 	.word	0xe007ffff
 800adac:	fff80000 	.word	0xfff80000

0800adb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b089      	sub	sp, #36	; 0x24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	4611      	mov	r1, r2
 800adbc:	461a      	mov	r2, r3
 800adbe:	460b      	mov	r3, r1
 800adc0:	71fb      	strb	r3, [r7, #7]
 800adc2:	4613      	mov	r3, r2
 800adc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800adce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800add2:	2b00      	cmp	r3, #0
 800add4:	d123      	bne.n	800ae1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800add6:	88bb      	ldrh	r3, [r7, #4]
 800add8:	3303      	adds	r3, #3
 800adda:	089b      	lsrs	r3, r3, #2
 800addc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800adde:	2300      	movs	r3, #0
 800ade0:	61bb      	str	r3, [r7, #24]
 800ade2:	e018      	b.n	800ae16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	031a      	lsls	r2, r3, #12
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	4413      	add	r3, r2
 800adec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adf0:	461a      	mov	r2, r3
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	3301      	adds	r3, #1
 800adfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	3301      	adds	r3, #1
 800ae02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	3301      	adds	r3, #1
 800ae08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	3301      	adds	r3, #1
 800ae14:	61bb      	str	r3, [r7, #24]
 800ae16:	69ba      	ldr	r2, [r7, #24]
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d3e2      	bcc.n	800ade4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3724      	adds	r7, #36	; 0x24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b08b      	sub	sp, #44	; 0x2c
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ae42:	88fb      	ldrh	r3, [r7, #6]
 800ae44:	089b      	lsrs	r3, r3, #2
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ae4a:	88fb      	ldrh	r3, [r7, #6]
 800ae4c:	f003 0303 	and.w	r3, r3, #3
 800ae50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ae52:	2300      	movs	r3, #0
 800ae54:	623b      	str	r3, [r7, #32]
 800ae56:	e014      	b.n	800ae82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	601a      	str	r2, [r3, #0]
    pDest++;
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	3301      	adds	r3, #1
 800ae68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	3301      	adds	r3, #1
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	3301      	adds	r3, #1
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	623b      	str	r3, [r7, #32]
 800ae82:	6a3a      	ldr	r2, [r7, #32]
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d3e6      	bcc.n	800ae58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ae8a:	8bfb      	ldrh	r3, [r7, #30]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01e      	beq.n	800aece <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ae90:	2300      	movs	r3, #0
 800ae92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f107 0310 	add.w	r3, r7, #16
 800aea0:	6812      	ldr	r2, [r2, #0]
 800aea2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	701a      	strb	r2, [r3, #0]
      i++;
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	623b      	str	r3, [r7, #32]
      pDest++;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	3301      	adds	r3, #1
 800aec0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aec2:	8bfb      	ldrh	r3, [r7, #30]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aec8:	8bfb      	ldrh	r3, [r7, #30]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1ea      	bne.n	800aea4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	372c      	adds	r7, #44	; 0x2c
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	785b      	ldrb	r3, [r3, #1]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d12c      	bne.n	800af52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	db12      	blt.n	800af30 <USB_EPSetStall+0x54>
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00f      	beq.n	800af30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	015a      	lsls	r2, r3, #5
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4413      	add	r3, r2
 800af18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	0151      	lsls	r1, r2, #5
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	440a      	add	r2, r1
 800af26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	0151      	lsls	r1, r2, #5
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	440a      	add	r2, r1
 800af46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af4e:	6013      	str	r3, [r2, #0]
 800af50:	e02b      	b.n	800afaa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	db12      	blt.n	800af8a <USB_EPSetStall+0xae>
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00f      	beq.n	800af8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	0151      	lsls	r1, r2, #5
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	440a      	add	r2, r1
 800af80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	015a      	lsls	r2, r3, #5
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	4413      	add	r3, r2
 800af92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	0151      	lsls	r1, r2, #5
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	440a      	add	r2, r1
 800afa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800afa8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	785b      	ldrb	r3, [r3, #1]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d128      	bne.n	800b026 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	0151      	lsls	r1, r2, #5
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	440a      	add	r2, r1
 800afea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aff2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	78db      	ldrb	r3, [r3, #3]
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d003      	beq.n	800b004 <USB_EPClearStall+0x4c>
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	78db      	ldrb	r3, [r3, #3]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d138      	bne.n	800b076 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	0151      	lsls	r1, r2, #5
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	440a      	add	r2, r1
 800b01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b01e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b022:	6013      	str	r3, [r2, #0]
 800b024:	e027      	b.n	800b076 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	0151      	lsls	r1, r2, #5
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	440a      	add	r2, r1
 800b03c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b040:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b044:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	78db      	ldrb	r3, [r3, #3]
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d003      	beq.n	800b056 <USB_EPClearStall+0x9e>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	78db      	ldrb	r3, [r3, #3]
 800b052:	2b02      	cmp	r3, #2
 800b054:	d10f      	bne.n	800b076 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	0151      	lsls	r1, r2, #5
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	440a      	add	r2, r1
 800b06c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b074:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b0a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	78fb      	ldrb	r3, [r7, #3]
 800b0b2:	011b      	lsls	r3, r3, #4
 800b0b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b0b8:	68f9      	ldr	r1, [r7, #12]
 800b0ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0ea:	f023 0303 	bic.w	r3, r3, #3
 800b0ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0fe:	f023 0302 	bic.w	r3, r3, #2
 800b102:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b112:	b480      	push	{r7}
 800b114:	b085      	sub	sp, #20
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b12c:	f023 0303 	bic.w	r3, r3, #3
 800b130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b140:	f043 0302 	orr.w	r3, r3, #2
 800b144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4013      	ands	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b16c:	68fb      	ldr	r3, [r7, #12]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b085      	sub	sp, #20
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b196:	69db      	ldr	r3, [r3, #28]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	4013      	ands	r3, r2
 800b19c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	0c1b      	lsrs	r3, r3, #16
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	b29b      	uxth	r3, r3
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b1f2:	78fb      	ldrb	r3, [r7, #3]
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	4013      	ands	r3, r2
 800b20e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b210:	68bb      	ldr	r3, [r7, #8]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b21e:	b480      	push	{r7}
 800b220:	b087      	sub	sp, #28
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	460b      	mov	r3, r1
 800b228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b240:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	f003 030f 	and.w	r3, r3, #15
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	fa22 f303 	lsr.w	r3, r2, r3
 800b24e:	01db      	lsls	r3, r3, #7
 800b250:	b2db      	uxtb	r3, r3
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	4313      	orrs	r3, r2
 800b256:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b258:	78fb      	ldrb	r3, [r7, #3]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	4013      	ands	r3, r2
 800b26a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b26c:	68bb      	ldr	r3, [r7, #8]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	371c      	adds	r7, #28
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	f003 0301 	and.w	r3, r3, #1
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <USB_ActivateSetup+0x44>)
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3714      	adds	r7, #20
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	fffff800 	.word	0xfffff800

0800b2e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	333c      	adds	r3, #60	; 0x3c
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	4a26      	ldr	r2, [pc, #152]	; (800b398 <USB_EP0_OutStart+0xb8>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d90a      	bls.n	800b31a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b314:	d101      	bne.n	800b31a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	e037      	b.n	800b38a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b320:	461a      	mov	r2, r3
 800b322:	2300      	movs	r3, #0
 800b324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b348:	f043 0318 	orr.w	r3, r3, #24
 800b34c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b35c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b362:	7afb      	ldrb	r3, [r7, #11]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d10f      	bne.n	800b388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36e:	461a      	mov	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b382:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	4f54300a 	.word	0x4f54300a

0800b39c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	4a13      	ldr	r2, [pc, #76]	; (800b400 <USB_CoreReset+0x64>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d901      	bls.n	800b3ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e01b      	b.n	800b3f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	daf2      	bge.n	800b3a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	f043 0201 	orr.w	r2, r3, #1
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	4a09      	ldr	r2, [pc, #36]	; (800b400 <USB_CoreReset+0x64>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d901      	bls.n	800b3e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e006      	b.n	800b3f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d0f0      	beq.n	800b3d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	00030d40 	.word	0x00030d40

0800b404 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800b410:	f241 0074 	movw	r0, #4212	; 0x1074
 800b414:	f003 fcfc 	bl	800ee10 <USBD_static_malloc>
 800b418:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d105      	bne.n	800b42c <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b428:	2302      	movs	r3, #2
 800b42a:	e034      	b.n	800b496 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	7c1b      	ldrb	r3, [r3, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d115      	bne.n	800b468 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b43c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b440:	2202      	movs	r2, #2
 800b442:	2101      	movs	r1, #1
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f003 fba0 	bl	800eb8a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800b452:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b456:	2202      	movs	r2, #2
 800b458:	2181      	movs	r1, #129	; 0x81
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f003 fb95 	bl	800eb8a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	871a      	strh	r2, [r3, #56]	; 0x38
 800b466:	e012      	b.n	800b48e <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b468:	2340      	movs	r3, #64	; 0x40
 800b46a:	2202      	movs	r2, #2
 800b46c:	2101      	movs	r1, #1
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f003 fb8b 	bl	800eb8a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800b47c:	2340      	movs	r3, #64	; 0x40
 800b47e:	2202      	movs	r2, #2
 800b480:	2181      	movs	r1, #129	; 0x81
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f003 fb81 	bl	800eb8a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f999 	bl	800b7c6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800b4aa:	2101      	movs	r1, #1
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f003 fb92 	bl	800ebd6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800b4ba:	2181      	movs	r1, #129	; 0x81
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f003 fb8a 	bl	800ebd6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00c      	beq.n	800b4ec <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f9dc 	bl	800b890 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f003 fca4 	bl	800ee2c <USBD_static_free>
    pdev->pClassData = NULL;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b508:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b518:	2303      	movs	r3, #3
 800b51a:	e0db      	b.n	800b6d4 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b524:	2b00      	cmp	r3, #0
 800b526:	d04e      	beq.n	800b5c6 <USBD_MSC_Setup+0xce>
 800b528:	2b20      	cmp	r3, #32
 800b52a:	f040 80cb 	bne.w	800b6c4 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	785b      	ldrb	r3, [r3, #1]
 800b532:	2bfe      	cmp	r3, #254	; 0xfe
 800b534:	d002      	beq.n	800b53c <USBD_MSC_Setup+0x44>
 800b536:	2bff      	cmp	r3, #255	; 0xff
 800b538:	d025      	beq.n	800b586 <USBD_MSC_Setup+0x8e>
 800b53a:	e03c      	b.n	800b5b6 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	885b      	ldrh	r3, [r3, #2]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d119      	bne.n	800b578 <USBD_MSC_Setup+0x80>
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	88db      	ldrh	r3, [r3, #6]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d115      	bne.n	800b578 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800b552:	2b00      	cmp	r3, #0
 800b554:	da10      	bge.n	800b578 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	4798      	blx	r3
 800b560:	4603      	mov	r3, r0
 800b562:	461a      	mov	r2, r3
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2201      	movs	r2, #1
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f002 ff51 	bl	800e416 <USBD_CtlSendData>
 800b574:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b576:	e025      	b.n	800b5c4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f002 feda 	bl	800e334 <USBD_CtlError>
            ret = USBD_FAIL;
 800b580:	2303      	movs	r3, #3
 800b582:	75fb      	strb	r3, [r7, #23]
          break;
 800b584:	e01e      	b.n	800b5c4 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	885b      	ldrh	r3, [r3, #2]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10c      	bne.n	800b5a8 <USBD_MSC_Setup+0xb0>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	88db      	ldrh	r3, [r3, #6]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d108      	bne.n	800b5a8 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	db03      	blt.n	800b5a8 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f94e 	bl	800b842 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5a6:	e00d      	b.n	800b5c4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f002 fec2 	bl	800e334 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	75fb      	strb	r3, [r7, #23]
          break;
 800b5b4:	e006      	b.n	800b5c4 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f002 febb 	bl	800e334 <USBD_CtlError>
          ret = USBD_FAIL;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	75fb      	strb	r3, [r7, #23]
          break;
 800b5c2:	bf00      	nop
      }
      break;
 800b5c4:	e085      	b.n	800b6d2 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	785b      	ldrb	r3, [r3, #1]
 800b5ca:	2b0b      	cmp	r3, #11
 800b5cc:	d871      	bhi.n	800b6b2 <USBD_MSC_Setup+0x1ba>
 800b5ce:	a201      	add	r2, pc, #4	; (adr r2, 800b5d4 <USBD_MSC_Setup+0xdc>)
 800b5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d4:	0800b605 	.word	0x0800b605
 800b5d8:	0800b681 	.word	0x0800b681
 800b5dc:	0800b6b3 	.word	0x0800b6b3
 800b5e0:	0800b6b3 	.word	0x0800b6b3
 800b5e4:	0800b6b3 	.word	0x0800b6b3
 800b5e8:	0800b6b3 	.word	0x0800b6b3
 800b5ec:	0800b6b3 	.word	0x0800b6b3
 800b5f0:	0800b6b3 	.word	0x0800b6b3
 800b5f4:	0800b6b3 	.word	0x0800b6b3
 800b5f8:	0800b6b3 	.word	0x0800b6b3
 800b5fc:	0800b62f 	.word	0x0800b62f
 800b600:	0800b659 	.word	0x0800b659
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d107      	bne.n	800b620 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b610:	f107 030e 	add.w	r3, r7, #14
 800b614:	2202      	movs	r2, #2
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f002 fefc 	bl	800e416 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b61e:	e050      	b.n	800b6c2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f002 fe86 	bl	800e334 <USBD_CtlError>
            ret = USBD_FAIL;
 800b628:	2303      	movs	r3, #3
 800b62a:	75fb      	strb	r3, [r7, #23]
          break;
 800b62c:	e049      	b.n	800b6c2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b03      	cmp	r3, #3
 800b638:	d107      	bne.n	800b64a <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	3304      	adds	r3, #4
 800b63e:	2201      	movs	r2, #1
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f002 fee7 	bl	800e416 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b648:	e03b      	b.n	800b6c2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f002 fe71 	bl	800e334 <USBD_CtlError>
            ret = USBD_FAIL;
 800b652:	2303      	movs	r3, #3
 800b654:	75fb      	strb	r3, [r7, #23]
          break;
 800b656:	e034      	b.n	800b6c2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b03      	cmp	r3, #3
 800b662:	d106      	bne.n	800b672 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	885b      	ldrh	r3, [r3, #2]
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	461a      	mov	r2, r3
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b670:	e027      	b.n	800b6c2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f002 fe5d 	bl	800e334 <USBD_CtlError>
            ret = USBD_FAIL;
 800b67a:	2303      	movs	r3, #3
 800b67c:	75fb      	strb	r3, [r7, #23]
          break;
 800b67e:	e020      	b.n	800b6c2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b686:	b2db      	uxtb	r3, r3
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d119      	bne.n	800b6c0 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	885b      	ldrh	r3, [r3, #2]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d115      	bne.n	800b6c0 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	889b      	ldrh	r3, [r3, #4]
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f003 fab9 	bl	800ec14 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	889b      	ldrh	r3, [r3, #4]
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fab6 	bl	800bc1c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b6b0:	e006      	b.n	800b6c0 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f002 fe3d 	bl	800e334 <USBD_CtlError>
          ret = USBD_FAIL;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	75fb      	strb	r3, [r7, #23]
          break;
 800b6be:	e000      	b.n	800b6c2 <USBD_MSC_Setup+0x1ca>
          break;
 800b6c0:	bf00      	nop
      }
      break;
 800b6c2:	e006      	b.n	800b6d2 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f002 fe34 	bl	800e334 <USBD_CtlError>
      ret = USBD_FAIL;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b6d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800b6e8:	78fb      	ldrb	r3, [r7, #3]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f8e3 	bl	800b8b8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800b708:	78fb      	ldrb	r3, [r7, #3]
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f90c 	bl	800b92a <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800b72a:	4b03      	ldr	r3, [pc, #12]	; (800b738 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	24000048 	.word	0x24000048

0800b73c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2220      	movs	r2, #32
 800b748:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800b74a:	4b03      	ldr	r3, [pc, #12]	; (800b758 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	24000068 	.word	0x24000068

0800b75c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2220      	movs	r2, #32
 800b768:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800b76a:	4b03      	ldr	r3, [pc, #12]	; (800b778 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	24000088 	.word	0x24000088

0800b77c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	220a      	movs	r2, #10
 800b788:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800b78a:	4b03      	ldr	r3, [pc, #12]	; (800b798 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	240000a8 	.word	0x240000a8

0800b79c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e004      	b.n	800b7ba <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7d4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d02e      	beq.n	800b83a <MSC_BOT_Init+0x74>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	f241 0361 	movw	r3, #4193	; 0x1061
 800b7ee:	4413      	add	r3, r2
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	f241 0362 	movw	r3, #4194	; 0x1062
 800b804:	4413      	add	r3, r2
 800b806:	2200      	movs	r2, #0
 800b808:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2000      	movs	r0, #0
 800b814:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800b816:	2101      	movs	r1, #1
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f003 f9fb 	bl	800ec14 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800b81e:	2181      	movs	r1, #129	; 0x81
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f003 f9f7 	bl	800ec14 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f241 0210 	movw	r2, #4112	; 0x1010
 800b82c:	441a      	add	r2, r3
 800b82e:	231f      	movs	r3, #31
 800b830:	2101      	movs	r1, #1
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f003 fab7 	bl	800eda6 <USBD_LL_PrepareReceive>
 800b838:	e000      	b.n	800b83c <MSC_BOT_Init+0x76>
    return;
 800b83a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b850:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d017      	beq.n	800b888 <MSC_BOT_Reset+0x46>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2201      	movs	r2, #1
 800b862:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800b864:	2181      	movs	r1, #129	; 0x81
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f003 fa12 	bl	800ec90 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800b86c:	2101      	movs	r1, #1
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f003 fa0e 	bl	800ec90 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f241 0210 	movw	r2, #4112	; 0x1010
 800b87a:	441a      	add	r2, r3
 800b87c:	231f      	movs	r3, #31
 800b87e:	2101      	movs	r1, #1
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f003 fa90 	bl	800eda6 <USBD_LL_PrepareReceive>
 800b886:	e000      	b.n	800b88a <MSC_BOT_Reset+0x48>
    return;
 800b888:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b89e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d002      	beq.n	800b8ac <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	721a      	strb	r2, [r3, #8]
  }
}
 800b8ac:	bf00      	nop
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d023      	beq.n	800b91a <MSC_BOT_DataIn+0x62>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	7a1b      	ldrb	r3, [r3, #8]
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d005      	beq.n	800b8e6 <MSC_BOT_DataIn+0x2e>
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	db1f      	blt.n	800b91e <MSC_BOT_DataIn+0x66>
 800b8de:	3b03      	subs	r3, #3
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d81c      	bhi.n	800b91e <MSC_BOT_DataIn+0x66>
 800b8e4:	e014      	b.n	800b910 <MSC_BOT_DataIn+0x58>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	f241 031d 	movw	r3, #4125	; 0x101d
 800b8ec:	4413      	add	r3, r2
 800b8ee:	7819      	ldrb	r1, [r3, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	f241 031f 	movw	r3, #4127	; 0x101f
 800b8f6:	4413      	add	r3, r2
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f9bc 	bl	800bc78 <SCSI_ProcessCmd>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	da0d      	bge.n	800b922 <MSC_BOT_DataIn+0x6a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b906:	2101      	movs	r1, #1
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f91b 	bl	800bb44 <MSC_BOT_SendCSW>
      }
      break;
 800b90e:	e008      	b.n	800b922 <MSC_BOT_DataIn+0x6a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b910:	2100      	movs	r1, #0
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f916 	bl	800bb44 <MSC_BOT_SendCSW>
      break;
 800b918:	e004      	b.n	800b924 <MSC_BOT_DataIn+0x6c>
    return;
 800b91a:	bf00      	nop
 800b91c:	e002      	b.n	800b924 <MSC_BOT_DataIn+0x6c>

    default:
      break;
 800b91e:	bf00      	nop
 800b920:	e000      	b.n	800b924 <MSC_BOT_DataIn+0x6c>
      break;
 800b922:	bf00      	nop
  }
}
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	460b      	mov	r3, r1
 800b934:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b93c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01f      	beq.n	800b984 <MSC_BOT_DataOut+0x5a>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	7a1b      	ldrb	r3, [r3, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <MSC_BOT_DataOut+0x28>
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d004      	beq.n	800b95a <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800b950:	e01b      	b.n	800b98a <MSC_BOT_DataOut+0x60>
      MSC_BOT_CBW_Decode(pdev);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f81c 	bl	800b990 <MSC_BOT_CBW_Decode>
      break;
 800b958:	e017      	b.n	800b98a <MSC_BOT_DataOut+0x60>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	f241 031d 	movw	r3, #4125	; 0x101d
 800b960:	4413      	add	r3, r2
 800b962:	7819      	ldrb	r1, [r3, #0]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	f241 031f 	movw	r3, #4127	; 0x101f
 800b96a:	4413      	add	r3, r2
 800b96c:	461a      	mov	r2, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f982 	bl	800bc78 <SCSI_ProcessCmd>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	da06      	bge.n	800b988 <MSC_BOT_DataOut+0x5e>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b97a:	2101      	movs	r1, #1
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f8e1 	bl	800bb44 <MSC_BOT_SendCSW>
      break;
 800b982:	e001      	b.n	800b988 <MSC_BOT_DataOut+0x5e>
    return;
 800b984:	bf00      	nop
 800b986:	e000      	b.n	800b98a <MSC_BOT_DataOut+0x60>
      break;
 800b988:	bf00      	nop
  }
}
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b99e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 808d 	beq.w	800bac2 <MSC_BOT_CBW_Decode+0x132>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	f241 0314 	movw	r3, #4116	; 0x1014
 800b9ae:	4413      	add	r3, r2
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	68f9      	ldr	r1, [r7, #12]
 800b9b4:	f241 0334 	movw	r3, #4148	; 0x1034
 800b9b8:	440b      	add	r3, r1
 800b9ba:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	f241 0318 	movw	r3, #4120	; 0x1018
 800b9c2:	4413      	add	r3, r2
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68f9      	ldr	r1, [r7, #12]
 800b9c8:	f241 0338 	movw	r3, #4152	; 0x1038
 800b9cc:	440b      	add	r3, r1
 800b9ce:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f003 fa08 	bl	800ede8 <USBD_LL_GetRxDataSize>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b1f      	cmp	r3, #31
 800b9dc:	d11c      	bne.n	800ba18 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	f241 0310 	movw	r3, #4112	; 0x1010
 800b9e4:	4413      	add	r3, r2
 800b9e6:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800b9e8:	4a39      	ldr	r2, [pc, #228]	; (800bad0 <MSC_BOT_CBW_Decode+0x140>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d114      	bne.n	800ba18 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	f241 031d 	movw	r3, #4125	; 0x101d
 800b9f4:	4413      	add	r3, r2
 800b9f6:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d80d      	bhi.n	800ba18 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	f241 031e 	movw	r3, #4126	; 0x101e
 800ba02:	4413      	add	r3, r2
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d006      	beq.n	800ba18 <MSC_BOT_CBW_Decode+0x88>
      (hmsc->cbw.bCBLength > 16U))
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	f241 031e 	movw	r3, #4126	; 0x101e
 800ba10:	4413      	add	r3, r2
 800ba12:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ba14:	2b10      	cmp	r3, #16
 800ba16:	d910      	bls.n	800ba3a <MSC_BOT_CBW_Decode+0xaa>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	f241 031d 	movw	r3, #4125	; 0x101d
 800ba1e:	4413      	add	r3, r2
 800ba20:	7819      	ldrb	r1, [r3, #0]
 800ba22:	2320      	movs	r3, #32
 800ba24:	2205      	movs	r2, #5
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fe1a 	bl	800c660 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f8bc 	bl	800bbb0 <MSC_BOT_Abort>
 800ba38:	e046      	b.n	800bac8 <MSC_BOT_CBW_Decode+0x138>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	f241 031d 	movw	r3, #4125	; 0x101d
 800ba40:	4413      	add	r3, r2
 800ba42:	7819      	ldrb	r1, [r3, #0]
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	f241 031f 	movw	r3, #4127	; 0x101f
 800ba4a:	4413      	add	r3, r2
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f912 	bl	800bc78 <SCSI_ProcessCmd>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da0c      	bge.n	800ba74 <MSC_BOT_CBW_Decode+0xe4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	7a1b      	ldrb	r3, [r3, #8]
 800ba5e:	2b05      	cmp	r3, #5
 800ba60:	d104      	bne.n	800ba6c <MSC_BOT_CBW_Decode+0xdc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ba62:	2101      	movs	r1, #1
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f86d 	bl	800bb44 <MSC_BOT_SendCSW>
 800ba6a:	e02d      	b.n	800bac8 <MSC_BOT_CBW_Decode+0x138>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f89f 	bl	800bbb0 <MSC_BOT_Abort>
 800ba72:	e029      	b.n	800bac8 <MSC_BOT_CBW_Decode+0x138>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	7a1b      	ldrb	r3, [r3, #8]
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d024      	beq.n	800bac6 <MSC_BOT_CBW_Decode+0x136>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d020      	beq.n	800bac6 <MSC_BOT_CBW_Decode+0x136>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d01c      	beq.n	800bac6 <MSC_BOT_CBW_Decode+0x136>
    {
      if (hmsc->bot_data_length > 0U)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d009      	beq.n	800baa8 <MSC_BOT_CBW_Decode+0x118>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f103 0110 	add.w	r1, r3, #16
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f817 	bl	800bad4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800baa6:	e00f      	b.n	800bac8 <MSC_BOT_CBW_Decode+0x138>
      }
      else if (hmsc->bot_data_length == 0U)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d104      	bne.n	800baba <MSC_BOT_CBW_Decode+0x12a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bab0:	2100      	movs	r1, #0
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f846 	bl	800bb44 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800bab8:	e006      	b.n	800bac8 <MSC_BOT_CBW_Decode+0x138>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f878 	bl	800bbb0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800bac0:	e002      	b.n	800bac8 <MSC_BOT_CBW_Decode+0x138>
    return;
 800bac2:	bf00      	nop
 800bac4:	e000      	b.n	800bac8 <MSC_BOT_CBW_Decode+0x138>
      }
    }
    else
    {
      return;
 800bac6:	bf00      	nop
    }
  }
}
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	43425355 	.word	0x43425355

0800bad4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bae6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	f241 0318 	movw	r3, #4120	; 0x1018
 800baee:	4413      	add	r3, r2
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	bf28      	it	cs
 800baf8:	4613      	movcs	r3, r2
 800bafa:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d01b      	beq.n	800bb3a <MSC_BOT_SendData+0x66>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	f241 0338 	movw	r3, #4152	; 0x1038
 800bb08:	4413      	add	r3, r2
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	1ad2      	subs	r2, r2, r3
 800bb10:	6979      	ldr	r1, [r7, #20]
 800bb12:	f241 0338 	movw	r3, #4152	; 0x1038
 800bb16:	440b      	add	r3, r1
 800bb18:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	f241 033c 	movw	r3, #4156	; 0x103c
 800bb20:	4413      	add	r3, r2
 800bb22:	2200      	movs	r2, #0
 800bb24:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	2204      	movs	r2, #4
 800bb2a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	2181      	movs	r1, #129	; 0x81
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f003 f916 	bl	800ed64 <USBD_LL_Transmit>
 800bb38:	e000      	b.n	800bb3c <MSC_BOT_SendData+0x68>
    return;
 800bb3a:	bf00      	nop
}
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
	...

0800bb44 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb56:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d021      	beq.n	800bba2 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	f241 0330 	movw	r3, #4144	; 0x1030
 800bb64:	4413      	add	r3, r2
 800bb66:	4a11      	ldr	r2, [pc, #68]	; (800bbac <MSC_BOT_SendCSW+0x68>)
 800bb68:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	f241 033c 	movw	r3, #4156	; 0x103c
 800bb70:	4413      	add	r3, r2
 800bb72:	78fa      	ldrb	r2, [r7, #3]
 800bb74:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f241 0230 	movw	r2, #4144	; 0x1030
 800bb82:	441a      	add	r2, r3
 800bb84:	230d      	movs	r3, #13
 800bb86:	2181      	movs	r1, #129	; 0x81
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f003 f8eb 	bl	800ed64 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f241 0210 	movw	r2, #4112	; 0x1010
 800bb94:	441a      	add	r2, r3
 800bb96:	231f      	movs	r3, #31
 800bb98:	2101      	movs	r1, #1
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f003 f903 	bl	800eda6 <USBD_LL_PrepareReceive>
 800bba0:	e000      	b.n	800bba4 <MSC_BOT_SendCSW+0x60>
    return;
 800bba2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	53425355 	.word	0x53425355

0800bbb0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbbe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d026      	beq.n	800bc14 <MSC_BOT_Abort+0x64>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	f241 031c 	movw	r3, #4124	; 0x101c
 800bbcc:	4413      	add	r3, r2
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10e      	bne.n	800bbf2 <MSC_BOT_Abort+0x42>
      (hmsc->cbw.dDataLength != 0U) &&
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	f241 0318 	movw	r3, #4120	; 0x1018
 800bbda:	4413      	add	r3, r2
 800bbdc:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d007      	beq.n	800bbf2 <MSC_BOT_Abort+0x42>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d103      	bne.n	800bbf2 <MSC_BOT_Abort+0x42>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800bbea:	2101      	movs	r1, #1
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f003 f830 	bl	800ec52 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800bbf2:	2181      	movs	r1, #129	; 0x81
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f003 f82c 	bl	800ec52 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	7a5b      	ldrb	r3, [r3, #9]
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d109      	bne.n	800bc16 <MSC_BOT_Abort+0x66>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800bc02:	2181      	movs	r1, #129	; 0x81
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f003 f824 	bl	800ec52 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f003 f820 	bl	800ec52 <USBD_LL_StallEP>
 800bc12:	e000      	b.n	800bc16 <MSC_BOT_Abort+0x66>
    return;
 800bc14:	bf00      	nop
  }
}
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc2e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d019      	beq.n	800bc6a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	7a5b      	ldrb	r3, [r3, #9]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d108      	bne.n	800bc50 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800bc3e:	2181      	movs	r1, #129	; 0x81
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f003 f806 	bl	800ec52 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800bc46:	2101      	movs	r1, #1
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f003 f802 	bl	800ec52 <USBD_LL_StallEP>
 800bc4e:	e00f      	b.n	800bc70 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800bc50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	da0a      	bge.n	800bc6e <MSC_BOT_CplClrFeature+0x52>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	7a5b      	ldrb	r3, [r3, #9]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d006      	beq.n	800bc6e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800bc60:	2101      	movs	r1, #1
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7ff ff6e 	bl	800bb44 <MSC_BOT_SendCSW>
 800bc68:	e002      	b.n	800bc70 <MSC_BOT_CplClrFeature+0x54>
    return;
 800bc6a:	bf00      	nop
 800bc6c:	e000      	b.n	800bc70 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800bc6e:	bf00      	nop
  }
}
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	460b      	mov	r3, r1
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc8c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d102      	bne.n	800bc9a <SCSI_ProcessCmd+0x22>
  {
    return -1;
 800bc94:	f04f 33ff 	mov.w	r3, #4294967295
 800bc98:	e168      	b.n	800bf6c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	2baa      	cmp	r3, #170	; 0xaa
 800bca0:	f000 8144 	beq.w	800bf2c <SCSI_ProcessCmd+0x2b4>
 800bca4:	2baa      	cmp	r3, #170	; 0xaa
 800bca6:	f300 8153 	bgt.w	800bf50 <SCSI_ProcessCmd+0x2d8>
 800bcaa:	2ba8      	cmp	r3, #168	; 0xa8
 800bcac:	f000 812c 	beq.w	800bf08 <SCSI_ProcessCmd+0x290>
 800bcb0:	2ba8      	cmp	r3, #168	; 0xa8
 800bcb2:	f300 814d 	bgt.w	800bf50 <SCSI_ProcessCmd+0x2d8>
 800bcb6:	2b5a      	cmp	r3, #90	; 0x5a
 800bcb8:	f300 80c0 	bgt.w	800be3c <SCSI_ProcessCmd+0x1c4>
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f2c0 8147 	blt.w	800bf50 <SCSI_ProcessCmd+0x2d8>
 800bcc2:	2b5a      	cmp	r3, #90	; 0x5a
 800bcc4:	f200 8144 	bhi.w	800bf50 <SCSI_ProcessCmd+0x2d8>
 800bcc8:	a201      	add	r2, pc, #4	; (adr r2, 800bcd0 <SCSI_ProcessCmd+0x58>)
 800bcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcce:	bf00      	nop
 800bcd0:	0800be43 	.word	0x0800be43
 800bcd4:	0800bf51 	.word	0x0800bf51
 800bcd8:	0800bf51 	.word	0x0800bf51
 800bcdc:	0800be55 	.word	0x0800be55
 800bce0:	0800bf51 	.word	0x0800bf51
 800bce4:	0800bf51 	.word	0x0800bf51
 800bce8:	0800bf51 	.word	0x0800bf51
 800bcec:	0800bf51 	.word	0x0800bf51
 800bcf0:	0800bf51 	.word	0x0800bf51
 800bcf4:	0800bf51 	.word	0x0800bf51
 800bcf8:	0800bf51 	.word	0x0800bf51
 800bcfc:	0800bf51 	.word	0x0800bf51
 800bd00:	0800bf51 	.word	0x0800bf51
 800bd04:	0800bf51 	.word	0x0800bf51
 800bd08:	0800bf51 	.word	0x0800bf51
 800bd0c:	0800bf51 	.word	0x0800bf51
 800bd10:	0800bf51 	.word	0x0800bf51
 800bd14:	0800bf51 	.word	0x0800bf51
 800bd18:	0800be67 	.word	0x0800be67
 800bd1c:	0800bf51 	.word	0x0800bf51
 800bd20:	0800bf51 	.word	0x0800bf51
 800bd24:	0800bf51 	.word	0x0800bf51
 800bd28:	0800bf51 	.word	0x0800bf51
 800bd2c:	0800bf51 	.word	0x0800bf51
 800bd30:	0800bf51 	.word	0x0800bf51
 800bd34:	0800bf51 	.word	0x0800bf51
 800bd38:	0800be9d 	.word	0x0800be9d
 800bd3c:	0800be79 	.word	0x0800be79
 800bd40:	0800bf51 	.word	0x0800bf51
 800bd44:	0800bf51 	.word	0x0800bf51
 800bd48:	0800be8b 	.word	0x0800be8b
 800bd4c:	0800bf51 	.word	0x0800bf51
 800bd50:	0800bf51 	.word	0x0800bf51
 800bd54:	0800bf51 	.word	0x0800bf51
 800bd58:	0800bf51 	.word	0x0800bf51
 800bd5c:	0800bec1 	.word	0x0800bec1
 800bd60:	0800bf51 	.word	0x0800bf51
 800bd64:	0800bed3 	.word	0x0800bed3
 800bd68:	0800bf51 	.word	0x0800bf51
 800bd6c:	0800bf51 	.word	0x0800bf51
 800bd70:	0800bef7 	.word	0x0800bef7
 800bd74:	0800bf51 	.word	0x0800bf51
 800bd78:	0800bf1b 	.word	0x0800bf1b
 800bd7c:	0800bf51 	.word	0x0800bf51
 800bd80:	0800bf51 	.word	0x0800bf51
 800bd84:	0800bf51 	.word	0x0800bf51
 800bd88:	0800bf51 	.word	0x0800bf51
 800bd8c:	0800bf3f 	.word	0x0800bf3f
 800bd90:	0800bf51 	.word	0x0800bf51
 800bd94:	0800bf51 	.word	0x0800bf51
 800bd98:	0800bf51 	.word	0x0800bf51
 800bd9c:	0800bf51 	.word	0x0800bf51
 800bda0:	0800bf51 	.word	0x0800bf51
 800bda4:	0800bf51 	.word	0x0800bf51
 800bda8:	0800bf51 	.word	0x0800bf51
 800bdac:	0800bf51 	.word	0x0800bf51
 800bdb0:	0800bf51 	.word	0x0800bf51
 800bdb4:	0800bf51 	.word	0x0800bf51
 800bdb8:	0800bf51 	.word	0x0800bf51
 800bdbc:	0800bf51 	.word	0x0800bf51
 800bdc0:	0800bf51 	.word	0x0800bf51
 800bdc4:	0800bf51 	.word	0x0800bf51
 800bdc8:	0800bf51 	.word	0x0800bf51
 800bdcc:	0800bf51 	.word	0x0800bf51
 800bdd0:	0800bf51 	.word	0x0800bf51
 800bdd4:	0800bf51 	.word	0x0800bf51
 800bdd8:	0800bf51 	.word	0x0800bf51
 800bddc:	0800bf51 	.word	0x0800bf51
 800bde0:	0800bf51 	.word	0x0800bf51
 800bde4:	0800bf51 	.word	0x0800bf51
 800bde8:	0800bf51 	.word	0x0800bf51
 800bdec:	0800bf51 	.word	0x0800bf51
 800bdf0:	0800bf51 	.word	0x0800bf51
 800bdf4:	0800bf51 	.word	0x0800bf51
 800bdf8:	0800bf51 	.word	0x0800bf51
 800bdfc:	0800bf51 	.word	0x0800bf51
 800be00:	0800bf51 	.word	0x0800bf51
 800be04:	0800bf51 	.word	0x0800bf51
 800be08:	0800bf51 	.word	0x0800bf51
 800be0c:	0800bf51 	.word	0x0800bf51
 800be10:	0800bf51 	.word	0x0800bf51
 800be14:	0800bf51 	.word	0x0800bf51
 800be18:	0800bf51 	.word	0x0800bf51
 800be1c:	0800bf51 	.word	0x0800bf51
 800be20:	0800bf51 	.word	0x0800bf51
 800be24:	0800bf51 	.word	0x0800bf51
 800be28:	0800bf51 	.word	0x0800bf51
 800be2c:	0800bf51 	.word	0x0800bf51
 800be30:	0800bf51 	.word	0x0800bf51
 800be34:	0800bf51 	.word	0x0800bf51
 800be38:	0800beaf 	.word	0x0800beaf
 800be3c:	2b9e      	cmp	r3, #158	; 0x9e
 800be3e:	d051      	beq.n	800bee4 <SCSI_ProcessCmd+0x26c>
 800be40:	e086      	b.n	800bf50 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800be42:	7afb      	ldrb	r3, [r7, #11]
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	4619      	mov	r1, r3
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f000 f893 	bl	800bf74 <SCSI_TestUnitReady>
 800be4e:	4603      	mov	r3, r0
 800be50:	75fb      	strb	r3, [r7, #23]
      break;
 800be52:	e089      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800be54:	7afb      	ldrb	r3, [r7, #11]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	4619      	mov	r1, r3
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f000 fb70 	bl	800c540 <SCSI_RequestSense>
 800be60:	4603      	mov	r3, r0
 800be62:	75fb      	strb	r3, [r7, #23]
      break;
 800be64:	e080      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800be66:	7afb      	ldrb	r3, [r7, #11]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	4619      	mov	r1, r3
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f000 f8d7 	bl	800c020 <SCSI_Inquiry>
 800be72:	4603      	mov	r3, r0
 800be74:	75fb      	strb	r3, [r7, #23]
      break;
 800be76:	e077      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	4619      	mov	r1, r3
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f000 fc47 	bl	800c712 <SCSI_StartStopUnit>
 800be84:	4603      	mov	r3, r0
 800be86:	75fb      	strb	r3, [r7, #23]
      break;
 800be88:	e06e      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800be8a:	7afb      	ldrb	r3, [r7, #11]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	4619      	mov	r1, r3
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 fc97 	bl	800c7c4 <SCSI_AllowPreventRemovable>
 800be96:	4603      	mov	r3, r0
 800be98:	75fb      	strb	r3, [r7, #23]
      break;
 800be9a:	e065      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800be9c:	7afb      	ldrb	r3, [r7, #11]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	4619      	mov	r1, r3
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 faf4 	bl	800c490 <SCSI_ModeSense6>
 800bea8:	4603      	mov	r3, r0
 800beaa:	75fb      	strb	r3, [r7, #23]
      break;
 800beac:	e05c      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800beae:	7afb      	ldrb	r3, [r7, #11]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	4619      	mov	r1, r3
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 fb17 	bl	800c4e8 <SCSI_ModeSense10>
 800beba:	4603      	mov	r3, r0
 800bebc:	75fb      	strb	r3, [r7, #23]
      break;
 800bebe:	e053      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800bec0:	7afb      	ldrb	r3, [r7, #11]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	4619      	mov	r1, r3
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 fa6d 	bl	800c3a6 <SCSI_ReadFormatCapacity>
 800becc:	4603      	mov	r3, r0
 800bece:	75fb      	strb	r3, [r7, #23]
      break;
 800bed0:	e04a      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800bed2:	7afb      	ldrb	r3, [r7, #11]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	4619      	mov	r1, r3
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f000 f91b 	bl	800c114 <SCSI_ReadCapacity10>
 800bede:	4603      	mov	r3, r0
 800bee0:	75fb      	strb	r3, [r7, #23]
      break;
 800bee2:	e041      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800bee4:	7afb      	ldrb	r3, [r7, #11]
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	4619      	mov	r1, r3
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f000 f99c 	bl	800c228 <SCSI_ReadCapacity16>
 800bef0:	4603      	mov	r3, r0
 800bef2:	75fb      	strb	r3, [r7, #23]
      break;
 800bef4:	e038      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800bef6:	7afb      	ldrb	r3, [r7, #11]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	4619      	mov	r1, r3
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f000 fc8e 	bl	800c81e <SCSI_Read10>
 800bf02:	4603      	mov	r3, r0
 800bf04:	75fb      	strb	r3, [r7, #23]
      break;
 800bf06:	e02f      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800bf08:	7afb      	ldrb	r3, [r7, #11]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 fd3d 	bl	800c98e <SCSI_Read12>
 800bf14:	4603      	mov	r3, r0
 800bf16:	75fb      	strb	r3, [r7, #23]
      break;
 800bf18:	e026      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800bf1a:	7afb      	ldrb	r3, [r7, #11]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 fdf6 	bl	800cb12 <SCSI_Write10>
 800bf26:	4603      	mov	r3, r0
 800bf28:	75fb      	strb	r3, [r7, #23]
      break;
 800bf2a:	e01d      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800bf2c:	7afb      	ldrb	r3, [r7, #11]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	4619      	mov	r1, r3
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 fecb 	bl	800ccce <SCSI_Write12>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf3c:	e014      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800bf3e:	7afb      	ldrb	r3, [r7, #11]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	4619      	mov	r1, r3
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 ffb0 	bl	800ceaa <SCSI_Verify10>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf4e:	e00b      	b.n	800bf68 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800bf50:	7af9      	ldrb	r1, [r7, #11]
 800bf52:	2320      	movs	r3, #32
 800bf54:	2205      	movs	r2, #5
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	f000 fb82 	bl	800c660 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800bf62:	23ff      	movs	r3, #255	; 0xff
 800bf64:	75fb      	strb	r3, [r7, #23]
      break;
 800bf66:	bf00      	nop
  }

  return ret;
 800bf68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf88:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 800bf90:	f04f 33ff 	mov.w	r3, #4294967295
 800bf94:	e040      	b.n	800c018 <SCSI_TestUnitReady+0xa4>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	f241 0318 	movw	r3, #4120	; 0x1018
 800bf9c:	4413      	add	r3, r2
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00c      	beq.n	800bfbe <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	f241 031d 	movw	r3, #4125	; 0x101d
 800bfaa:	4413      	add	r3, r2
 800bfac:	7819      	ldrb	r1, [r3, #0]
 800bfae:	2320      	movs	r3, #32
 800bfb0:	2205      	movs	r2, #5
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f000 fb54 	bl	800c660 <SCSI_SenseCode>

    return -1;
 800bfb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfbc:	e02c      	b.n	800c018 <SCSI_TestUnitReady+0xa4>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	f241 0362 	movw	r3, #4194	; 0x1062
 800bfc4:	4413      	add	r3, r2
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	d10b      	bne.n	800bfe4 <SCSI_TestUnitReady+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bfcc:	7af9      	ldrb	r1, [r7, #11]
 800bfce:	233a      	movs	r3, #58	; 0x3a
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 fb44 	bl	800c660 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	2205      	movs	r2, #5
 800bfdc:	721a      	strb	r2, [r3, #8]
    return -1;
 800bfde:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe2:	e019      	b.n	800c018 <SCSI_TestUnitReady+0xa4>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	7afa      	ldrb	r2, [r7, #11]
 800bfee:	4610      	mov	r0, r2
 800bff0:	4798      	blx	r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00b      	beq.n	800c010 <SCSI_TestUnitReady+0x9c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bff8:	7af9      	ldrb	r1, [r7, #11]
 800bffa:	233a      	movs	r3, #58	; 0x3a
 800bffc:	2202      	movs	r2, #2
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f000 fb2e 	bl	800c660 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2205      	movs	r2, #5
 800c008:	721a      	strb	r2, [r3, #8]

    return -1;
 800c00a:	f04f 33ff 	mov.w	r3, #4294967295
 800c00e:	e003      	b.n	800c018 <SCSI_TestUnitReady+0xa4>
  }
  hmsc->bot_data_length = 0U;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	2200      	movs	r2, #0
 800c014:	60da      	str	r2, [r3, #12]

  return 0;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	460b      	mov	r3, r1
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c034:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d102      	bne.n	800c042 <SCSI_Inquiry+0x22>
  {
    return -1;
 800c03c:	f04f 33ff 	mov.w	r3, #4294967295
 800c040:	e060      	b.n	800c104 <SCSI_Inquiry+0xe4>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	f241 0318 	movw	r3, #4120	; 0x1018
 800c048:	4413      	add	r3, r2
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10c      	bne.n	800c06a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c050:	69ba      	ldr	r2, [r7, #24]
 800c052:	f241 031d 	movw	r3, #4125	; 0x101d
 800c056:	4413      	add	r3, r2
 800c058:	7819      	ldrb	r1, [r3, #0]
 800c05a:	2320      	movs	r3, #32
 800c05c:	2205      	movs	r2, #5
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 fafe 	bl	800c660 <SCSI_SenseCode>
    return -1;
 800c064:	f04f 33ff 	mov.w	r3, #4294967295
 800c068:	e04c      	b.n	800c104 <SCSI_Inquiry+0xe4>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3301      	adds	r3, #1
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d022      	beq.n	800c0be <SCSI_Inquiry+0x9e>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3302      	adds	r3, #2
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d105      	bne.n	800c08e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800c082:	2206      	movs	r2, #6
 800c084:	4921      	ldr	r1, [pc, #132]	; (800c10c <SCSI_Inquiry+0xec>)
 800c086:	69b8      	ldr	r0, [r7, #24]
 800c088:	f001 f8b3 	bl	800d1f2 <SCSI_UpdateBotData>
 800c08c:	e039      	b.n	800c102 <SCSI_Inquiry+0xe2>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	3302      	adds	r3, #2
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b80      	cmp	r3, #128	; 0x80
 800c096:	d105      	bne.n	800c0a4 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800c098:	2208      	movs	r2, #8
 800c09a:	491d      	ldr	r1, [pc, #116]	; (800c110 <SCSI_Inquiry+0xf0>)
 800c09c:	69b8      	ldr	r0, [r7, #24]
 800c09e:	f001 f8a8 	bl	800d1f2 <SCSI_UpdateBotData>
 800c0a2:	e02e      	b.n	800c102 <SCSI_Inquiry+0xe2>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800c0a4:	69ba      	ldr	r2, [r7, #24]
 800c0a6:	f241 031d 	movw	r3, #4125	; 0x101d
 800c0aa:	4413      	add	r3, r2
 800c0ac:	7819      	ldrb	r1, [r3, #0]
 800c0ae:	2324      	movs	r3, #36	; 0x24
 800c0b0:	2205      	movs	r2, #5
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f000 fad4 	bl	800c660 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800c0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0bc:	e022      	b.n	800c104 <SCSI_Inquiry+0xe4>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0c4:	69d9      	ldr	r1, [r3, #28]
 800c0c6:	7afa      	ldrb	r2, [r7, #11]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	4413      	add	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	440b      	add	r3, r1
 800c0d2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3305      	adds	r3, #5
 800c0de:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	8bfa      	ldrh	r2, [r7, #30]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d303      	bcc.n	800c0f6 <SCSI_Inquiry+0xd6>
    {
      len = params[4];
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800c0f6:	8bfb      	ldrh	r3, [r7, #30]
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	6979      	ldr	r1, [r7, #20]
 800c0fc:	69b8      	ldr	r0, [r7, #24]
 800c0fe:	f001 f878 	bl	800d1f2 <SCSI_UpdateBotData>
  }

  return 0;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3720      	adds	r7, #32
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	240000b4 	.word	0x240000b4
 800c110:	240000bc 	.word	0x240000bc

0800c114 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c114:	b590      	push	{r4, r7, lr}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	460b      	mov	r3, r1
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c128:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 800c130:	f04f 33ff 	mov.w	r3, #4294967295
 800c134:	e074      	b.n	800c220 <SCSI_ReadCapacity10+0x10c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c13c:	685c      	ldr	r4, [r3, #4]
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	f241 0368 	movw	r3, #4200	; 0x1068
 800c144:	4413      	add	r3, r2
 800c146:	6979      	ldr	r1, [r7, #20]
 800c148:	f241 0264 	movw	r2, #4196	; 0x1064
 800c14c:	440a      	add	r2, r1
 800c14e:	7af8      	ldrb	r0, [r7, #11]
 800c150:	4619      	mov	r1, r3
 800c152:	47a0      	blx	r4
 800c154:	4603      	mov	r3, r0
 800c156:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c158:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d106      	bne.n	800c16e <SCSI_ReadCapacity10+0x5a>
 800c160:	697a      	ldr	r2, [r7, #20]
 800c162:	f241 0362 	movw	r3, #4194	; 0x1062
 800c166:	4413      	add	r3, r2
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d108      	bne.n	800c180 <SCSI_ReadCapacity10+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c16e:	7af9      	ldrb	r1, [r7, #11]
 800c170:	233a      	movs	r3, #58	; 0x3a
 800c172:	2202      	movs	r2, #2
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 fa73 	bl	800c660 <SCSI_SenseCode>
    return -1;
 800c17a:	f04f 33ff 	mov.w	r3, #4294967295
 800c17e:	e04f      	b.n	800c220 <SCSI_ReadCapacity10+0x10c>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	f241 0368 	movw	r3, #4200	; 0x1068
 800c186:	4413      	add	r3, r2
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	0e1b      	lsrs	r3, r3, #24
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	f241 0368 	movw	r3, #4200	; 0x1068
 800c19a:	4413      	add	r3, r2
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	0c1b      	lsrs	r3, r3, #16
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c1a8:	697a      	ldr	r2, [r7, #20]
 800c1aa:	f241 0368 	movw	r3, #4200	; 0x1068
 800c1ae:	4413      	add	r3, r2
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	0a1b      	lsrs	r3, r3, #8
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	f241 0368 	movw	r3, #4200	; 0x1068
 800c1c2:	4413      	add	r3, r2
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	b2da      	uxtb	r2, r3
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	f241 0364 	movw	r3, #4196	; 0x1064
 800c1d6:	4413      	add	r3, r2
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	161b      	asrs	r3, r3, #24
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	f241 0364 	movw	r3, #4196	; 0x1064
 800c1e8:	4413      	add	r3, r2
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	141b      	asrs	r3, r3, #16
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	f241 0364 	movw	r3, #4196	; 0x1064
 800c1fa:	4413      	add	r3, r2
 800c1fc:	881b      	ldrh	r3, [r3, #0]
 800c1fe:	0a1b      	lsrs	r3, r3, #8
 800c200:	b29b      	uxth	r3, r3
 800c202:	b2da      	uxtb	r2, r3
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	f241 0364 	movw	r3, #4196	; 0x1064
 800c20e:	4413      	add	r3, r2
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	b2da      	uxtb	r2, r3
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	2208      	movs	r2, #8
 800c21c:	60da      	str	r2, [r3, #12]

  return 0;
 800c21e:	2300      	movs	r3, #0

}
 800c220:	4618      	mov	r0, r3
 800c222:	371c      	adds	r7, #28
 800c224:	46bd      	mov	sp, r7
 800c226:	bd90      	pop	{r4, r7, pc}

0800c228 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c228:	b590      	push	{r4, r7, lr}
 800c22a:	b089      	sub	sp, #36	; 0x24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	460b      	mov	r3, r1
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c23c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d102      	bne.n	800c24a <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800c244:	f04f 33ff 	mov.w	r3, #4294967295
 800c248:	e0a9      	b.n	800c39e <SCSI_ReadCapacity16+0x176>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c250:	685c      	ldr	r4, [r3, #4]
 800c252:	69ba      	ldr	r2, [r7, #24]
 800c254:	f241 0368 	movw	r3, #4200	; 0x1068
 800c258:	4413      	add	r3, r2
 800c25a:	69b9      	ldr	r1, [r7, #24]
 800c25c:	f241 0264 	movw	r2, #4196	; 0x1064
 800c260:	440a      	add	r2, r1
 800c262:	7af8      	ldrb	r0, [r7, #11]
 800c264:	4619      	mov	r1, r3
 800c266:	47a0      	blx	r4
 800c268:	4603      	mov	r3, r0
 800c26a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c26c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d106      	bne.n	800c282 <SCSI_ReadCapacity16+0x5a>
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	f241 0362 	movw	r3, #4194	; 0x1062
 800c27a:	4413      	add	r3, r2
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d108      	bne.n	800c294 <SCSI_ReadCapacity16+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c282:	7af9      	ldrb	r1, [r7, #11]
 800c284:	233a      	movs	r3, #58	; 0x3a
 800c286:	2202      	movs	r2, #2
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f000 f9e9 	bl	800c660 <SCSI_SenseCode>
    return -1;
 800c28e:	f04f 33ff 	mov.w	r3, #4294967295
 800c292:	e084      	b.n	800c39e <SCSI_ReadCapacity16+0x176>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	330a      	adds	r3, #10
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	330b      	adds	r3, #11
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c2a4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	330c      	adds	r3, #12
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c2ae:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	320d      	adds	r2, #13
 800c2b4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c2b6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c2bc:	2300      	movs	r3, #0
 800c2be:	77fb      	strb	r3, [r7, #31]
 800c2c0:	e007      	b.n	800c2d2 <SCSI_ReadCapacity16+0xaa>
  {
    hmsc->bot_data[idx] = 0U;
 800c2c2:	7ffb      	ldrb	r3, [r7, #31]
 800c2c4:	69ba      	ldr	r2, [r7, #24]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800c2cc:	7ffb      	ldrb	r3, [r7, #31]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	77fb      	strb	r3, [r7, #31]
 800c2d2:	7ffa      	ldrb	r2, [r7, #31]
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d3f2      	bcc.n	800c2c2 <SCSI_ReadCapacity16+0x9a>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800c2dc:	69ba      	ldr	r2, [r7, #24]
 800c2de:	f241 0368 	movw	r3, #4200	; 0x1068
 800c2e2:	4413      	add	r3, r2
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	0e1b      	lsrs	r3, r3, #24
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800c2f0:	69ba      	ldr	r2, [r7, #24]
 800c2f2:	f241 0368 	movw	r3, #4200	; 0x1068
 800c2f6:	4413      	add	r3, r2
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	0c1b      	lsrs	r3, r3, #16
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800c304:	69ba      	ldr	r2, [r7, #24]
 800c306:	f241 0368 	movw	r3, #4200	; 0x1068
 800c30a:	4413      	add	r3, r2
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3b01      	subs	r3, #1
 800c310:	0a1b      	lsrs	r3, r3, #8
 800c312:	b2da      	uxtb	r2, r3
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800c318:	69ba      	ldr	r2, [r7, #24]
 800c31a:	f241 0368 	movw	r3, #4200	; 0x1068
 800c31e:	4413      	add	r3, r2
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	3b01      	subs	r3, #1
 800c326:	b2da      	uxtb	r2, r3
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800c32c:	69ba      	ldr	r2, [r7, #24]
 800c32e:	f241 0364 	movw	r3, #4196	; 0x1064
 800c332:	4413      	add	r3, r2
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	161b      	asrs	r3, r3, #24
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800c33e:	69ba      	ldr	r2, [r7, #24]
 800c340:	f241 0364 	movw	r3, #4196	; 0x1064
 800c344:	4413      	add	r3, r2
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	141b      	asrs	r3, r3, #16
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800c350:	69ba      	ldr	r2, [r7, #24]
 800c352:	f241 0364 	movw	r3, #4196	; 0x1064
 800c356:	4413      	add	r3, r2
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	0a1b      	lsrs	r3, r3, #8
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	b2da      	uxtb	r2, r3
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800c364:	69ba      	ldr	r2, [r7, #24]
 800c366:	f241 0364 	movw	r3, #4196	; 0x1064
 800c36a:	4413      	add	r3, r2
 800c36c:	881b      	ldrh	r3, [r3, #0]
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	330a      	adds	r3, #10
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	330b      	adds	r3, #11
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c384:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	330c      	adds	r3, #12
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800c38e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	320d      	adds	r2, #13
 800c394:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800c396:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	60da      	str	r2, [r3, #12]

  return 0;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3724      	adds	r7, #36	; 0x24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd90      	pop	{r4, r7, pc}

0800c3a6 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b088      	sub	sp, #32
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	60f8      	str	r0, [r7, #12]
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	607a      	str	r2, [r7, #4]
 800c3b2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3ba:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d102      	bne.n	800c3c8 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 800c3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c6:	e05e      	b.n	800c486 <SCSI_ReadFormatCapacity+0xe0>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f107 0214 	add.w	r2, r7, #20
 800c3d4:	f107 0110 	add.w	r1, r7, #16
 800c3d8:	7af8      	ldrb	r0, [r7, #11]
 800c3da:	4798      	blx	r3
 800c3dc:	4603      	mov	r3, r0
 800c3de:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800c3e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d106      	bne.n	800c3f6 <SCSI_ReadFormatCapacity+0x50>
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	f241 0362 	movw	r3, #4194	; 0x1062
 800c3ee:	4413      	add	r3, r2
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d108      	bne.n	800c408 <SCSI_ReadFormatCapacity+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c3f6:	7af9      	ldrb	r1, [r7, #11]
 800c3f8:	233a      	movs	r3, #58	; 0x3a
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f000 f92f 	bl	800c660 <SCSI_SenseCode>
    return -1;
 800c402:	f04f 33ff 	mov.w	r3, #4294967295
 800c406:	e03e      	b.n	800c486 <SCSI_ReadFormatCapacity+0xe0>
  }

  for (i = 0U; i < 12U ; i++)
 800c408:	2300      	movs	r3, #0
 800c40a:	83fb      	strh	r3, [r7, #30]
 800c40c:	e007      	b.n	800c41e <SCSI_ReadFormatCapacity+0x78>
  {
    hmsc->bot_data[i] = 0U;
 800c40e:	8bfb      	ldrh	r3, [r7, #30]
 800c410:	69ba      	ldr	r2, [r7, #24]
 800c412:	4413      	add	r3, r2
 800c414:	2200      	movs	r2, #0
 800c416:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800c418:	8bfb      	ldrh	r3, [r7, #30]
 800c41a:	3301      	adds	r3, #1
 800c41c:	83fb      	strh	r3, [r7, #30]
 800c41e:	8bfb      	ldrh	r3, [r7, #30]
 800c420:	2b0b      	cmp	r3, #11
 800c422:	d9f4      	bls.n	800c40e <SCSI_ReadFormatCapacity+0x68>
  }

  hmsc->bot_data[3] = 0x08U;
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	2208      	movs	r2, #8
 800c428:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	0e1b      	lsrs	r3, r3, #24
 800c430:	b2da      	uxtb	r2, r3
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	3b01      	subs	r3, #1
 800c43a:	0c1b      	lsrs	r3, r3, #16
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	3b01      	subs	r3, #1
 800c446:	0a1b      	lsrs	r3, r3, #8
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	b2db      	uxtb	r3, r3
 800c452:	3b01      	subs	r3, #1
 800c454:	b2da      	uxtb	r2, r3
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	2202      	movs	r2, #2
 800c45e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c460:	8abb      	ldrh	r3, [r7, #20]
 800c462:	141b      	asrs	r3, r3, #16
 800c464:	b2da      	uxtb	r2, r3
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c46a:	8abb      	ldrh	r3, [r7, #20]
 800c46c:	0a1b      	lsrs	r3, r3, #8
 800c46e:	b29b      	uxth	r3, r3
 800c470:	b2da      	uxtb	r2, r3
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c476:	8abb      	ldrh	r3, [r7, #20]
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	220c      	movs	r2, #12
 800c482:	60da      	str	r2, [r3, #12]

  return 0;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3720      	adds	r7, #32
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
	...

0800c490 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	460b      	mov	r3, r1
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4a4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c4a6:	2317      	movs	r3, #23
 800c4a8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d102      	bne.n	800c4b6 <SCSI_ModeSense6+0x26>
  {
    return -1;
 800c4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b4:	e011      	b.n	800c4da <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	8afa      	ldrh	r2, [r7, #22]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d303      	bcc.n	800c4cc <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c4cc:	8afb      	ldrh	r3, [r7, #22]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	4904      	ldr	r1, [pc, #16]	; (800c4e4 <SCSI_ModeSense6+0x54>)
 800c4d2:	6938      	ldr	r0, [r7, #16]
 800c4d4:	f000 fe8d 	bl	800d1f2 <SCSI_UpdateBotData>

  return 0;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	240000c4 	.word	0x240000c4

0800c4e8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	607a      	str	r2, [r7, #4]
 800c4f4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4fc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c4fe:	231b      	movs	r3, #27
 800c500:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <SCSI_ModeSense10+0x26>
  {
    return -1;
 800c508:	f04f 33ff 	mov.w	r3, #4294967295
 800c50c:	e011      	b.n	800c532 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	3308      	adds	r3, #8
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	b29b      	uxth	r3, r3
 800c516:	8afa      	ldrh	r2, [r7, #22]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d303      	bcc.n	800c524 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3308      	adds	r3, #8
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c524:	8afb      	ldrh	r3, [r7, #22]
 800c526:	461a      	mov	r2, r3
 800c528:	4904      	ldr	r1, [pc, #16]	; (800c53c <SCSI_ModeSense10+0x54>)
 800c52a:	6938      	ldr	r0, [r7, #16]
 800c52c:	f000 fe61 	bl	800d1f2 <SCSI_UpdateBotData>

  return 0;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3718      	adds	r7, #24
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	240000dc 	.word	0x240000dc

0800c540 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	460b      	mov	r3, r1
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c554:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <SCSI_RequestSense+0x22>
  {
    return -1;
 800c55c:	f04f 33ff 	mov.w	r3, #4294967295
 800c560:	e07a      	b.n	800c658 <SCSI_RequestSense+0x118>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c562:	693a      	ldr	r2, [r7, #16]
 800c564:	f241 0318 	movw	r3, #4120	; 0x1018
 800c568:	4413      	add	r3, r2
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10c      	bne.n	800c58a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	f241 031d 	movw	r3, #4125	; 0x101d
 800c576:	4413      	add	r3, r2
 800c578:	7819      	ldrb	r1, [r3, #0]
 800c57a:	2320      	movs	r3, #32
 800c57c:	2205      	movs	r2, #5
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f000 f86e 	bl	800c660 <SCSI_SenseCode>
    return -1;
 800c584:	f04f 33ff 	mov.w	r3, #4294967295
 800c588:	e066      	b.n	800c658 <SCSI_RequestSense+0x118>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c58a:	2300      	movs	r3, #0
 800c58c:	75fb      	strb	r3, [r7, #23]
 800c58e:	e007      	b.n	800c5a0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800c590:	7dfb      	ldrb	r3, [r7, #23]
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	4413      	add	r3, r2
 800c596:	2200      	movs	r2, #0
 800c598:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c59a:	7dfb      	ldrb	r3, [r7, #23]
 800c59c:	3301      	adds	r3, #1
 800c59e:	75fb      	strb	r3, [r7, #23]
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	2b11      	cmp	r3, #17
 800c5a4:	d9f4      	bls.n	800c590 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2270      	movs	r2, #112	; 0x70
 800c5aa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	220c      	movs	r2, #12
 800c5b0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800c5b8:	781a      	ldrb	r2, [r3, #0]
 800c5ba:	6939      	ldr	r1, [r7, #16]
 800c5bc:	f241 0361 	movw	r3, #4193	; 0x1061
 800c5c0:	440b      	add	r3, r1
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d038      	beq.n	800c63a <SCSI_RequestSense+0xfa>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800c5d8:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	4413      	add	r3, r2
 800c5f2:	791a      	ldrb	r2, [r3, #4]
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	4413      	add	r3, r2
 800c60a:	795a      	ldrb	r2, [r3, #5]
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800c622:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b04      	cmp	r3, #4
 800c62e:	d104      	bne.n	800c63a <SCSI_RequestSense+0xfa>
    {
      hmsc->scsi_sense_head = 0U;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800c636:	2200      	movs	r2, #0
 800c638:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2212      	movs	r2, #18
 800c63e:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	3304      	adds	r3, #4
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	2b12      	cmp	r3, #18
 800c648:	d805      	bhi.n	800c656 <SCSI_RequestSense+0x116>
  {
    hmsc->bot_data_length = params[4];
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	3304      	adds	r3, #4
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	461a      	mov	r2, r3
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	4608      	mov	r0, r1
 800c66a:	4611      	mov	r1, r2
 800c66c:	461a      	mov	r2, r3
 800c66e:	4603      	mov	r3, r0
 800c670:	70fb      	strb	r3, [r7, #3]
 800c672:	460b      	mov	r3, r1
 800c674:	70bb      	strb	r3, [r7, #2]
 800c676:	4613      	mov	r3, r2
 800c678:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c680:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d03e      	beq.n	800c706 <SCSI_SenseCode+0xa6>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	f241 0361 	movw	r3, #4193	; 0x1061
 800c68e:	4413      	add	r3, r2
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	461a      	mov	r2, r3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f502 7202 	add.w	r2, r2, #520	; 0x208
 800c69a:	78b9      	ldrb	r1, [r7, #2]
 800c69c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	f241 0361 	movw	r3, #4193	; 0x1061
 800c6a6:	4413      	add	r3, r2
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c6b0:	00db      	lsls	r3, r3, #3
 800c6b2:	4413      	add	r3, r2
 800c6b4:	787a      	ldrb	r2, [r7, #1]
 800c6b6:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	f241 0361 	movw	r3, #4193	; 0x1061
 800c6be:	4413      	add	r3, r2
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	4413      	add	r3, r2
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	f241 0361 	movw	r3, #4193	; 0x1061
 800c6d6:	4413      	add	r3, r2
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	b2d9      	uxtb	r1, r3
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	f241 0361 	movw	r3, #4193	; 0x1061
 800c6e4:	4413      	add	r3, r2
 800c6e6:	460a      	mov	r2, r1
 800c6e8:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	f241 0361 	movw	r3, #4193	; 0x1061
 800c6f0:	4413      	add	r3, r2
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b04      	cmp	r3, #4
 800c6f6:	d107      	bne.n	800c708 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	f241 0361 	movw	r3, #4193	; 0x1061
 800c6fe:	4413      	add	r3, r2
 800c700:	2200      	movs	r2, #0
 800c702:	701a      	strb	r2, [r3, #0]
 800c704:	e000      	b.n	800c708 <SCSI_SenseCode+0xa8>
    return;
 800c706:	bf00      	nop
  }
}
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b086      	sub	sp, #24
 800c716:	af00      	add	r7, sp, #0
 800c718:	60f8      	str	r0, [r7, #12]
 800c71a:	460b      	mov	r3, r1
 800c71c:	607a      	str	r2, [r7, #4]
 800c71e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c726:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d102      	bne.n	800c734 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 800c72e:	f04f 33ff 	mov.w	r3, #4294967295
 800c732:	e043      	b.n	800c7bc <SCSI_StartStopUnit+0xaa>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800c734:	697a      	ldr	r2, [r7, #20]
 800c736:	f241 0362 	movw	r3, #4194	; 0x1062
 800c73a:	4413      	add	r3, r2
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d10f      	bne.n	800c762 <SCSI_StartStopUnit+0x50>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3304      	adds	r3, #4
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	f003 0303 	and.w	r3, r3, #3
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d108      	bne.n	800c762 <SCSI_StartStopUnit+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c750:	7af9      	ldrb	r1, [r7, #11]
 800c752:	2324      	movs	r3, #36	; 0x24
 800c754:	2205      	movs	r2, #5
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff ff82 	bl	800c660 <SCSI_SenseCode>

    return -1;
 800c75c:	f04f 33ff 	mov.w	r3, #4294967295
 800c760:	e02c      	b.n	800c7bc <SCSI_StartStopUnit+0xaa>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3304      	adds	r3, #4
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	f003 0303 	and.w	r3, r3, #3
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d106      	bne.n	800c77e <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	f241 0362 	movw	r3, #4194	; 0x1062
 800c776:	4413      	add	r3, r2
 800c778:	2200      	movs	r2, #0
 800c77a:	701a      	strb	r2, [r3, #0]
 800c77c:	e01a      	b.n	800c7b4 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	3304      	adds	r3, #4
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d106      	bne.n	800c79a <SCSI_StartStopUnit+0x88>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	f241 0362 	movw	r3, #4194	; 0x1062
 800c792:	4413      	add	r3, r2
 800c794:	2202      	movs	r2, #2
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	e00c      	b.n	800c7b4 <SCSI_StartStopUnit+0xa2>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	3304      	adds	r3, #4
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	f003 0303 	and.w	r3, r3, #3
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d105      	bne.n	800c7b4 <SCSI_StartStopUnit+0xa2>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	f241 0362 	movw	r3, #4194	; 0x1062
 800c7ae:	4413      	add	r3, r2
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	60da      	str	r2, [r3, #12]

  return 0;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3718      	adds	r7, #24
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800c7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e4:	e015      	b.n	800c812 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d106      	bne.n	800c7fe <SCSI_AllowPreventRemovable+0x3a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	f241 0362 	movw	r3, #4194	; 0x1062
 800c7f6:	4413      	add	r3, r2
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	701a      	strb	r2, [r3, #0]
 800c7fc:	e005      	b.n	800c80a <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	f241 0362 	movw	r3, #4194	; 0x1062
 800c804:	4413      	add	r3, r2
 800c806:	2201      	movs	r2, #1
 800c808:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2200      	movs	r2, #0
 800c80e:	60da      	str	r2, [r3, #12]

  return 0;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	371c      	adds	r7, #28
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b086      	sub	sp, #24
 800c822:	af00      	add	r7, sp, #0
 800c824:	60f8      	str	r0, [r7, #12]
 800c826:	460b      	mov	r3, r1
 800c828:	607a      	str	r2, [r7, #4]
 800c82a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c832:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d102      	bne.n	800c840 <SCSI_Read10+0x22>
  {
    return -1;
 800c83a:	f04f 33ff 	mov.w	r3, #4294967295
 800c83e:	e0a2      	b.n	800c986 <SCSI_Read10+0x168>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	7a1b      	ldrb	r3, [r3, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	f040 8094 	bne.w	800c972 <SCSI_Read10+0x154>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	f241 031c 	movw	r3, #4124	; 0x101c
 800c850:	4413      	add	r3, r2
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	b25b      	sxtb	r3, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	db0c      	blt.n	800c874 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	f241 031d 	movw	r3, #4125	; 0x101d
 800c860:	4413      	add	r3, r2
 800c862:	7819      	ldrb	r1, [r3, #0]
 800c864:	2320      	movs	r3, #32
 800c866:	2205      	movs	r2, #5
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7ff fef9 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800c86e:	f04f 33ff 	mov.w	r3, #4294967295
 800c872:	e088      	b.n	800c986 <SCSI_Read10+0x168>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	f241 0362 	movw	r3, #4194	; 0x1062
 800c87a:	4413      	add	r3, r2
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d108      	bne.n	800c894 <SCSI_Read10+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c882:	7af9      	ldrb	r1, [r7, #11]
 800c884:	233a      	movs	r3, #58	; 0x3a
 800c886:	2202      	movs	r2, #2
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7ff fee9 	bl	800c660 <SCSI_SenseCode>

      return -1;
 800c88e:	f04f 33ff 	mov.w	r3, #4294967295
 800c892:	e078      	b.n	800c986 <SCSI_Read10+0x168>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	7afa      	ldrb	r2, [r7, #11]
 800c89e:	4610      	mov	r0, r2
 800c8a0:	4798      	blx	r3
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d008      	beq.n	800c8ba <SCSI_Read10+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c8a8:	7af9      	ldrb	r1, [r7, #11]
 800c8aa:	233a      	movs	r3, #58	; 0x3a
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff fed6 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800c8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b8:	e065      	b.n	800c986 <SCSI_Read10+0x168>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3302      	adds	r3, #2
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3303      	adds	r3, #3
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8ca:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c8d4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	3205      	adds	r2, #5
 800c8da:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c8dc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8de:	6979      	ldr	r1, [r7, #20]
 800c8e0:	f241 036c 	movw	r3, #4204	; 0x106c
 800c8e4:	440b      	add	r3, r1
 800c8e6:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3307      	adds	r3, #7
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	021b      	lsls	r3, r3, #8
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	3208      	adds	r2, #8
 800c8f4:	7812      	ldrb	r2, [r2, #0]
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	6979      	ldr	r1, [r7, #20]
 800c8fa:	f241 0370 	movw	r3, #4208	; 0x1070
 800c8fe:	440b      	add	r3, r1
 800c900:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	f241 036c 	movw	r3, #4204	; 0x106c
 800c908:	4413      	add	r3, r2
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	f241 0370 	movw	r3, #4208	; 0x1070
 800c912:	4413      	add	r3, r2
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	7af9      	ldrb	r1, [r7, #11]
 800c918:	4602      	mov	r2, r0
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f000 fb03 	bl	800cf26 <SCSI_CheckAddressRange>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	da02      	bge.n	800c92c <SCSI_Read10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c926:	f04f 33ff 	mov.w	r3, #4294967295
 800c92a:	e02c      	b.n	800c986 <SCSI_Read10+0x168>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	f241 0318 	movw	r3, #4120	; 0x1018
 800c932:	4413      	add	r3, r2
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	6979      	ldr	r1, [r7, #20]
 800c938:	f241 0370 	movw	r3, #4208	; 0x1070
 800c93c:	440b      	add	r3, r1
 800c93e:	6819      	ldr	r1, [r3, #0]
 800c940:	6978      	ldr	r0, [r7, #20]
 800c942:	f241 0364 	movw	r3, #4196	; 0x1064
 800c946:	4403      	add	r3, r0
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	fb03 f301 	mul.w	r3, r3, r1
 800c94e:	429a      	cmp	r2, r3
 800c950:	d00c      	beq.n	800c96c <SCSI_Read10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	f241 031d 	movw	r3, #4125	; 0x101d
 800c958:	4413      	add	r3, r2
 800c95a:	7819      	ldrb	r1, [r3, #0]
 800c95c:	2320      	movs	r3, #32
 800c95e:	2205      	movs	r2, #5
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f7ff fe7d 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800c966:	f04f 33ff 	mov.w	r3, #4294967295
 800c96a:	e00c      	b.n	800c986 <SCSI_Read10+0x168>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2202      	movs	r2, #2
 800c970:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c978:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	4619      	mov	r1, r3
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f000 fafb 	bl	800cf7a <SCSI_ProcessRead>
 800c984:	4603      	mov	r3, r0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3718      	adds	r7, #24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b086      	sub	sp, #24
 800c992:	af00      	add	r7, sp, #0
 800c994:	60f8      	str	r0, [r7, #12]
 800c996:	460b      	mov	r3, r1
 800c998:	607a      	str	r2, [r7, #4]
 800c99a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9a2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d102      	bne.n	800c9b0 <SCSI_Read12+0x22>
  {
    return -1;
 800c9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ae:	e0ac      	b.n	800cb0a <SCSI_Read12+0x17c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	7a1b      	ldrb	r3, [r3, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f040 809e 	bne.w	800caf6 <SCSI_Read12+0x168>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	f241 031c 	movw	r3, #4124	; 0x101c
 800c9c0:	4413      	add	r3, r2
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	b25b      	sxtb	r3, r3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	db0c      	blt.n	800c9e4 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c9ca:	697a      	ldr	r2, [r7, #20]
 800c9cc:	f241 031d 	movw	r3, #4125	; 0x101d
 800c9d0:	4413      	add	r3, r2
 800c9d2:	7819      	ldrb	r1, [r3, #0]
 800c9d4:	2320      	movs	r3, #32
 800c9d6:	2205      	movs	r2, #5
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f7ff fe41 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800c9de:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e2:	e092      	b.n	800cb0a <SCSI_Read12+0x17c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c9e4:	697a      	ldr	r2, [r7, #20]
 800c9e6:	f241 0362 	movw	r3, #4194	; 0x1062
 800c9ea:	4413      	add	r3, r2
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d108      	bne.n	800ca04 <SCSI_Read12+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c9f2:	7af9      	ldrb	r1, [r7, #11]
 800c9f4:	233a      	movs	r3, #58	; 0x3a
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f7ff fe31 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800c9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ca02:	e082      	b.n	800cb0a <SCSI_Read12+0x17c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	7afa      	ldrb	r2, [r7, #11]
 800ca0e:	4610      	mov	r0, r2
 800ca10:	4798      	blx	r3
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d008      	beq.n	800ca2a <SCSI_Read12+0x9c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ca18:	7af9      	ldrb	r1, [r7, #11]
 800ca1a:	233a      	movs	r3, #58	; 0x3a
 800ca1c:	2202      	movs	r2, #2
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7ff fe1e 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800ca24:	f04f 33ff 	mov.w	r3, #4294967295
 800ca28:	e06f      	b.n	800cb0a <SCSI_Read12+0x17c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3302      	adds	r3, #2
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3303      	adds	r3, #3
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca3a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	3304      	adds	r3, #4
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ca44:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	3205      	adds	r2, #5
 800ca4a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ca4c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca4e:	6979      	ldr	r1, [r7, #20]
 800ca50:	f241 036c 	movw	r3, #4204	; 0x106c
 800ca54:	440b      	add	r3, r1
 800ca56:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3306      	adds	r3, #6
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3307      	adds	r3, #7
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca68:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	3308      	adds	r3, #8
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ca72:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	3209      	adds	r2, #9
 800ca78:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ca7a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca7c:	6979      	ldr	r1, [r7, #20]
 800ca7e:	f241 0370 	movw	r3, #4208	; 0x1070
 800ca82:	440b      	add	r3, r1
 800ca84:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ca86:	697a      	ldr	r2, [r7, #20]
 800ca88:	f241 036c 	movw	r3, #4204	; 0x106c
 800ca8c:	4413      	add	r3, r2
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	f241 0370 	movw	r3, #4208	; 0x1070
 800ca96:	4413      	add	r3, r2
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	7af9      	ldrb	r1, [r7, #11]
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f000 fa41 	bl	800cf26 <SCSI_CheckAddressRange>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	da02      	bge.n	800cab0 <SCSI_Read12+0x122>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800caaa:	f04f 33ff 	mov.w	r3, #4294967295
 800caae:	e02c      	b.n	800cb0a <SCSI_Read12+0x17c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	f241 0318 	movw	r3, #4120	; 0x1018
 800cab6:	4413      	add	r3, r2
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	6979      	ldr	r1, [r7, #20]
 800cabc:	f241 0370 	movw	r3, #4208	; 0x1070
 800cac0:	440b      	add	r3, r1
 800cac2:	6819      	ldr	r1, [r3, #0]
 800cac4:	6978      	ldr	r0, [r7, #20]
 800cac6:	f241 0364 	movw	r3, #4196	; 0x1064
 800caca:	4403      	add	r3, r0
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	fb03 f301 	mul.w	r3, r3, r1
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d00c      	beq.n	800caf0 <SCSI_Read12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	f241 031d 	movw	r3, #4125	; 0x101d
 800cadc:	4413      	add	r3, r2
 800cade:	7819      	ldrb	r1, [r3, #0]
 800cae0:	2320      	movs	r3, #32
 800cae2:	2205      	movs	r2, #5
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f7ff fdbb 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800caea:	f04f 33ff 	mov.w	r3, #4294967295
 800caee:	e00c      	b.n	800cb0a <SCSI_Read12+0x17c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	2202      	movs	r2, #2
 800caf4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cafc:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800cafe:	7afb      	ldrb	r3, [r7, #11]
 800cb00:	4619      	mov	r1, r3
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f000 fa39 	bl	800cf7a <SCSI_ProcessRead>
 800cb08:	4603      	mov	r3, r0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b086      	sub	sp, #24
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	607a      	str	r2, [r7, #4]
 800cb1e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb26:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d102      	bne.n	800cb34 <SCSI_Write10+0x22>
  {
    return -1;
 800cb2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb32:	e0c8      	b.n	800ccc6 <SCSI_Write10+0x1b4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	7a1b      	ldrb	r3, [r3, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f040 80be 	bne.w	800ccba <SCSI_Write10+0x1a8>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	f241 0318 	movw	r3, #4120	; 0x1018
 800cb44:	4413      	add	r3, r2
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d10c      	bne.n	800cb66 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	f241 031d 	movw	r3, #4125	; 0x101d
 800cb52:	4413      	add	r3, r2
 800cb54:	7819      	ldrb	r1, [r3, #0]
 800cb56:	2320      	movs	r3, #32
 800cb58:	2205      	movs	r2, #5
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f7ff fd80 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800cb60:	f04f 33ff 	mov.w	r3, #4294967295
 800cb64:	e0af      	b.n	800ccc6 <SCSI_Write10+0x1b4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	f241 031c 	movw	r3, #4124	; 0x101c
 800cb6c:	4413      	add	r3, r2
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	b25b      	sxtb	r3, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	da0c      	bge.n	800cb90 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	f241 031d 	movw	r3, #4125	; 0x101d
 800cb7c:	4413      	add	r3, r2
 800cb7e:	7819      	ldrb	r1, [r3, #0]
 800cb80:	2320      	movs	r3, #32
 800cb82:	2205      	movs	r2, #5
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f7ff fd6b 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800cb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb8e:	e09a      	b.n	800ccc6 <SCSI_Write10+0x1b4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	7afa      	ldrb	r2, [r7, #11]
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	4798      	blx	r3
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d008      	beq.n	800cbb6 <SCSI_Write10+0xa4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cba4:	7af9      	ldrb	r1, [r7, #11]
 800cba6:	233a      	movs	r3, #58	; 0x3a
 800cba8:	2202      	movs	r2, #2
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f7ff fd58 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800cbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbb4:	e087      	b.n	800ccc6 <SCSI_Write10+0x1b4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	7afa      	ldrb	r2, [r7, #11]
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	4798      	blx	r3
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d008      	beq.n	800cbdc <SCSI_Write10+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800cbca:	7af9      	ldrb	r1, [r7, #11]
 800cbcc:	2327      	movs	r3, #39	; 0x27
 800cbce:	2202      	movs	r2, #2
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f7ff fd45 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800cbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbda:	e074      	b.n	800ccc6 <SCSI_Write10+0x1b4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	3302      	adds	r3, #2
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	3303      	adds	r3, #3
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cbec:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cbf6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	3205      	adds	r2, #5
 800cbfc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800cbfe:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cc00:	6979      	ldr	r1, [r7, #20]
 800cc02:	f241 036c 	movw	r3, #4204	; 0x106c
 800cc06:	440b      	add	r3, r1
 800cc08:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	3307      	adds	r3, #7
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	3208      	adds	r2, #8
 800cc16:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800cc18:	431a      	orrs	r2, r3
 800cc1a:	6979      	ldr	r1, [r7, #20]
 800cc1c:	f241 0370 	movw	r3, #4208	; 0x1070
 800cc20:	440b      	add	r3, r1
 800cc22:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800cc24:	697a      	ldr	r2, [r7, #20]
 800cc26:	f241 036c 	movw	r3, #4204	; 0x106c
 800cc2a:	4413      	add	r3, r2
 800cc2c:	6818      	ldr	r0, [r3, #0]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	f241 0370 	movw	r3, #4208	; 0x1070
 800cc34:	4413      	add	r3, r2
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	7af9      	ldrb	r1, [r7, #11]
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f000 f972 	bl	800cf26 <SCSI_CheckAddressRange>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	da02      	bge.n	800cc4e <SCSI_Write10+0x13c>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800cc48:	f04f 33ff 	mov.w	r3, #4294967295
 800cc4c:	e03b      	b.n	800ccc6 <SCSI_Write10+0x1b4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	f241 0370 	movw	r3, #4208	; 0x1070
 800cc54:	4413      	add	r3, r2
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	6979      	ldr	r1, [r7, #20]
 800cc5a:	f241 0364 	movw	r3, #4196	; 0x1064
 800cc5e:	440b      	add	r3, r1
 800cc60:	881b      	ldrh	r3, [r3, #0]
 800cc62:	fb03 f302 	mul.w	r3, r3, r2
 800cc66:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	f241 0318 	movw	r3, #4120	; 0x1018
 800cc6e:	4413      	add	r3, r2
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d00c      	beq.n	800cc92 <SCSI_Write10+0x180>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cc78:	697a      	ldr	r2, [r7, #20]
 800cc7a:	f241 031d 	movw	r3, #4125	; 0x101d
 800cc7e:	4413      	add	r3, r2
 800cc80:	7819      	ldrb	r1, [r3, #0]
 800cc82:	2320      	movs	r3, #32
 800cc84:	2205      	movs	r2, #5
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7ff fcea 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800cc8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc90:	e019      	b.n	800ccc6 <SCSI_Write10+0x1b4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc98:	bf28      	it	cs
 800cc9a:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800cc9e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2201      	movs	r2, #1
 800cca4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f103 0210 	add.w	r2, r3, #16
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	2101      	movs	r1, #1
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f002 f878 	bl	800eda6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	e005      	b.n	800ccc6 <SCSI_Write10+0x1b4>
    return SCSI_ProcessWrite(pdev, lun);
 800ccba:	7afb      	ldrb	r3, [r7, #11]
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f000 f9ef 	bl	800d0a2 <SCSI_ProcessWrite>
 800ccc4:	4603      	mov	r3, r0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b086      	sub	sp, #24
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	60f8      	str	r0, [r7, #12]
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	607a      	str	r2, [r7, #4]
 800ccda:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cce2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d102      	bne.n	800ccf0 <SCSI_Write12+0x22>
  {
    return -1;
 800ccea:	f04f 33ff 	mov.w	r3, #4294967295
 800ccee:	e0d8      	b.n	800cea2 <SCSI_Write12+0x1d4>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	7a1b      	ldrb	r3, [r3, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f040 80ce 	bne.w	800ce96 <SCSI_Write12+0x1c8>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ccfa:	697a      	ldr	r2, [r7, #20]
 800ccfc:	f241 0318 	movw	r3, #4120	; 0x1018
 800cd00:	4413      	add	r3, r2
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10c      	bne.n	800cd22 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	f241 031d 	movw	r3, #4125	; 0x101d
 800cd0e:	4413      	add	r3, r2
 800cd10:	7819      	ldrb	r1, [r3, #0]
 800cd12:	2320      	movs	r3, #32
 800cd14:	2205      	movs	r2, #5
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f7ff fca2 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd20:	e0bf      	b.n	800cea2 <SCSI_Write12+0x1d4>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800cd22:	697a      	ldr	r2, [r7, #20]
 800cd24:	f241 031c 	movw	r3, #4124	; 0x101c
 800cd28:	4413      	add	r3, r2
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	b25b      	sxtb	r3, r3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	da0c      	bge.n	800cd4c <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	f241 031d 	movw	r3, #4125	; 0x101d
 800cd38:	4413      	add	r3, r2
 800cd3a:	7819      	ldrb	r1, [r3, #0]
 800cd3c:	2320      	movs	r3, #32
 800cd3e:	2205      	movs	r2, #5
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f7ff fc8d 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800cd46:	f04f 33ff 	mov.w	r3, #4294967295
 800cd4a:	e0aa      	b.n	800cea2 <SCSI_Write12+0x1d4>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	7afa      	ldrb	r2, [r7, #11]
 800cd56:	4610      	mov	r0, r2
 800cd58:	4798      	blx	r3
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00b      	beq.n	800cd78 <SCSI_Write12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800cd60:	7af9      	ldrb	r1, [r7, #11]
 800cd62:	233a      	movs	r3, #58	; 0x3a
 800cd64:	2202      	movs	r2, #2
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f7ff fc7a 	bl	800c660 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	2205      	movs	r2, #5
 800cd70:	721a      	strb	r2, [r3, #8]
      return -1;
 800cd72:	f04f 33ff 	mov.w	r3, #4294967295
 800cd76:	e094      	b.n	800cea2 <SCSI_Write12+0x1d4>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	7afa      	ldrb	r2, [r7, #11]
 800cd82:	4610      	mov	r0, r2
 800cd84:	4798      	blx	r3
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00b      	beq.n	800cda4 <SCSI_Write12+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800cd8c:	7af9      	ldrb	r1, [r7, #11]
 800cd8e:	2327      	movs	r3, #39	; 0x27
 800cd90:	2202      	movs	r2, #2
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f7ff fc64 	bl	800c660 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	2205      	movs	r2, #5
 800cd9c:	721a      	strb	r2, [r3, #8]
      return -1;
 800cd9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cda2:	e07e      	b.n	800cea2 <SCSI_Write12+0x1d4>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	3302      	adds	r3, #2
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	3303      	adds	r3, #3
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cdb4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	3304      	adds	r3, #4
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800cdbe:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	3205      	adds	r2, #5
 800cdc4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800cdc6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800cdc8:	6979      	ldr	r1, [r7, #20]
 800cdca:	f241 036c 	movw	r3, #4204	; 0x106c
 800cdce:	440b      	add	r3, r1
 800cdd0:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	3306      	adds	r3, #6
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	3307      	adds	r3, #7
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cde2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	3308      	adds	r3, #8
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800cdec:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	3209      	adds	r2, #9
 800cdf2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800cdf4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800cdf6:	6979      	ldr	r1, [r7, #20]
 800cdf8:	f241 0370 	movw	r3, #4208	; 0x1070
 800cdfc:	440b      	add	r3, r1
 800cdfe:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	f241 036c 	movw	r3, #4204	; 0x106c
 800ce06:	4413      	add	r3, r2
 800ce08:	6818      	ldr	r0, [r3, #0]
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	f241 0370 	movw	r3, #4208	; 0x1070
 800ce10:	4413      	add	r3, r2
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	7af9      	ldrb	r1, [r7, #11]
 800ce16:	4602      	mov	r2, r0
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f000 f884 	bl	800cf26 <SCSI_CheckAddressRange>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	da02      	bge.n	800ce2a <SCSI_Write12+0x15c>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ce24:	f04f 33ff 	mov.w	r3, #4294967295
 800ce28:	e03b      	b.n	800cea2 <SCSI_Write12+0x1d4>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ce2a:	697a      	ldr	r2, [r7, #20]
 800ce2c:	f241 0370 	movw	r3, #4208	; 0x1070
 800ce30:	4413      	add	r3, r2
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	6979      	ldr	r1, [r7, #20]
 800ce36:	f241 0364 	movw	r3, #4196	; 0x1064
 800ce3a:	440b      	add	r3, r1
 800ce3c:	881b      	ldrh	r3, [r3, #0]
 800ce3e:	fb03 f302 	mul.w	r3, r3, r2
 800ce42:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ce44:	697a      	ldr	r2, [r7, #20]
 800ce46:	f241 0318 	movw	r3, #4120	; 0x1018
 800ce4a:	4413      	add	r3, r2
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	693a      	ldr	r2, [r7, #16]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d00c      	beq.n	800ce6e <SCSI_Write12+0x1a0>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	f241 031d 	movw	r3, #4125	; 0x101d
 800ce5a:	4413      	add	r3, r2
 800ce5c:	7819      	ldrb	r1, [r3, #0]
 800ce5e:	2320      	movs	r3, #32
 800ce60:	2205      	movs	r2, #5
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff fbfc 	bl	800c660 <SCSI_SenseCode>
      return -1;
 800ce68:	f04f 33ff 	mov.w	r3, #4294967295
 800ce6c:	e019      	b.n	800cea2 <SCSI_Write12+0x1d4>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce74:	bf28      	it	cs
 800ce76:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ce7a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f103 0210 	add.w	r2, r3, #16
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f001 ff8a 	bl	800eda6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	e005      	b.n	800cea2 <SCSI_Write12+0x1d4>
    return SCSI_ProcessWrite(pdev, lun);
 800ce96:	7afb      	ldrb	r3, [r7, #11]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 f901 	bl	800d0a2 <SCSI_ProcessWrite>
 800cea0:	4603      	mov	r3, r0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3718      	adds	r7, #24
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b086      	sub	sp, #24
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	60f8      	str	r0, [r7, #12]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	607a      	str	r2, [r7, #4]
 800ceb6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cebe:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d102      	bne.n	800cecc <SCSI_Verify10+0x22>
  {
    return -1;
 800cec6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceca:	e028      	b.n	800cf1e <SCSI_Verify10+0x74>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	3301      	adds	r3, #1
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	f003 0302 	and.w	r3, r3, #2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d008      	beq.n	800ceec <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ceda:	7af9      	ldrb	r1, [r7, #11]
 800cedc:	2324      	movs	r3, #36	; 0x24
 800cede:	2205      	movs	r2, #5
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	f7ff fbbd 	bl	800c660 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800cee6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceea:	e018      	b.n	800cf1e <SCSI_Verify10+0x74>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	f241 036c 	movw	r3, #4204	; 0x106c
 800cef2:	4413      	add	r3, r2
 800cef4:	6818      	ldr	r0, [r3, #0]
 800cef6:	697a      	ldr	r2, [r7, #20]
 800cef8:	f241 0370 	movw	r3, #4208	; 0x1070
 800cefc:	4413      	add	r3, r2
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	7af9      	ldrb	r1, [r7, #11]
 800cf02:	4602      	mov	r2, r0
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f000 f80e 	bl	800cf26 <SCSI_CheckAddressRange>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	da02      	bge.n	800cf16 <SCSI_Verify10+0x6c>
  {
    return -1; /* error */
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295
 800cf14:	e003      	b.n	800cf1e <SCSI_Verify10+0x74>
  }

  hmsc->bot_data_length = 0U;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	60da      	str	r2, [r3, #12]

  return 0;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3718      	adds	r7, #24
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b086      	sub	sp, #24
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	60f8      	str	r0, [r7, #12]
 800cf2e:	607a      	str	r2, [r7, #4]
 800cf30:	603b      	str	r3, [r7, #0]
 800cf32:	460b      	mov	r3, r1
 800cf34:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf3c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295
 800cf48:	e013      	b.n	800cf72 <SCSI_CheckAddressRange+0x4c>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	441a      	add	r2, r3
 800cf50:	6979      	ldr	r1, [r7, #20]
 800cf52:	f241 0368 	movw	r3, #4200	; 0x1068
 800cf56:	440b      	add	r3, r1
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d908      	bls.n	800cf70 <SCSI_CheckAddressRange+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800cf5e:	7af9      	ldrb	r1, [r7, #11]
 800cf60:	2321      	movs	r3, #33	; 0x21
 800cf62:	2205      	movs	r2, #5
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f7ff fb7b 	bl	800c660 <SCSI_SenseCode>
    return -1;
 800cf6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6e:	e000      	b.n	800cf72 <SCSI_CheckAddressRange+0x4c>
  }

  return 0;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cf7a:	b5b0      	push	{r4, r5, r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	460b      	mov	r3, r1
 800cf84:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf8c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	f241 0370 	movw	r3, #4208	; 0x1070
 800cf94:	4413      	add	r3, r2
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	68f9      	ldr	r1, [r7, #12]
 800cf9a:	f241 0364 	movw	r3, #4196	; 0x1064
 800cf9e:	440b      	add	r3, r1
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	fb03 f302 	mul.w	r3, r3, r2
 800cfa6:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d102      	bne.n	800cfb4 <SCSI_ProcessRead+0x3a>
  {
    return -1;
 800cfae:	f04f 33ff 	mov.w	r3, #4294967295
 800cfb2:	e072      	b.n	800d09a <SCSI_ProcessRead+0x120>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfba:	bf28      	it	cs
 800cfbc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800cfc0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfc8:	691c      	ldr	r4, [r3, #16]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f103 0110 	add.w	r1, r3, #16
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	f241 036c 	movw	r3, #4204	; 0x106c
 800cfd6:	4413      	add	r3, r2
 800cfd8:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	f241 0364 	movw	r3, #4196	; 0x1064
 800cfe0:	4413      	add	r3, r2
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	78f8      	ldrb	r0, [r7, #3]
 800cff0:	462a      	mov	r2, r5
 800cff2:	47a0      	blx	r4
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	da08      	bge.n	800d00c <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800cffa:	78f9      	ldrb	r1, [r7, #3]
 800cffc:	2311      	movs	r3, #17
 800cffe:	2204      	movs	r2, #4
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff fb2d 	bl	800c660 <SCSI_SenseCode>
    return -1;
 800d006:	f04f 33ff 	mov.w	r3, #4294967295
 800d00a:	e046      	b.n	800d09a <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f103 0210 	add.w	r2, r3, #16
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	2181      	movs	r1, #129	; 0x81
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f001 fea4 	bl	800ed64 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	f241 036c 	movw	r3, #4204	; 0x106c
 800d022:	4413      	add	r3, r2
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68f9      	ldr	r1, [r7, #12]
 800d028:	f241 0364 	movw	r3, #4196	; 0x1064
 800d02c:	440b      	add	r3, r1
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	4619      	mov	r1, r3
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	fbb3 f3f1 	udiv	r3, r3, r1
 800d038:	441a      	add	r2, r3
 800d03a:	68f9      	ldr	r1, [r7, #12]
 800d03c:	f241 036c 	movw	r3, #4204	; 0x106c
 800d040:	440b      	add	r3, r1
 800d042:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	f241 0370 	movw	r3, #4208	; 0x1070
 800d04a:	4413      	add	r3, r2
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	68f9      	ldr	r1, [r7, #12]
 800d050:	f241 0364 	movw	r3, #4196	; 0x1064
 800d054:	440b      	add	r3, r1
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	4619      	mov	r1, r3
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d060:	1ad2      	subs	r2, r2, r3
 800d062:	68f9      	ldr	r1, [r7, #12]
 800d064:	f241 0370 	movw	r3, #4208	; 0x1070
 800d068:	440b      	add	r3, r1
 800d06a:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	f241 0338 	movw	r3, #4152	; 0x1038
 800d072:	4413      	add	r3, r2
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	1ad2      	subs	r2, r2, r3
 800d07a:	68f9      	ldr	r1, [r7, #12]
 800d07c:	f241 0338 	movw	r3, #4152	; 0x1038
 800d080:	440b      	add	r3, r1
 800d082:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	f241 0370 	movw	r3, #4208	; 0x1070
 800d08a:	4413      	add	r3, r2
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d102      	bne.n	800d098 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2203      	movs	r2, #3
 800d096:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bdb0      	pop	{r4, r5, r7, pc}

0800d0a2 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800d0a2:	b5b0      	push	{r4, r5, r7, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0b4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	f241 0370 	movw	r3, #4208	; 0x1070
 800d0bc:	4413      	add	r3, r2
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	68f9      	ldr	r1, [r7, #12]
 800d0c2:	f241 0364 	movw	r3, #4196	; 0x1064
 800d0c6:	440b      	add	r3, r1
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	fb03 f302 	mul.w	r3, r3, r2
 800d0ce:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d102      	bne.n	800d0dc <SCSI_ProcessWrite+0x3a>
  {
    return -1;
 800d0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0da:	e086      	b.n	800d1ea <SCSI_ProcessWrite+0x148>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e2:	bf28      	it	cs
 800d0e4:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800d0e8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0f0:	695c      	ldr	r4, [r3, #20]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f103 0110 	add.w	r1, r3, #16
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	f241 036c 	movw	r3, #4204	; 0x106c
 800d0fe:	4413      	add	r3, r2
 800d100:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	f241 0364 	movw	r3, #4196	; 0x1064
 800d108:	4413      	add	r3, r2
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	461a      	mov	r2, r3
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800d114:	b29b      	uxth	r3, r3
 800d116:	78f8      	ldrb	r0, [r7, #3]
 800d118:	462a      	mov	r2, r5
 800d11a:	47a0      	blx	r4
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	da08      	bge.n	800d134 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800d122:	78f9      	ldrb	r1, [r7, #3]
 800d124:	2303      	movs	r3, #3
 800d126:	2204      	movs	r2, #4
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff fa99 	bl	800c660 <SCSI_SenseCode>
    return -1;
 800d12e:	f04f 33ff 	mov.w	r3, #4294967295
 800d132:	e05a      	b.n	800d1ea <SCSI_ProcessWrite+0x148>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	f241 036c 	movw	r3, #4204	; 0x106c
 800d13a:	4413      	add	r3, r2
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	68f9      	ldr	r1, [r7, #12]
 800d140:	f241 0364 	movw	r3, #4196	; 0x1064
 800d144:	440b      	add	r3, r1
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	4619      	mov	r1, r3
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d150:	441a      	add	r2, r3
 800d152:	68f9      	ldr	r1, [r7, #12]
 800d154:	f241 036c 	movw	r3, #4204	; 0x106c
 800d158:	440b      	add	r3, r1
 800d15a:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	f241 0370 	movw	r3, #4208	; 0x1070
 800d162:	4413      	add	r3, r2
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	68f9      	ldr	r1, [r7, #12]
 800d168:	f241 0364 	movw	r3, #4196	; 0x1064
 800d16c:	440b      	add	r3, r1
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	4619      	mov	r1, r3
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	fbb3 f3f1 	udiv	r3, r3, r1
 800d178:	1ad2      	subs	r2, r2, r3
 800d17a:	68f9      	ldr	r1, [r7, #12]
 800d17c:	f241 0370 	movw	r3, #4208	; 0x1070
 800d180:	440b      	add	r3, r1
 800d182:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	f241 0338 	movw	r3, #4152	; 0x1038
 800d18a:	4413      	add	r3, r2
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	1ad2      	subs	r2, r2, r3
 800d192:	68f9      	ldr	r1, [r7, #12]
 800d194:	f241 0338 	movw	r3, #4152	; 0x1038
 800d198:	440b      	add	r3, r1
 800d19a:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	f241 0370 	movw	r3, #4208	; 0x1070
 800d1a2:	4413      	add	r3, r2
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d104      	bne.n	800d1b4 <SCSI_ProcessWrite+0x112>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7fe fcc9 	bl	800bb44 <MSC_BOT_SendCSW>
 800d1b2:	e019      	b.n	800d1e8 <SCSI_ProcessWrite+0x146>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	f241 0370 	movw	r3, #4208	; 0x1070
 800d1ba:	4413      	add	r3, r2
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	68f9      	ldr	r1, [r7, #12]
 800d1c0:	f241 0364 	movw	r3, #4196	; 0x1064
 800d1c4:	440b      	add	r3, r1
 800d1c6:	881b      	ldrh	r3, [r3, #0]
 800d1c8:	fb03 f302 	mul.w	r3, r3, r2
 800d1cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1d0:	bf28      	it	cs
 800d1d2:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800d1d6:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f103 0210 	add.w	r2, r3, #16
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	2101      	movs	r1, #1
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f001 fddf 	bl	800eda6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bdb0      	pop	{r4, r5, r7, pc}

0800d1f2 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800d1f2:	b480      	push	{r7}
 800d1f4:	b087      	sub	sp, #28
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	60f8      	str	r0, [r7, #12]
 800d1fa:	60b9      	str	r1, [r7, #8]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800d200:	88fb      	ldrh	r3, [r7, #6]
 800d202:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d102      	bne.n	800d210 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800d20a:	f04f 33ff 	mov.w	r3, #4294967295
 800d20e:	e013      	b.n	800d238 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800d210:	8afa      	ldrh	r2, [r7, #22]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800d216:	e00b      	b.n	800d230 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800d218:	8afb      	ldrh	r3, [r7, #22]
 800d21a:	3b01      	subs	r3, #1
 800d21c:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800d21e:	8afb      	ldrh	r3, [r7, #22]
 800d220:	68ba      	ldr	r2, [r7, #8]
 800d222:	441a      	add	r2, r3
 800d224:	8afb      	ldrh	r3, [r7, #22]
 800d226:	7811      	ldrb	r1, [r2, #0]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	4413      	add	r3, r2
 800d22c:	460a      	mov	r2, r1
 800d22e:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800d230:	8afb      	ldrh	r3, [r7, #22]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1f0      	bne.n	800d218 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	371c      	adds	r7, #28
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4613      	mov	r3, r2
 800d250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d258:	2303      	movs	r3, #3
 800d25a:	e01f      	b.n	800d29c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2200      	movs	r2, #0
 800d268:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	79fa      	ldrb	r2, [r7, #7]
 800d28e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f001 fc0f 	bl	800eab4 <USBD_LL_Init>
 800d296:	4603      	mov	r3, r0
 800d298:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d101      	bne.n	800d2bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e016      	b.n	800d2ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00b      	beq.n	800d2e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	f107 020e 	add.w	r2, r7, #14
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4798      	blx	r3
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 fc2a 	bl	800eb54 <USBD_LL_Start>
 800d300:	4603      	mov	r3, r0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b083      	sub	sp, #12
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d32c:	2303      	movs	r3, #3
 800d32e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d336:	2b00      	cmp	r3, #0
 800d338:	d009      	beq.n	800d34e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	78fa      	ldrb	r2, [r7, #3]
 800d344:	4611      	mov	r1, r2
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	4798      	blx	r3
 800d34a:	4603      	mov	r3, r0
 800d34c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d007      	beq.n	800d37e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	78fa      	ldrb	r2, [r7, #3]
 800d378:	4611      	mov	r1, r2
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	4798      	blx	r3
  }

  return USBD_OK;
 800d37e:	2300      	movs	r3, #0
}
 800d380:	4618      	mov	r0, r3
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d398:	6839      	ldr	r1, [r7, #0]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 ff90 	bl	800e2c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d3bc:	f003 031f 	and.w	r3, r3, #31
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d01a      	beq.n	800d3fa <USBD_LL_SetupStage+0x72>
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d822      	bhi.n	800d40e <USBD_LL_SetupStage+0x86>
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <USBD_LL_SetupStage+0x4a>
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d00a      	beq.n	800d3e6 <USBD_LL_SetupStage+0x5e>
 800d3d0:	e01d      	b.n	800d40e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3d8:	4619      	mov	r1, r3
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fa62 	bl	800d8a4 <USBD_StdDevReq>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3e4:	e020      	b.n	800d428 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 fac6 	bl	800d980 <USBD_StdItfReq>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d3f8:	e016      	b.n	800d428 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fb05 	bl	800da12 <USBD_StdEPReq>
 800d408:	4603      	mov	r3, r0
 800d40a:	73fb      	strb	r3, [r7, #15]
      break;
 800d40c:	e00c      	b.n	800d428 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	4619      	mov	r1, r3
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f001 fc18 	bl	800ec52 <USBD_LL_StallEP>
 800d422:	4603      	mov	r3, r0
 800d424:	73fb      	strb	r3, [r7, #15]
      break;
 800d426:	bf00      	nop
  }

  return ret;
 800d428:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b086      	sub	sp, #24
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	460b      	mov	r3, r1
 800d43c:	607a      	str	r2, [r7, #4]
 800d43e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d440:	7afb      	ldrb	r3, [r7, #11]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d138      	bne.n	800d4b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d44c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d454:	2b03      	cmp	r3, #3
 800d456:	d14a      	bne.n	800d4ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	689a      	ldr	r2, [r3, #8]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	429a      	cmp	r2, r3
 800d462:	d913      	bls.n	800d48c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	689a      	ldr	r2, [r3, #8]
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	1ad2      	subs	r2, r2, r3
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	4293      	cmp	r3, r2
 800d47c:	bf28      	it	cs
 800d47e:	4613      	movcs	r3, r2
 800d480:	461a      	mov	r2, r3
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 fff2 	bl	800e46e <USBD_CtlContinueRx>
 800d48a:	e030      	b.n	800d4ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b03      	cmp	r3, #3
 800d496:	d10b      	bne.n	800d4b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d005      	beq.n	800d4b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f000 ffed 	bl	800e490 <USBD_CtlSendStatus>
 800d4b6:	e01a      	b.n	800d4ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	2b03      	cmp	r3, #3
 800d4c2:	d114      	bne.n	800d4ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00e      	beq.n	800d4ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d6:	699b      	ldr	r3, [r3, #24]
 800d4d8:	7afa      	ldrb	r2, [r7, #11]
 800d4da:	4611      	mov	r1, r2
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	4798      	blx	r3
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d4e4:	7dfb      	ldrb	r3, [r7, #23]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
 800d4ec:	e000      	b.n	800d4f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	460b      	mov	r3, r1
 800d502:	607a      	str	r2, [r7, #4]
 800d504:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d506:	7afb      	ldrb	r3, [r7, #11]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d16b      	bne.n	800d5e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	3314      	adds	r3, #20
 800d510:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d156      	bne.n	800d5ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	689a      	ldr	r2, [r3, #8]
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	429a      	cmp	r2, r3
 800d526:	d914      	bls.n	800d552 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	689a      	ldr	r2, [r3, #8]
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	1ad2      	subs	r2, r2, r3
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	461a      	mov	r2, r3
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 ff84 	bl	800e44c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d544:	2300      	movs	r3, #0
 800d546:	2200      	movs	r2, #0
 800d548:	2100      	movs	r1, #0
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f001 fc2b 	bl	800eda6 <USBD_LL_PrepareReceive>
 800d550:	e03b      	b.n	800d5ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	68da      	ldr	r2, [r3, #12]
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d11c      	bne.n	800d598 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	685a      	ldr	r2, [r3, #4]
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d566:	429a      	cmp	r2, r3
 800d568:	d316      	bcc.n	800d598 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	685a      	ldr	r2, [r3, #4]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d574:	429a      	cmp	r2, r3
 800d576:	d20f      	bcs.n	800d598 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d578:	2200      	movs	r2, #0
 800d57a:	2100      	movs	r1, #0
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 ff65 	bl	800e44c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d58a:	2300      	movs	r3, #0
 800d58c:	2200      	movs	r2, #0
 800d58e:	2100      	movs	r1, #0
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f001 fc08 	bl	800eda6 <USBD_LL_PrepareReceive>
 800d596:	e018      	b.n	800d5ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d10b      	bne.n	800d5bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d005      	beq.n	800d5bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5bc:	2180      	movs	r1, #128	; 0x80
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f001 fb47 	bl	800ec52 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 ff76 	bl	800e4b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d122      	bne.n	800d61a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f7ff fe98 	bl	800d30a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d5e2:	e01a      	b.n	800d61a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b03      	cmp	r3, #3
 800d5ee:	d114      	bne.n	800d61a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00e      	beq.n	800d61a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	7afa      	ldrb	r2, [r7, #11]
 800d606:	4611      	mov	r1, r2
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	4798      	blx	r3
 800d60c:	4603      	mov	r3, r0
 800d60e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d610:	7dfb      	ldrb	r3, [r7, #23]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d001      	beq.n	800d61a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d616:	7dfb      	ldrb	r3, [r7, #23]
 800d618:	e000      	b.n	800d61c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d654:	2303      	movs	r3, #3
 800d656:	e02f      	b.n	800d6b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00f      	beq.n	800d682 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d009      	beq.n	800d682 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	6852      	ldr	r2, [r2, #4]
 800d67a:	b2d2      	uxtb	r2, r2
 800d67c:	4611      	mov	r1, r2
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d682:	2340      	movs	r3, #64	; 0x40
 800d684:	2200      	movs	r2, #0
 800d686:	2100      	movs	r1, #0
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f001 fa7e 	bl	800eb8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2240      	movs	r2, #64	; 0x40
 800d69a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d69e:	2340      	movs	r3, #64	; 0x40
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	2180      	movs	r1, #128	; 0x80
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f001 fa70 	bl	800eb8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2240      	movs	r2, #64	; 0x40
 800d6b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	78fa      	ldrb	r2, [r7, #3]
 800d6d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2204      	movs	r2, #4
 800d6fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b04      	cmp	r3, #4
 800d71e:	d106      	bne.n	800d72e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d726:	b2da      	uxtb	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d101      	bne.n	800d752 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d74e:	2303      	movs	r3, #3
 800d750:	e012      	b.n	800d778 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d10b      	bne.n	800d776 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d764:	69db      	ldr	r3, [r3, #28]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d005      	beq.n	800d776 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d770:	69db      	ldr	r3, [r3, #28]
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d796:	2303      	movs	r3, #3
 800d798:	e014      	b.n	800d7c4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	2b03      	cmp	r3, #3
 800d7a4:	d10d      	bne.n	800d7c2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d007      	beq.n	800d7c2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b8:	6a1b      	ldr	r3, [r3, #32]
 800d7ba:	78fa      	ldrb	r2, [r7, #3]
 800d7bc:	4611      	mov	r1, r2
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e014      	b.n	800d810 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d10d      	bne.n	800d80e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d007      	beq.n	800d80e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d806:	78fa      	ldrb	r2, [r7, #3]
 800d808:	4611      	mov	r1, r2
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b082      	sub	sp, #8
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d844:	2b00      	cmp	r3, #0
 800d846:	d009      	beq.n	800d85c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	6852      	ldr	r2, [r2, #4]
 800d854:	b2d2      	uxtb	r2, r2
 800d856:	4611      	mov	r1, r2
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	4798      	blx	r3
  }

  return USBD_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d866:	b480      	push	{r7}
 800d868:	b087      	sub	sp, #28
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	3301      	adds	r3, #1
 800d87c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d884:	8a3b      	ldrh	r3, [r7, #16]
 800d886:	021b      	lsls	r3, r3, #8
 800d888:	b21a      	sxth	r2, r3
 800d88a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d88e:	4313      	orrs	r3, r2
 800d890:	b21b      	sxth	r3, r3
 800d892:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d894:	89fb      	ldrh	r3, [r7, #14]
}
 800d896:	4618      	mov	r0, r3
 800d898:	371c      	adds	r7, #28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
	...

0800d8a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8ba:	2b40      	cmp	r3, #64	; 0x40
 800d8bc:	d005      	beq.n	800d8ca <USBD_StdDevReq+0x26>
 800d8be:	2b40      	cmp	r3, #64	; 0x40
 800d8c0:	d853      	bhi.n	800d96a <USBD_StdDevReq+0xc6>
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00b      	beq.n	800d8de <USBD_StdDevReq+0x3a>
 800d8c6:	2b20      	cmp	r3, #32
 800d8c8:	d14f      	bne.n	800d96a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	4798      	blx	r3
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73fb      	strb	r3, [r7, #15]
      break;
 800d8dc:	e04a      	b.n	800d974 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	785b      	ldrb	r3, [r3, #1]
 800d8e2:	2b09      	cmp	r3, #9
 800d8e4:	d83b      	bhi.n	800d95e <USBD_StdDevReq+0xba>
 800d8e6:	a201      	add	r2, pc, #4	; (adr r2, 800d8ec <USBD_StdDevReq+0x48>)
 800d8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ec:	0800d941 	.word	0x0800d941
 800d8f0:	0800d955 	.word	0x0800d955
 800d8f4:	0800d95f 	.word	0x0800d95f
 800d8f8:	0800d94b 	.word	0x0800d94b
 800d8fc:	0800d95f 	.word	0x0800d95f
 800d900:	0800d91f 	.word	0x0800d91f
 800d904:	0800d915 	.word	0x0800d915
 800d908:	0800d95f 	.word	0x0800d95f
 800d90c:	0800d937 	.word	0x0800d937
 800d910:	0800d929 	.word	0x0800d929
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d914:	6839      	ldr	r1, [r7, #0]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 f9de 	bl	800dcd8 <USBD_GetDescriptor>
          break;
 800d91c:	e024      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fb43 	bl	800dfac <USBD_SetAddress>
          break;
 800d926:	e01f      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 fb82 	bl	800e034 <USBD_SetConfig>
 800d930:	4603      	mov	r3, r0
 800d932:	73fb      	strb	r3, [r7, #15]
          break;
 800d934:	e018      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d936:	6839      	ldr	r1, [r7, #0]
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 fc21 	bl	800e180 <USBD_GetConfig>
          break;
 800d93e:	e013      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d940:	6839      	ldr	r1, [r7, #0]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fc52 	bl	800e1ec <USBD_GetStatus>
          break;
 800d948:	e00e      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d94a:	6839      	ldr	r1, [r7, #0]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fc81 	bl	800e254 <USBD_SetFeature>
          break;
 800d952:	e009      	b.n	800d968 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 fc90 	bl	800e27c <USBD_ClrFeature>
          break;
 800d95c:	e004      	b.n	800d968 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d95e:	6839      	ldr	r1, [r7, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 fce7 	bl	800e334 <USBD_CtlError>
          break;
 800d966:	bf00      	nop
      }
      break;
 800d968:	e004      	b.n	800d974 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fce1 	bl	800e334 <USBD_CtlError>
      break;
 800d972:	bf00      	nop
  }

  return ret;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop

0800d980 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d996:	2b40      	cmp	r3, #64	; 0x40
 800d998:	d005      	beq.n	800d9a6 <USBD_StdItfReq+0x26>
 800d99a:	2b40      	cmp	r3, #64	; 0x40
 800d99c:	d82f      	bhi.n	800d9fe <USBD_StdItfReq+0x7e>
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <USBD_StdItfReq+0x26>
 800d9a2:	2b20      	cmp	r3, #32
 800d9a4:	d12b      	bne.n	800d9fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d81d      	bhi.n	800d9f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	889b      	ldrh	r3, [r3, #4]
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d813      	bhi.n	800d9e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	4798      	blx	r3
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	88db      	ldrh	r3, [r3, #6]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d110      	bne.n	800d9fa <USBD_StdItfReq+0x7a>
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10d      	bne.n	800d9fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fd56 	bl	800e490 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d9e4:	e009      	b.n	800d9fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fca3 	bl	800e334 <USBD_CtlError>
          break;
 800d9ee:	e004      	b.n	800d9fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d9f0:	6839      	ldr	r1, [r7, #0]
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fc9e 	bl	800e334 <USBD_CtlError>
          break;
 800d9f8:	e000      	b.n	800d9fc <USBD_StdItfReq+0x7c>
          break;
 800d9fa:	bf00      	nop
      }
      break;
 800d9fc:	e004      	b.n	800da08 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fc97 	bl	800e334 <USBD_CtlError>
      break;
 800da06:	bf00      	nop
  }

  return ret;
 800da08:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b084      	sub	sp, #16
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	889b      	ldrh	r3, [r3, #4]
 800da24:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da2e:	2b40      	cmp	r3, #64	; 0x40
 800da30:	d007      	beq.n	800da42 <USBD_StdEPReq+0x30>
 800da32:	2b40      	cmp	r3, #64	; 0x40
 800da34:	f200 8145 	bhi.w	800dcc2 <USBD_StdEPReq+0x2b0>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00c      	beq.n	800da56 <USBD_StdEPReq+0x44>
 800da3c:	2b20      	cmp	r3, #32
 800da3e:	f040 8140 	bne.w	800dcc2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	4798      	blx	r3
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]
      break;
 800da54:	e13a      	b.n	800dccc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	785b      	ldrb	r3, [r3, #1]
 800da5a:	2b03      	cmp	r3, #3
 800da5c:	d007      	beq.n	800da6e <USBD_StdEPReq+0x5c>
 800da5e:	2b03      	cmp	r3, #3
 800da60:	f300 8129 	bgt.w	800dcb6 <USBD_StdEPReq+0x2a4>
 800da64:	2b00      	cmp	r3, #0
 800da66:	d07f      	beq.n	800db68 <USBD_StdEPReq+0x156>
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d03c      	beq.n	800dae6 <USBD_StdEPReq+0xd4>
 800da6c:	e123      	b.n	800dcb6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da74:	b2db      	uxtb	r3, r3
 800da76:	2b02      	cmp	r3, #2
 800da78:	d002      	beq.n	800da80 <USBD_StdEPReq+0x6e>
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d016      	beq.n	800daac <USBD_StdEPReq+0x9a>
 800da7e:	e02c      	b.n	800dada <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da80:	7bbb      	ldrb	r3, [r7, #14]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00d      	beq.n	800daa2 <USBD_StdEPReq+0x90>
 800da86:	7bbb      	ldrb	r3, [r7, #14]
 800da88:	2b80      	cmp	r3, #128	; 0x80
 800da8a:	d00a      	beq.n	800daa2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da8c:	7bbb      	ldrb	r3, [r7, #14]
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f001 f8de 	bl	800ec52 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da96:	2180      	movs	r1, #128	; 0x80
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f001 f8da 	bl	800ec52 <USBD_LL_StallEP>
 800da9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800daa0:	e020      	b.n	800dae4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 fc45 	bl	800e334 <USBD_CtlError>
              break;
 800daaa:	e01b      	b.n	800dae4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	885b      	ldrh	r3, [r3, #2]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d10e      	bne.n	800dad2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dab4:	7bbb      	ldrb	r3, [r7, #14]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00b      	beq.n	800dad2 <USBD_StdEPReq+0xc0>
 800daba:	7bbb      	ldrb	r3, [r7, #14]
 800dabc:	2b80      	cmp	r3, #128	; 0x80
 800dabe:	d008      	beq.n	800dad2 <USBD_StdEPReq+0xc0>
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	88db      	ldrh	r3, [r3, #6]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d104      	bne.n	800dad2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 f8c0 	bl	800ec52 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fcdc 	bl	800e490 <USBD_CtlSendStatus>

              break;
 800dad8:	e004      	b.n	800dae4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 fc29 	bl	800e334 <USBD_CtlError>
              break;
 800dae2:	bf00      	nop
          }
          break;
 800dae4:	e0ec      	b.n	800dcc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d002      	beq.n	800daf8 <USBD_StdEPReq+0xe6>
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d016      	beq.n	800db24 <USBD_StdEPReq+0x112>
 800daf6:	e030      	b.n	800db5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800daf8:	7bbb      	ldrb	r3, [r7, #14]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00d      	beq.n	800db1a <USBD_StdEPReq+0x108>
 800dafe:	7bbb      	ldrb	r3, [r7, #14]
 800db00:	2b80      	cmp	r3, #128	; 0x80
 800db02:	d00a      	beq.n	800db1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800db04:	7bbb      	ldrb	r3, [r7, #14]
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f001 f8a2 	bl	800ec52 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800db0e:	2180      	movs	r1, #128	; 0x80
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f001 f89e 	bl	800ec52 <USBD_LL_StallEP>
 800db16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800db18:	e025      	b.n	800db66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fc09 	bl	800e334 <USBD_CtlError>
              break;
 800db22:	e020      	b.n	800db66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	885b      	ldrh	r3, [r3, #2]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d11b      	bne.n	800db64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800db2c:	7bbb      	ldrb	r3, [r7, #14]
 800db2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db32:	2b00      	cmp	r3, #0
 800db34:	d004      	beq.n	800db40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800db36:	7bbb      	ldrb	r3, [r7, #14]
 800db38:	4619      	mov	r1, r3
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f001 f8a8 	bl	800ec90 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fca5 	bl	800e490 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	4798      	blx	r3
 800db54:	4603      	mov	r3, r0
 800db56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800db58:	e004      	b.n	800db64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fbe9 	bl	800e334 <USBD_CtlError>
              break;
 800db62:	e000      	b.n	800db66 <USBD_StdEPReq+0x154>
              break;
 800db64:	bf00      	nop
          }
          break;
 800db66:	e0ab      	b.n	800dcc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b02      	cmp	r3, #2
 800db72:	d002      	beq.n	800db7a <USBD_StdEPReq+0x168>
 800db74:	2b03      	cmp	r3, #3
 800db76:	d032      	beq.n	800dbde <USBD_StdEPReq+0x1cc>
 800db78:	e097      	b.n	800dcaa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d007      	beq.n	800db90 <USBD_StdEPReq+0x17e>
 800db80:	7bbb      	ldrb	r3, [r7, #14]
 800db82:	2b80      	cmp	r3, #128	; 0x80
 800db84:	d004      	beq.n	800db90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fbd3 	bl	800e334 <USBD_CtlError>
                break;
 800db8e:	e091      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db94:	2b00      	cmp	r3, #0
 800db96:	da0b      	bge.n	800dbb0 <USBD_StdEPReq+0x19e>
 800db98:	7bbb      	ldrb	r3, [r7, #14]
 800db9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	3310      	adds	r3, #16
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	4413      	add	r3, r2
 800dbac:	3304      	adds	r3, #4
 800dbae:	e00b      	b.n	800dbc8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dbb0:	7bbb      	ldrb	r3, [r7, #14]
 800dbb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2202      	movs	r2, #2
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fc1d 	bl	800e416 <USBD_CtlSendData>
              break;
 800dbdc:	e06a      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dbde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	da11      	bge.n	800dc0a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dbe6:	7bbb      	ldrb	r3, [r7, #14]
 800dbe8:	f003 020f 	and.w	r2, r3, #15
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	4613      	mov	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	440b      	add	r3, r1
 800dbf8:	3324      	adds	r3, #36	; 0x24
 800dbfa:	881b      	ldrh	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d117      	bne.n	800dc30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fb96 	bl	800e334 <USBD_CtlError>
                  break;
 800dc08:	e054      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dc0a:	7bbb      	ldrb	r3, [r7, #14]
 800dc0c:	f003 020f 	and.w	r2, r3, #15
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	4613      	mov	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	4413      	add	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	440b      	add	r3, r1
 800dc1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d104      	bne.n	800dc30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fb83 	bl	800e334 <USBD_CtlError>
                  break;
 800dc2e:	e041      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	da0b      	bge.n	800dc50 <USBD_StdEPReq+0x23e>
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc3e:	4613      	mov	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	3310      	adds	r3, #16
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	e00b      	b.n	800dc68 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc50:	7bbb      	ldrb	r3, [r7, #14]
 800dc52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc56:	4613      	mov	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	4413      	add	r3, r2
 800dc66:	3304      	adds	r3, #4
 800dc68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc6a:	7bbb      	ldrb	r3, [r7, #14]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <USBD_StdEPReq+0x264>
 800dc70:	7bbb      	ldrb	r3, [r7, #14]
 800dc72:	2b80      	cmp	r3, #128	; 0x80
 800dc74:	d103      	bne.n	800dc7e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	e00e      	b.n	800dc9c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc7e:	7bbb      	ldrb	r3, [r7, #14]
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f001 f823 	bl	800ecce <USBD_LL_IsStallEP>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d003      	beq.n	800dc96 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2201      	movs	r2, #1
 800dc92:	601a      	str	r2, [r3, #0]
 800dc94:	e002      	b.n	800dc9c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	4619      	mov	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fbb7 	bl	800e416 <USBD_CtlSendData>
              break;
 800dca8:	e004      	b.n	800dcb4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fb41 	bl	800e334 <USBD_CtlError>
              break;
 800dcb2:	bf00      	nop
          }
          break;
 800dcb4:	e004      	b.n	800dcc0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fb3b 	bl	800e334 <USBD_CtlError>
          break;
 800dcbe:	bf00      	nop
      }
      break;
 800dcc0:	e004      	b.n	800dccc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 fb35 	bl	800e334 <USBD_CtlError>
      break;
 800dcca:	bf00      	nop
  }

  return ret;
 800dccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
	...

0800dcd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dce2:	2300      	movs	r3, #0
 800dce4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dce6:	2300      	movs	r3, #0
 800dce8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dcea:	2300      	movs	r3, #0
 800dcec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	885b      	ldrh	r3, [r3, #2]
 800dcf2:	0a1b      	lsrs	r3, r3, #8
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	2b06      	cmp	r3, #6
 800dcfa:	f200 8128 	bhi.w	800df4e <USBD_GetDescriptor+0x276>
 800dcfe:	a201      	add	r2, pc, #4	; (adr r2, 800dd04 <USBD_GetDescriptor+0x2c>)
 800dd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd04:	0800dd21 	.word	0x0800dd21
 800dd08:	0800dd39 	.word	0x0800dd39
 800dd0c:	0800dd79 	.word	0x0800dd79
 800dd10:	0800df4f 	.word	0x0800df4f
 800dd14:	0800df4f 	.word	0x0800df4f
 800dd18:	0800deef 	.word	0x0800deef
 800dd1c:	0800df1b 	.word	0x0800df1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	7c12      	ldrb	r2, [r2, #16]
 800dd2c:	f107 0108 	add.w	r1, r7, #8
 800dd30:	4610      	mov	r0, r2
 800dd32:	4798      	blx	r3
 800dd34:	60f8      	str	r0, [r7, #12]
      break;
 800dd36:	e112      	b.n	800df5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	7c1b      	ldrb	r3, [r3, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10d      	bne.n	800dd5c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd48:	f107 0208 	add.w	r2, r7, #8
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	4798      	blx	r3
 800dd50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3301      	adds	r3, #1
 800dd56:	2202      	movs	r2, #2
 800dd58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dd5a:	e100      	b.n	800df5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd64:	f107 0208 	add.w	r2, r7, #8
 800dd68:	4610      	mov	r0, r2
 800dd6a:	4798      	blx	r3
 800dd6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3301      	adds	r3, #1
 800dd72:	2202      	movs	r2, #2
 800dd74:	701a      	strb	r2, [r3, #0]
      break;
 800dd76:	e0f2      	b.n	800df5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	885b      	ldrh	r3, [r3, #2]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b05      	cmp	r3, #5
 800dd80:	f200 80ac 	bhi.w	800dedc <USBD_GetDescriptor+0x204>
 800dd84:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <USBD_GetDescriptor+0xb4>)
 800dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8a:	bf00      	nop
 800dd8c:	0800dda5 	.word	0x0800dda5
 800dd90:	0800ddd9 	.word	0x0800ddd9
 800dd94:	0800de0d 	.word	0x0800de0d
 800dd98:	0800de41 	.word	0x0800de41
 800dd9c:	0800de75 	.word	0x0800de75
 800dda0:	0800dea9 	.word	0x0800dea9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00b      	beq.n	800ddc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	7c12      	ldrb	r2, [r2, #16]
 800ddbc:	f107 0108 	add.w	r1, r7, #8
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	4798      	blx	r3
 800ddc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddc6:	e091      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fab2 	bl	800e334 <USBD_CtlError>
            err++;
 800ddd0:	7afb      	ldrb	r3, [r7, #11]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	72fb      	strb	r3, [r7, #11]
          break;
 800ddd6:	e089      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	7c12      	ldrb	r2, [r2, #16]
 800ddf0:	f107 0108 	add.w	r1, r7, #8
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4798      	blx	r3
 800ddf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddfa:	e077      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fa98 	bl	800e334 <USBD_CtlError>
            err++;
 800de04:	7afb      	ldrb	r3, [r7, #11]
 800de06:	3301      	adds	r3, #1
 800de08:	72fb      	strb	r3, [r7, #11]
          break;
 800de0a:	e06f      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00b      	beq.n	800de30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	7c12      	ldrb	r2, [r2, #16]
 800de24:	f107 0108 	add.w	r1, r7, #8
 800de28:	4610      	mov	r0, r2
 800de2a:	4798      	blx	r3
 800de2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de2e:	e05d      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fa7e 	bl	800e334 <USBD_CtlError>
            err++;
 800de38:	7afb      	ldrb	r3, [r7, #11]
 800de3a:	3301      	adds	r3, #1
 800de3c:	72fb      	strb	r3, [r7, #11]
          break;
 800de3e:	e055      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00b      	beq.n	800de64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	7c12      	ldrb	r2, [r2, #16]
 800de58:	f107 0108 	add.w	r1, r7, #8
 800de5c:	4610      	mov	r0, r2
 800de5e:	4798      	blx	r3
 800de60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de62:	e043      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fa64 	bl	800e334 <USBD_CtlError>
            err++;
 800de6c:	7afb      	ldrb	r3, [r7, #11]
 800de6e:	3301      	adds	r3, #1
 800de70:	72fb      	strb	r3, [r7, #11]
          break;
 800de72:	e03b      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de7a:	695b      	ldr	r3, [r3, #20]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00b      	beq.n	800de98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	7c12      	ldrb	r2, [r2, #16]
 800de8c:	f107 0108 	add.w	r1, r7, #8
 800de90:	4610      	mov	r0, r2
 800de92:	4798      	blx	r3
 800de94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de96:	e029      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fa4a 	bl	800e334 <USBD_CtlError>
            err++;
 800dea0:	7afb      	ldrb	r3, [r7, #11]
 800dea2:	3301      	adds	r3, #1
 800dea4:	72fb      	strb	r3, [r7, #11]
          break;
 800dea6:	e021      	b.n	800deec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00b      	beq.n	800decc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	7c12      	ldrb	r2, [r2, #16]
 800dec0:	f107 0108 	add.w	r1, r7, #8
 800dec4:	4610      	mov	r0, r2
 800dec6:	4798      	blx	r3
 800dec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800deca:	e00f      	b.n	800deec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fa30 	bl	800e334 <USBD_CtlError>
            err++;
 800ded4:	7afb      	ldrb	r3, [r7, #11]
 800ded6:	3301      	adds	r3, #1
 800ded8:	72fb      	strb	r3, [r7, #11]
          break;
 800deda:	e007      	b.n	800deec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fa28 	bl	800e334 <USBD_CtlError>
          err++;
 800dee4:	7afb      	ldrb	r3, [r7, #11]
 800dee6:	3301      	adds	r3, #1
 800dee8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800deea:	bf00      	nop
      }
      break;
 800deec:	e037      	b.n	800df5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	7c1b      	ldrb	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d109      	bne.n	800df0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800defc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800defe:	f107 0208 	add.w	r2, r7, #8
 800df02:	4610      	mov	r0, r2
 800df04:	4798      	blx	r3
 800df06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df08:	e029      	b.n	800df5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fa11 	bl	800e334 <USBD_CtlError>
        err++;
 800df12:	7afb      	ldrb	r3, [r7, #11]
 800df14:	3301      	adds	r3, #1
 800df16:	72fb      	strb	r3, [r7, #11]
      break;
 800df18:	e021      	b.n	800df5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	7c1b      	ldrb	r3, [r3, #16]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10d      	bne.n	800df3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df2a:	f107 0208 	add.w	r2, r7, #8
 800df2e:	4610      	mov	r0, r2
 800df30:	4798      	blx	r3
 800df32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3301      	adds	r3, #1
 800df38:	2207      	movs	r2, #7
 800df3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df3c:	e00f      	b.n	800df5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f9f7 	bl	800e334 <USBD_CtlError>
        err++;
 800df46:	7afb      	ldrb	r3, [r7, #11]
 800df48:	3301      	adds	r3, #1
 800df4a:	72fb      	strb	r3, [r7, #11]
      break;
 800df4c:	e007      	b.n	800df5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 f9ef 	bl	800e334 <USBD_CtlError>
      err++;
 800df56:	7afb      	ldrb	r3, [r7, #11]
 800df58:	3301      	adds	r3, #1
 800df5a:	72fb      	strb	r3, [r7, #11]
      break;
 800df5c:	bf00      	nop
  }

  if (err != 0U)
 800df5e:	7afb      	ldrb	r3, [r7, #11]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d11e      	bne.n	800dfa2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	88db      	ldrh	r3, [r3, #6]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d016      	beq.n	800df9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800df6c:	893b      	ldrh	r3, [r7, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00e      	beq.n	800df90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	88da      	ldrh	r2, [r3, #6]
 800df76:	893b      	ldrh	r3, [r7, #8]
 800df78:	4293      	cmp	r3, r2
 800df7a:	bf28      	it	cs
 800df7c:	4613      	movcs	r3, r2
 800df7e:	b29b      	uxth	r3, r3
 800df80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800df82:	893b      	ldrh	r3, [r7, #8]
 800df84:	461a      	mov	r2, r3
 800df86:	68f9      	ldr	r1, [r7, #12]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 fa44 	bl	800e416 <USBD_CtlSendData>
 800df8e:	e009      	b.n	800dfa4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df90:	6839      	ldr	r1, [r7, #0]
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 f9ce 	bl	800e334 <USBD_CtlError>
 800df98:	e004      	b.n	800dfa4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fa78 	bl	800e490 <USBD_CtlSendStatus>
 800dfa0:	e000      	b.n	800dfa4 <USBD_GetDescriptor+0x2cc>
    return;
 800dfa2:	bf00      	nop
  }
}
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop

0800dfac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	889b      	ldrh	r3, [r3, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d131      	bne.n	800e022 <USBD_SetAddress+0x76>
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	88db      	ldrh	r3, [r3, #6]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d12d      	bne.n	800e022 <USBD_SetAddress+0x76>
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	885b      	ldrh	r3, [r3, #2]
 800dfca:	2b7f      	cmp	r3, #127	; 0x7f
 800dfcc:	d829      	bhi.n	800e022 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	885b      	ldrh	r3, [r3, #2]
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d104      	bne.n	800dff0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dfe6:	6839      	ldr	r1, [r7, #0]
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 f9a3 	bl	800e334 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfee:	e01d      	b.n	800e02c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7bfa      	ldrb	r2, [r7, #15]
 800dff4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	4619      	mov	r1, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 fe92 	bl	800ed26 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fa44 	bl	800e490 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e008:	7bfb      	ldrb	r3, [r7, #15]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d004      	beq.n	800e018 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2202      	movs	r2, #2
 800e012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e016:	e009      	b.n	800e02c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e020:	e004      	b.n	800e02c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f985 	bl	800e334 <USBD_CtlError>
  }
}
 800e02a:	bf00      	nop
 800e02c:	bf00      	nop
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e03e:	2300      	movs	r3, #0
 800e040:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	885b      	ldrh	r3, [r3, #2]
 800e046:	b2da      	uxtb	r2, r3
 800e048:	4b4c      	ldr	r3, [pc, #304]	; (800e17c <USBD_SetConfig+0x148>)
 800e04a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e04c:	4b4b      	ldr	r3, [pc, #300]	; (800e17c <USBD_SetConfig+0x148>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d905      	bls.n	800e060 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f96c 	bl	800e334 <USBD_CtlError>
    return USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e088      	b.n	800e172 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d002      	beq.n	800e072 <USBD_SetConfig+0x3e>
 800e06c:	2b03      	cmp	r3, #3
 800e06e:	d025      	beq.n	800e0bc <USBD_SetConfig+0x88>
 800e070:	e071      	b.n	800e156 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e072:	4b42      	ldr	r3, [pc, #264]	; (800e17c <USBD_SetConfig+0x148>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d01c      	beq.n	800e0b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e07a:	4b40      	ldr	r3, [pc, #256]	; (800e17c <USBD_SetConfig+0x148>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e084:	4b3d      	ldr	r3, [pc, #244]	; (800e17c <USBD_SetConfig+0x148>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff f948 	bl	800d320 <USBD_SetClassConfig>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d004      	beq.n	800e0a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e09a:	6839      	ldr	r1, [r7, #0]
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 f949 	bl	800e334 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0a2:	e065      	b.n	800e170 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 f9f3 	bl	800e490 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2203      	movs	r2, #3
 800e0ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e0b2:	e05d      	b.n	800e170 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f9eb 	bl	800e490 <USBD_CtlSendStatus>
      break;
 800e0ba:	e059      	b.n	800e170 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e0bc:	4b2f      	ldr	r3, [pc, #188]	; (800e17c <USBD_SetConfig+0x148>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d112      	bne.n	800e0ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e0cc:	4b2b      	ldr	r3, [pc, #172]	; (800e17c <USBD_SetConfig+0x148>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0d6:	4b29      	ldr	r3, [pc, #164]	; (800e17c <USBD_SetConfig+0x148>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7ff f93b 	bl	800d358 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f9d4 	bl	800e490 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0e8:	e042      	b.n	800e170 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e0ea:	4b24      	ldr	r3, [pc, #144]	; (800e17c <USBD_SetConfig+0x148>)
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d02a      	beq.n	800e14e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	4619      	mov	r1, r3
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7ff f929 	bl	800d358 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e106:	4b1d      	ldr	r3, [pc, #116]	; (800e17c <USBD_SetConfig+0x148>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e110:	4b1a      	ldr	r3, [pc, #104]	; (800e17c <USBD_SetConfig+0x148>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff f902 	bl	800d320 <USBD_SetClassConfig>
 800e11c:	4603      	mov	r3, r0
 800e11e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e120:	7bfb      	ldrb	r3, [r7, #15]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00f      	beq.n	800e146 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 f903 	bl	800e334 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff f90e 	bl	800d358 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2202      	movs	r2, #2
 800e140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e144:	e014      	b.n	800e170 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 f9a2 	bl	800e490 <USBD_CtlSendStatus>
      break;
 800e14c:	e010      	b.n	800e170 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f99e 	bl	800e490 <USBD_CtlSendStatus>
      break;
 800e154:	e00c      	b.n	800e170 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 f8eb 	bl	800e334 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e15e:	4b07      	ldr	r3, [pc, #28]	; (800e17c <USBD_SetConfig+0x148>)
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	4619      	mov	r1, r3
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7ff f8f7 	bl	800d358 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e16a:	2303      	movs	r3, #3
 800e16c:	73fb      	strb	r3, [r7, #15]
      break;
 800e16e:	bf00      	nop
  }

  return ret;
 800e170:	7bfb      	ldrb	r3, [r7, #15]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	24000188 	.word	0x24000188

0800e180 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	88db      	ldrh	r3, [r3, #6]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d004      	beq.n	800e19c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f8cd 	bl	800e334 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e19a:	e023      	b.n	800e1e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	dc02      	bgt.n	800e1ae <USBD_GetConfig+0x2e>
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	dc03      	bgt.n	800e1b4 <USBD_GetConfig+0x34>
 800e1ac:	e015      	b.n	800e1da <USBD_GetConfig+0x5a>
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d00b      	beq.n	800e1ca <USBD_GetConfig+0x4a>
 800e1b2:	e012      	b.n	800e1da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	3308      	adds	r3, #8
 800e1be:	2201      	movs	r2, #1
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f927 	bl	800e416 <USBD_CtlSendData>
        break;
 800e1c8:	e00c      	b.n	800e1e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f91f 	bl	800e416 <USBD_CtlSendData>
        break;
 800e1d8:	e004      	b.n	800e1e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f8a9 	bl	800e334 <USBD_CtlError>
        break;
 800e1e2:	bf00      	nop
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	3b01      	subs	r3, #1
 800e200:	2b02      	cmp	r3, #2
 800e202:	d81e      	bhi.n	800e242 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d004      	beq.n	800e216 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f890 	bl	800e334 <USBD_CtlError>
        break;
 800e214:	e01a      	b.n	800e24c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e222:	2b00      	cmp	r3, #0
 800e224:	d005      	beq.n	800e232 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	f043 0202 	orr.w	r2, r3, #2
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	330c      	adds	r3, #12
 800e236:	2202      	movs	r2, #2
 800e238:	4619      	mov	r1, r3
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 f8eb 	bl	800e416 <USBD_CtlSendData>
      break;
 800e240:	e004      	b.n	800e24c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 f875 	bl	800e334 <USBD_CtlError>
      break;
 800e24a:	bf00      	nop
  }
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	885b      	ldrh	r3, [r3, #2]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d106      	bne.n	800e274 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f90e 	bl	800e490 <USBD_CtlSendStatus>
  }
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	3b01      	subs	r3, #1
 800e290:	2b02      	cmp	r3, #2
 800e292:	d80b      	bhi.n	800e2ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	885b      	ldrh	r3, [r3, #2]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d10c      	bne.n	800e2b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f8f3 	bl	800e490 <USBD_CtlSendStatus>
      }
      break;
 800e2aa:	e004      	b.n	800e2b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 f840 	bl	800e334 <USBD_CtlError>
      break;
 800e2b4:	e000      	b.n	800e2b8 <USBD_ClrFeature+0x3c>
      break;
 800e2b6:	bf00      	nop
  }
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	781a      	ldrb	r2, [r3, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	781a      	ldrb	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f7ff fabb 	bl	800d866 <SWAPBYTE>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	3301      	adds	r3, #1
 800e302:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f7ff faae 	bl	800d866 <SWAPBYTE>
 800e30a:	4603      	mov	r3, r0
 800e30c:	461a      	mov	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3301      	adds	r3, #1
 800e316:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3301      	adds	r3, #1
 800e31c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f7ff faa1 	bl	800d866 <SWAPBYTE>
 800e324:	4603      	mov	r3, r0
 800e326:	461a      	mov	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	80da      	strh	r2, [r3, #6]
}
 800e32c:	bf00      	nop
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e33e:	2180      	movs	r1, #128	; 0x80
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fc86 	bl	800ec52 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e346:	2100      	movs	r1, #0
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fc82 	bl	800ec52 <USBD_LL_StallEP>
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b086      	sub	sp, #24
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	60f8      	str	r0, [r7, #12]
 800e35e:	60b9      	str	r1, [r7, #8]
 800e360:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e362:	2300      	movs	r3, #0
 800e364:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d036      	beq.n	800e3da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e370:	6938      	ldr	r0, [r7, #16]
 800e372:	f000 f836 	bl	800e3e2 <USBD_GetLen>
 800e376:	4603      	mov	r3, r0
 800e378:	3301      	adds	r3, #1
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	005b      	lsls	r3, r3, #1
 800e37e:	b29a      	uxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e384:	7dfb      	ldrb	r3, [r7, #23]
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	4413      	add	r3, r2
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	7812      	ldrb	r2, [r2, #0]
 800e38e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	3301      	adds	r3, #1
 800e394:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e396:	7dfb      	ldrb	r3, [r7, #23]
 800e398:	68ba      	ldr	r2, [r7, #8]
 800e39a:	4413      	add	r3, r2
 800e39c:	2203      	movs	r2, #3
 800e39e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e3a6:	e013      	b.n	800e3d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	693a      	ldr	r2, [r7, #16]
 800e3b0:	7812      	ldrb	r2, [r2, #0]
 800e3b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	613b      	str	r3, [r7, #16]
    idx++;
 800e3ba:	7dfb      	ldrb	r3, [r7, #23]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e3c0:	7dfb      	ldrb	r3, [r7, #23]
 800e3c2:	68ba      	ldr	r2, [r7, #8]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	701a      	strb	r2, [r3, #0]
    idx++;
 800e3ca:	7dfb      	ldrb	r3, [r7, #23]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1e7      	bne.n	800e3a8 <USBD_GetString+0x52>
 800e3d8:	e000      	b.n	800e3dc <USBD_GetString+0x86>
    return;
 800e3da:	bf00      	nop
  }
}
 800e3dc:	3718      	adds	r7, #24
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b085      	sub	sp, #20
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e3f2:	e005      	b.n	800e400 <USBD_GetLen+0x1e>
  {
    len++;
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1f5      	bne.n	800e3f4 <USBD_GetLen+0x12>
  }

  return len;
 800e408:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2202      	movs	r2, #2
 800e426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	2100      	movs	r1, #0
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f000 fc91 	bl	800ed64 <USBD_LL_Transmit>

  return USBD_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	2100      	movs	r1, #0
 800e45e:	68f8      	ldr	r0, [r7, #12]
 800e460:	f000 fc80 	bl	800ed64 <USBD_LL_Transmit>

  return USBD_OK;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b084      	sub	sp, #16
 800e472:	af00      	add	r7, sp, #0
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	2100      	movs	r1, #0
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f000 fc90 	bl	800eda6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e486:	2300      	movs	r3, #0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2204      	movs	r2, #4
 800e49c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fc5c 	bl	800ed64 <USBD_LL_Transmit>

  return USBD_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2205      	movs	r2, #5
 800e4c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	2100      	movs	r1, #0
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fc6a 	bl	800eda6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4d2:	2300      	movs	r3, #0
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4913      	ldr	r1, [pc, #76]	; (800e530 <MX_USB_DEVICE_Init+0x54>)
 800e4e4:	4813      	ldr	r0, [pc, #76]	; (800e534 <MX_USB_DEVICE_Init+0x58>)
 800e4e6:	f7fe fead 	bl	800d244 <USBD_Init>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e4f0:	f7f2 fd52 	bl	8000f98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800e4f4:	4910      	ldr	r1, [pc, #64]	; (800e538 <MX_USB_DEVICE_Init+0x5c>)
 800e4f6:	480f      	ldr	r0, [pc, #60]	; (800e534 <MX_USB_DEVICE_Init+0x58>)
 800e4f8:	f7fe fed4 	bl	800d2a4 <USBD_RegisterClass>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e502:	f7f2 fd49 	bl	8000f98 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800e506:	490d      	ldr	r1, [pc, #52]	; (800e53c <MX_USB_DEVICE_Init+0x60>)
 800e508:	480a      	ldr	r0, [pc, #40]	; (800e534 <MX_USB_DEVICE_Init+0x58>)
 800e50a:	f7fd f947 	bl	800b79c <USBD_MSC_RegisterStorage>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e514:	f7f2 fd40 	bl	8000f98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e518:	4806      	ldr	r0, [pc, #24]	; (800e534 <MX_USB_DEVICE_Init+0x58>)
 800e51a:	f7fe feea 	bl	800d2f2 <USBD_Start>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e524:	f7f2 fd38 	bl	8000f98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e528:	f7f6 faaa 	bl	8004a80 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e52c:	bf00      	nop
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	240000f8 	.word	0x240000f8
 800e534:	24001678 	.word	0x24001678
 800e538:	24000010 	.word	0x24000010
 800e53c:	24000148 	.word	0x24000148

0800e540 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	4603      	mov	r3, r0
 800e548:	6039      	str	r1, [r7, #0]
 800e54a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2212      	movs	r2, #18
 800e550:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e552:	4b03      	ldr	r3, [pc, #12]	; (800e560 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e554:	4618      	mov	r0, r3
 800e556:	370c      	adds	r7, #12
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	24000114 	.word	0x24000114

0800e564 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	4603      	mov	r3, r0
 800e56c:	6039      	str	r1, [r7, #0]
 800e56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	2204      	movs	r2, #4
 800e574:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e576:	4b03      	ldr	r3, [pc, #12]	; (800e584 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e578:	4618      	mov	r0, r3
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr
 800e584:	24000128 	.word	0x24000128

0800e588 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	4603      	mov	r3, r0
 800e590:	6039      	str	r1, [r7, #0]
 800e592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e594:	79fb      	ldrb	r3, [r7, #7]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d105      	bne.n	800e5a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	4907      	ldr	r1, [pc, #28]	; (800e5bc <USBD_FS_ProductStrDescriptor+0x34>)
 800e59e:	4808      	ldr	r0, [pc, #32]	; (800e5c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5a0:	f7ff fed9 	bl	800e356 <USBD_GetString>
 800e5a4:	e004      	b.n	800e5b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5a6:	683a      	ldr	r2, [r7, #0]
 800e5a8:	4904      	ldr	r1, [pc, #16]	; (800e5bc <USBD_FS_ProductStrDescriptor+0x34>)
 800e5aa:	4805      	ldr	r0, [pc, #20]	; (800e5c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5ac:	f7ff fed3 	bl	800e356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5b0:	4b02      	ldr	r3, [pc, #8]	; (800e5bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	24001948 	.word	0x24001948
 800e5c0:	0800ef08 	.word	0x0800ef08

0800e5c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	6039      	str	r1, [r7, #0]
 800e5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e5d0:	683a      	ldr	r2, [r7, #0]
 800e5d2:	4904      	ldr	r1, [pc, #16]	; (800e5e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e5d4:	4804      	ldr	r0, [pc, #16]	; (800e5e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e5d6:	f7ff febe 	bl	800e356 <USBD_GetString>
  return USBD_StrDesc;
 800e5da:	4b02      	ldr	r3, [pc, #8]	; (800e5e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	24001948 	.word	0x24001948
 800e5e8:	0800ef1c 	.word	0x0800ef1c

0800e5ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	6039      	str	r1, [r7, #0]
 800e5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	221a      	movs	r2, #26
 800e5fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e5fe:	f000 f843 	bl	800e688 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e602:	4b02      	ldr	r3, [pc, #8]	; (800e60c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e604:	4618      	mov	r0, r3
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	2400012c 	.word	0x2400012c

0800e610 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	4603      	mov	r3, r0
 800e618:	6039      	str	r1, [r7, #0]
 800e61a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e61c:	79fb      	ldrb	r3, [r7, #7]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d105      	bne.n	800e62e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	4907      	ldr	r1, [pc, #28]	; (800e644 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e626:	4808      	ldr	r0, [pc, #32]	; (800e648 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e628:	f7ff fe95 	bl	800e356 <USBD_GetString>
 800e62c:	e004      	b.n	800e638 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	4904      	ldr	r1, [pc, #16]	; (800e644 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e632:	4805      	ldr	r0, [pc, #20]	; (800e648 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e634:	f7ff fe8f 	bl	800e356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e638:	4b02      	ldr	r3, [pc, #8]	; (800e644 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3708      	adds	r7, #8
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	24001948 	.word	0x24001948
 800e648:	0800ef30 	.word	0x0800ef30

0800e64c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	4603      	mov	r3, r0
 800e654:	6039      	str	r1, [r7, #0]
 800e656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d105      	bne.n	800e66a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	4907      	ldr	r1, [pc, #28]	; (800e680 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e662:	4808      	ldr	r0, [pc, #32]	; (800e684 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e664:	f7ff fe77 	bl	800e356 <USBD_GetString>
 800e668:	e004      	b.n	800e674 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	4904      	ldr	r1, [pc, #16]	; (800e680 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e66e:	4805      	ldr	r0, [pc, #20]	; (800e684 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e670:	f7ff fe71 	bl	800e356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e674:	4b02      	ldr	r3, [pc, #8]	; (800e680 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e676:	4618      	mov	r0, r3
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	24001948 	.word	0x24001948
 800e684:	0800ef3c 	.word	0x0800ef3c

0800e688 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e68e:	4b0f      	ldr	r3, [pc, #60]	; (800e6cc <Get_SerialNum+0x44>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e694:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <Get_SerialNum+0x48>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e69a:	4b0e      	ldr	r3, [pc, #56]	; (800e6d4 <Get_SerialNum+0x4c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d009      	beq.n	800e6c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e6ae:	2208      	movs	r2, #8
 800e6b0:	4909      	ldr	r1, [pc, #36]	; (800e6d8 <Get_SerialNum+0x50>)
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f000 f814 	bl	800e6e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e6b8:	2204      	movs	r2, #4
 800e6ba:	4908      	ldr	r1, [pc, #32]	; (800e6dc <Get_SerialNum+0x54>)
 800e6bc:	68b8      	ldr	r0, [r7, #8]
 800e6be:	f000 f80f 	bl	800e6e0 <IntToUnicode>
  }
}
 800e6c2:	bf00      	nop
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	1ff1e800 	.word	0x1ff1e800
 800e6d0:	1ff1e804 	.word	0x1ff1e804
 800e6d4:	1ff1e808 	.word	0x1ff1e808
 800e6d8:	2400012e 	.word	0x2400012e
 800e6dc:	2400013e 	.word	0x2400013e

0800e6e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b087      	sub	sp, #28
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	75fb      	strb	r3, [r7, #23]
 800e6f6:	e027      	b.n	800e748 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	0f1b      	lsrs	r3, r3, #28
 800e6fc:	2b09      	cmp	r3, #9
 800e6fe:	d80b      	bhi.n	800e718 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	0f1b      	lsrs	r3, r3, #28
 800e704:	b2da      	uxtb	r2, r3
 800e706:	7dfb      	ldrb	r3, [r7, #23]
 800e708:	005b      	lsls	r3, r3, #1
 800e70a:	4619      	mov	r1, r3
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	440b      	add	r3, r1
 800e710:	3230      	adds	r2, #48	; 0x30
 800e712:	b2d2      	uxtb	r2, r2
 800e714:	701a      	strb	r2, [r3, #0]
 800e716:	e00a      	b.n	800e72e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	0f1b      	lsrs	r3, r3, #28
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	7dfb      	ldrb	r3, [r7, #23]
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	4619      	mov	r1, r3
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	440b      	add	r3, r1
 800e728:	3237      	adds	r2, #55	; 0x37
 800e72a:	b2d2      	uxtb	r2, r2
 800e72c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	011b      	lsls	r3, r3, #4
 800e732:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e734:	7dfb      	ldrb	r3, [r7, #23]
 800e736:	005b      	lsls	r3, r3, #1
 800e738:	3301      	adds	r3, #1
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	4413      	add	r3, r2
 800e73e:	2200      	movs	r2, #0
 800e740:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e742:	7dfb      	ldrb	r3, [r7, #23]
 800e744:	3301      	adds	r3, #1
 800e746:	75fb      	strb	r3, [r7, #23]
 800e748:	7dfa      	ldrb	r2, [r7, #23]
 800e74a:	79fb      	ldrb	r3, [r7, #7]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d3d3      	bcc.n	800e6f8 <IntToUnicode+0x18>
  }
}
 800e750:	bf00      	nop
 800e752:	bf00      	nop
 800e754:	371c      	adds	r7, #28
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800e75e:	b480      	push	{r7}
 800e760:	b083      	sub	sp, #12
 800e762:	af00      	add	r7, sp, #0
 800e764:	4603      	mov	r3, r0
 800e766:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800e768:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800e776:	b480      	push	{r7}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	4603      	mov	r3, r0
 800e77e:	60b9      	str	r1, [r7, #8]
 800e780:	607a      	str	r2, [r7, #4]
 800e782:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e78a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e792:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800e794:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e796:	4618      	mov	r0, r3
 800e798:	3714      	adds	r7, #20
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800e7a2:	b480      	push	{r7}
 800e7a4:	b083      	sub	sp, #12
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e7ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800e7c4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b085      	sub	sp, #20
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73fb      	strb	r3, [r7, #15]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800e7e6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3714      	adds	r7, #20
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60b9      	str	r1, [r7, #8]
 800e7fc:	607a      	str	r2, [r7, #4]
 800e7fe:	461a      	mov	r2, r3
 800e800:	4603      	mov	r3, r0
 800e802:	73fb      	strb	r3, [r7, #15]
 800e804:	4613      	mov	r3, r2
 800e806:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800e808:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3714      	adds	r7, #20
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr

0800e816 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800e816:	b480      	push	{r7}
 800e818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800e81a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
	...

0800e828 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b08a      	sub	sp, #40	; 0x28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e830:	f107 0314 	add.w	r3, r7, #20
 800e834:	2200      	movs	r2, #0
 800e836:	601a      	str	r2, [r3, #0]
 800e838:	605a      	str	r2, [r3, #4]
 800e83a:	609a      	str	r2, [r3, #8]
 800e83c:	60da      	str	r2, [r3, #12]
 800e83e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a1f      	ldr	r2, [pc, #124]	; (800e8c4 <HAL_PCD_MspInit+0x9c>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d138      	bne.n	800e8bc <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e84a:	f7f6 f919 	bl	8004a80 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e84e:	4b1e      	ldr	r3, [pc, #120]	; (800e8c8 <HAL_PCD_MspInit+0xa0>)
 800e850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e854:	4a1c      	ldr	r2, [pc, #112]	; (800e8c8 <HAL_PCD_MspInit+0xa0>)
 800e856:	f043 0301 	orr.w	r3, r3, #1
 800e85a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e85e:	4b1a      	ldr	r3, [pc, #104]	; (800e8c8 <HAL_PCD_MspInit+0xa0>)
 800e860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	613b      	str	r3, [r7, #16]
 800e86a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e86c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e872:	2302      	movs	r3, #2
 800e874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e876:	2300      	movs	r3, #0
 800e878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e87a:	2300      	movs	r3, #0
 800e87c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e87e:	230a      	movs	r3, #10
 800e880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e882:	f107 0314 	add.w	r3, r7, #20
 800e886:	4619      	mov	r1, r3
 800e888:	4810      	ldr	r0, [pc, #64]	; (800e8cc <HAL_PCD_MspInit+0xa4>)
 800e88a:	f7f4 fced 	bl	8003268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e88e:	4b0e      	ldr	r3, [pc, #56]	; (800e8c8 <HAL_PCD_MspInit+0xa0>)
 800e890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e894:	4a0c      	ldr	r2, [pc, #48]	; (800e8c8 <HAL_PCD_MspInit+0xa0>)
 800e896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e89a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e89e:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <HAL_PCD_MspInit+0xa0>)
 800e8a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e8a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e8a8:	60fb      	str	r3, [r7, #12]
 800e8aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	2101      	movs	r1, #1
 800e8b0:	2065      	movs	r0, #101	; 0x65
 800e8b2:	f7f4 fb52 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e8b6:	2065      	movs	r0, #101	; 0x65
 800e8b8:	f7f4 fb69 	bl	8002f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e8bc:	bf00      	nop
 800e8be:	3728      	adds	r7, #40	; 0x28
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	40080000 	.word	0x40080000
 800e8c8:	58024400 	.word	0x58024400
 800e8cc:	58020000 	.word	0x58020000

0800e8d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	f7fe fd4e 	bl	800d388 <USBD_LL_SetupStage>
}
 800e8ec:	bf00      	nop
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e906:	78fa      	ldrb	r2, [r7, #3]
 800e908:	6879      	ldr	r1, [r7, #4]
 800e90a:	4613      	mov	r3, r2
 800e90c:	00db      	lsls	r3, r3, #3
 800e90e:	1a9b      	subs	r3, r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	440b      	add	r3, r1
 800e914:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	78fb      	ldrb	r3, [r7, #3]
 800e91c:	4619      	mov	r1, r3
 800e91e:	f7fe fd88 	bl	800d432 <USBD_LL_DataOutStage>
}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b082      	sub	sp, #8
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	460b      	mov	r3, r1
 800e934:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e93c:	78fa      	ldrb	r2, [r7, #3]
 800e93e:	6879      	ldr	r1, [r7, #4]
 800e940:	4613      	mov	r3, r2
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	1a9b      	subs	r3, r3, r2
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	440b      	add	r3, r1
 800e94a:	3348      	adds	r3, #72	; 0x48
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	78fb      	ldrb	r3, [r7, #3]
 800e950:	4619      	mov	r1, r3
 800e952:	f7fe fdd1 	bl	800d4f8 <USBD_LL_DataInStage>
}
 800e956:	bf00      	nop
 800e958:	3708      	adds	r7, #8
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e95e:	b580      	push	{r7, lr}
 800e960:	b082      	sub	sp, #8
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fe fee5 	bl	800d73c <USBD_LL_SOF>
}
 800e972:	bf00      	nop
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e982:	2301      	movs	r3, #1
 800e984:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e98e:	2300      	movs	r3, #0
 800e990:	73fb      	strb	r3, [r7, #15]
 800e992:	e008      	b.n	800e9a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	2b02      	cmp	r3, #2
 800e99a:	d102      	bne.n	800e9a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e99c:	2301      	movs	r3, #1
 800e99e:	73fb      	strb	r3, [r7, #15]
 800e9a0:	e001      	b.n	800e9a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e9a2:	f7f2 faf9 	bl	8000f98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e9ac:	7bfa      	ldrb	r2, [r7, #15]
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fe fe85 	bl	800d6c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fe fe31 	bl	800d624 <USBD_LL_Reset>
}
 800e9c2:	bf00      	nop
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
	...

0800e9cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fe fe80 	bl	800d6e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	6812      	ldr	r2, [r2, #0]
 800e9ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9f2:	f043 0301 	orr.w	r3, r3, #1
 800e9f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a1b      	ldr	r3, [r3, #32]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d005      	beq.n	800ea0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea00:	4b04      	ldr	r3, [pc, #16]	; (800ea14 <HAL_PCD_SuspendCallback+0x48>)
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	4a03      	ldr	r2, [pc, #12]	; (800ea14 <HAL_PCD_SuspendCallback+0x48>)
 800ea06:	f043 0306 	orr.w	r3, r3, #6
 800ea0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea0c:	bf00      	nop
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	e000ed00 	.word	0xe000ed00

0800ea18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fe fe70 	bl	800d70c <USBD_LL_Resume>
}
 800ea2c:	bf00      	nop
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ea46:	78fa      	ldrb	r2, [r7, #3]
 800ea48:	4611      	mov	r1, r2
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe febe 	bl	800d7cc <USBD_LL_IsoOUTIncomplete>
}
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	460b      	mov	r3, r1
 800ea62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ea6a:	78fa      	ldrb	r2, [r7, #3]
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fe fe86 	bl	800d780 <USBD_LL_IsoINIncomplete>
}
 800ea74:	bf00      	nop
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fe fec4 	bl	800d818 <USBD_LL_DevConnected>
}
 800ea90:	bf00      	nop
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fe fec1 	bl	800d82e <USBD_LL_DevDisconnected>
}
 800eaac:	bf00      	nop
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d13e      	bne.n	800eb42 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eac4:	4a21      	ldr	r2, [pc, #132]	; (800eb4c <USBD_LL_Init+0x98>)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a1f      	ldr	r2, [pc, #124]	; (800eb4c <USBD_LL_Init+0x98>)
 800ead0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ead4:	4b1d      	ldr	r3, [pc, #116]	; (800eb4c <USBD_LL_Init+0x98>)
 800ead6:	4a1e      	ldr	r2, [pc, #120]	; (800eb50 <USBD_LL_Init+0x9c>)
 800ead8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800eada:	4b1c      	ldr	r3, [pc, #112]	; (800eb4c <USBD_LL_Init+0x98>)
 800eadc:	2209      	movs	r2, #9
 800eade:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eae0:	4b1a      	ldr	r3, [pc, #104]	; (800eb4c <USBD_LL_Init+0x98>)
 800eae2:	2202      	movs	r2, #2
 800eae4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 800eae6:	4b19      	ldr	r3, [pc, #100]	; (800eb4c <USBD_LL_Init+0x98>)
 800eae8:	2201      	movs	r2, #1
 800eaea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eaec:	4b17      	ldr	r3, [pc, #92]	; (800eb4c <USBD_LL_Init+0x98>)
 800eaee:	2202      	movs	r2, #2
 800eaf0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eaf2:	4b16      	ldr	r3, [pc, #88]	; (800eb4c <USBD_LL_Init+0x98>)
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eaf8:	4b14      	ldr	r3, [pc, #80]	; (800eb4c <USBD_LL_Init+0x98>)
 800eafa:	2200      	movs	r2, #0
 800eafc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eafe:	4b13      	ldr	r3, [pc, #76]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb00:	2200      	movs	r2, #0
 800eb02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800eb04:	4b11      	ldr	r3, [pc, #68]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb06:	2200      	movs	r2, #0
 800eb08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb0a:	4b10      	ldr	r3, [pc, #64]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eb10:	4b0e      	ldr	r3, [pc, #56]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eb16:	480d      	ldr	r0, [pc, #52]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb18:	f7f4 fd6f 	bl	80035fa <HAL_PCD_Init>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d001      	beq.n	800eb26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800eb22:	f7f2 fa39 	bl	8000f98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eb26:	2180      	movs	r1, #128	; 0x80
 800eb28:	4808      	ldr	r0, [pc, #32]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb2a:	f7f5 ff2e 	bl	800498a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eb2e:	2240      	movs	r2, #64	; 0x40
 800eb30:	2100      	movs	r1, #0
 800eb32:	4806      	ldr	r0, [pc, #24]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb34:	f7f5 fee2 	bl	80048fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eb38:	2280      	movs	r2, #128	; 0x80
 800eb3a:	2101      	movs	r1, #1
 800eb3c:	4803      	ldr	r0, [pc, #12]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb3e:	f7f5 fedd 	bl	80048fc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	24001b48 	.word	0x24001b48
 800eb50:	40080000 	.word	0x40080000

0800eb54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb60:	2300      	movs	r3, #0
 800eb62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7f4 fe69 	bl	8003842 <HAL_PCD_Start>
 800eb70:	4603      	mov	r3, r0
 800eb72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 f962 	bl	800ee40 <USBD_Get_USB_Status>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb80:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	4608      	mov	r0, r1
 800eb94:	4611      	mov	r1, r2
 800eb96:	461a      	mov	r2, r3
 800eb98:	4603      	mov	r3, r0
 800eb9a:	70fb      	strb	r3, [r7, #3]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	70bb      	strb	r3, [r7, #2]
 800eba0:	4613      	mov	r3, r2
 800eba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebb2:	78bb      	ldrb	r3, [r7, #2]
 800ebb4:	883a      	ldrh	r2, [r7, #0]
 800ebb6:	78f9      	ldrb	r1, [r7, #3]
 800ebb8:	f7f5 fa7a 	bl	80040b0 <HAL_PCD_EP_Open>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebc0:	7bfb      	ldrb	r3, [r7, #15]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 f93c 	bl	800ee40 <USBD_Get_USB_Status>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b084      	sub	sp, #16
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
 800ebde:	460b      	mov	r3, r1
 800ebe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ebf0:	78fa      	ldrb	r2, [r7, #3]
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7f5 fac3 	bl	8004180 <HAL_PCD_EP_Close>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebfe:	7bfb      	ldrb	r3, [r7, #15]
 800ec00:	4618      	mov	r0, r3
 800ec02:	f000 f91d 	bl	800ee40 <USBD_Get_USB_Status>
 800ec06:	4603      	mov	r3, r0
 800ec08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec2e:	78fa      	ldrb	r2, [r7, #3]
 800ec30:	4611      	mov	r1, r2
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7f5 fc55 	bl	80044e2 <HAL_PCD_EP_Flush>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 f8fe 	bl	800ee40 <USBD_Get_USB_Status>
 800ec44:	4603      	mov	r3, r0
 800ec46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b084      	sub	sp, #16
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec6c:	78fa      	ldrb	r2, [r7, #3]
 800ec6e:	4611      	mov	r1, r2
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7f5 fb7c 	bl	800436e <HAL_PCD_EP_SetStall>
 800ec76:	4603      	mov	r3, r0
 800ec78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 f8df 	bl	800ee40 <USBD_Get_USB_Status>
 800ec82:	4603      	mov	r3, r0
 800ec84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	460b      	mov	r3, r1
 800ec9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ecaa:	78fa      	ldrb	r2, [r7, #3]
 800ecac:	4611      	mov	r1, r2
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7f5 fbc1 	bl	8004436 <HAL_PCD_EP_ClrStall>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 f8c0 	bl	800ee40 <USBD_Get_USB_Status>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecce:	b480      	push	{r7}
 800ecd0:	b085      	sub	sp, #20
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ece0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ece2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	da0b      	bge.n	800ed02 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ecea:	78fb      	ldrb	r3, [r7, #3]
 800ecec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecf0:	68f9      	ldr	r1, [r7, #12]
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	00db      	lsls	r3, r3, #3
 800ecf6:	1a9b      	subs	r3, r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	440b      	add	r3, r1
 800ecfc:	333e      	adds	r3, #62	; 0x3e
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	e00b      	b.n	800ed1a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed02:	78fb      	ldrb	r3, [r7, #3]
 800ed04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed08:	68f9      	ldr	r1, [r7, #12]
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	1a9b      	subs	r3, r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	440b      	add	r3, r1
 800ed14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed18:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3714      	adds	r7, #20
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b084      	sub	sp, #16
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
 800ed2e:	460b      	mov	r3, r1
 800ed30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed32:	2300      	movs	r3, #0
 800ed34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed36:	2300      	movs	r3, #0
 800ed38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed40:	78fa      	ldrb	r2, [r7, #3]
 800ed42:	4611      	mov	r1, r2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7f5 f98e 	bl	8004066 <HAL_PCD_SetAddress>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed4e:	7bfb      	ldrb	r3, [r7, #15]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f000 f875 	bl	800ee40 <USBD_Get_USB_Status>
 800ed56:	4603      	mov	r3, r0
 800ed58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3710      	adds	r7, #16
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	607a      	str	r2, [r7, #4]
 800ed6e:	603b      	str	r3, [r7, #0]
 800ed70:	460b      	mov	r3, r1
 800ed72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ed82:	7af9      	ldrb	r1, [r7, #11]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	f7f5 faa7 	bl	80042da <HAL_PCD_EP_Transmit>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 f854 	bl	800ee40 <USBD_Get_USB_Status>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b086      	sub	sp, #24
 800edaa:	af00      	add	r7, sp, #0
 800edac:	60f8      	str	r0, [r7, #12]
 800edae:	607a      	str	r2, [r7, #4]
 800edb0:	603b      	str	r3, [r7, #0]
 800edb2:	460b      	mov	r3, r1
 800edb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edba:	2300      	movs	r3, #0
 800edbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800edc4:	7af9      	ldrb	r1, [r7, #11]
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	f7f5 fa23 	bl	8004214 <HAL_PCD_EP_Receive>
 800edce:	4603      	mov	r3, r0
 800edd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edd2:	7dfb      	ldrb	r3, [r7, #23]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 f833 	bl	800ee40 <USBD_Get_USB_Status>
 800edda:	4603      	mov	r3, r0
 800eddc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edde:	7dbb      	ldrb	r3, [r7, #22]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	460b      	mov	r3, r1
 800edf2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800edfa:	78fa      	ldrb	r2, [r7, #3]
 800edfc:	4611      	mov	r1, r2
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7f5 fa53 	bl	80042aa <HAL_PCD_EP_GetRxCount>
 800ee04:	4603      	mov	r3, r0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3708      	adds	r7, #8
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
	...

0800ee10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee18:	4b03      	ldr	r3, [pc, #12]	; (800ee28 <USBD_static_malloc+0x18>)
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	2400018c 	.word	0x2400018c

0800ee2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]

}
 800ee34:	bf00      	nop
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4603      	mov	r3, r0
 800ee48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee4e:	79fb      	ldrb	r3, [r7, #7]
 800ee50:	2b03      	cmp	r3, #3
 800ee52:	d817      	bhi.n	800ee84 <USBD_Get_USB_Status+0x44>
 800ee54:	a201      	add	r2, pc, #4	; (adr r2, 800ee5c <USBD_Get_USB_Status+0x1c>)
 800ee56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee5a:	bf00      	nop
 800ee5c:	0800ee6d 	.word	0x0800ee6d
 800ee60:	0800ee73 	.word	0x0800ee73
 800ee64:	0800ee79 	.word	0x0800ee79
 800ee68:	0800ee7f 	.word	0x0800ee7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee70:	e00b      	b.n	800ee8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee72:	2303      	movs	r3, #3
 800ee74:	73fb      	strb	r3, [r7, #15]
    break;
 800ee76:	e008      	b.n	800ee8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee7c:	e005      	b.n	800ee8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee7e:	2303      	movs	r3, #3
 800ee80:	73fb      	strb	r3, [r7, #15]
    break;
 800ee82:	e002      	b.n	800ee8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ee84:	2303      	movs	r3, #3
 800ee86:	73fb      	strb	r3, [r7, #15]
    break;
 800ee88:	bf00      	nop
  }
  return usb_status;
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3714      	adds	r7, #20
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <__libc_init_array>:
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	4d0d      	ldr	r5, [pc, #52]	; (800eed0 <__libc_init_array+0x38>)
 800ee9c:	4c0d      	ldr	r4, [pc, #52]	; (800eed4 <__libc_init_array+0x3c>)
 800ee9e:	1b64      	subs	r4, r4, r5
 800eea0:	10a4      	asrs	r4, r4, #2
 800eea2:	2600      	movs	r6, #0
 800eea4:	42a6      	cmp	r6, r4
 800eea6:	d109      	bne.n	800eebc <__libc_init_array+0x24>
 800eea8:	4d0b      	ldr	r5, [pc, #44]	; (800eed8 <__libc_init_array+0x40>)
 800eeaa:	4c0c      	ldr	r4, [pc, #48]	; (800eedc <__libc_init_array+0x44>)
 800eeac:	f000 f820 	bl	800eef0 <_init>
 800eeb0:	1b64      	subs	r4, r4, r5
 800eeb2:	10a4      	asrs	r4, r4, #2
 800eeb4:	2600      	movs	r6, #0
 800eeb6:	42a6      	cmp	r6, r4
 800eeb8:	d105      	bne.n	800eec6 <__libc_init_array+0x2e>
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec0:	4798      	blx	r3
 800eec2:	3601      	adds	r6, #1
 800eec4:	e7ee      	b.n	800eea4 <__libc_init_array+0xc>
 800eec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeca:	4798      	blx	r3
 800eecc:	3601      	adds	r6, #1
 800eece:	e7f2      	b.n	800eeb6 <__libc_init_array+0x1e>
 800eed0:	0800efb0 	.word	0x0800efb0
 800eed4:	0800efb0 	.word	0x0800efb0
 800eed8:	0800efb0 	.word	0x0800efb0
 800eedc:	0800efb4 	.word	0x0800efb4

0800eee0 <memset>:
 800eee0:	4402      	add	r2, r0
 800eee2:	4603      	mov	r3, r0
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d100      	bne.n	800eeea <memset+0xa>
 800eee8:	4770      	bx	lr
 800eeea:	f803 1b01 	strb.w	r1, [r3], #1
 800eeee:	e7f9      	b.n	800eee4 <memset+0x4>

0800eef0 <_init>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	bf00      	nop
 800eef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eef6:	bc08      	pop	{r3}
 800eef8:	469e      	mov	lr, r3
 800eefa:	4770      	bx	lr

0800eefc <_fini>:
 800eefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefe:	bf00      	nop
 800ef00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef02:	bc08      	pop	{r3}
 800ef04:	469e      	mov	lr, r3
 800ef06:	4770      	bx	lr
